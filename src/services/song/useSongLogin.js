import { useEffect } from 'react';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { useSocketContext } from '@/hooks/SocketContext';

// H√†m fetch d·ªØ li·ªáu t·ª´ API cho danh s√°ch b√†i h√°t, tu√¢n th·ªß chu·∫©n Sails.js
const fetchSongFind = async (page, limit, where, sort) => {
  const token = localStorage.getItem("token");
  const skip = (page - 1) * limit;

  const params = new URLSearchParams({
    limit: limit,
    skip: skip,
    sort: sort,
    where: JSON.stringify(where || {}),
  });

  const response = await fetch(`https://server.pianosync.com/user/songs?${params.toString()}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
};

export const useSongLogin = (page, limit, where, sort) => {
  const queryClient = useQueryClient();
  const { io, connected } = useSocketContext();

  const query = useQuery({
    queryKey: ['songs', page, limit, where, sort], // Key c·ªßa query
    queryFn: () => fetchSongFind(page, limit, where, sort), // H√†m fetch d·ªØ li·ªáu
    keepPreviousData: true, // Gi·ªØ l·∫°i d·ªØ li·ªáu c≈© khi thay ƒë·ªïi page ho·∫∑c limit
    staleTime: 5 * 60 * 1000, // Th·ªùi gian cache d·ªØ li·ªáu, ·ªü ƒë√¢y l√† 5 ph√∫t
    onSuccess: (data) => {
      // Sau khi fetch th√†nh c√¥ng, l∆∞u t·ª´ng b√†i h√°t v√†o cache theo id
      data?.results?.forEach((song) => {
        queryClient.setQueryData(['song', song.id], song); // Cache t·ª´ng b√†i h√°t theo ID
      });
    },
  });

  // üéß L·∫Øng nghe c·∫≠p nh·∫≠t realtime t·ª´ server
  useEffect(() => {
    if (!io || !connected) return;

    const events = {
      created: 'song/created',
      updated: 'song/updated',
      deleted: 'song/deleted',
    };

    // Khi c√≥ b√†i h√°t m·ªõi ho·∫∑c b·ªã x√≥a, fetch l·∫°i danh s√°ch
    const refetchList = () => {
      console.log('üü¢ Invalidating current song list due to create/delete event.');
      queryClient.invalidateQueries({ queryKey: query.queryKey });
    };

    // Khi m·ªôt b√†i h√°t ƒë∆∞·ª£c c·∫≠p nh·∫≠t, c·∫≠p nh·∫≠t cache c·ªßa b√†i ƒë√≥
    const updateSongInList = (updatedSong) => {
      // Ch·ªâ c·∫≠p nh·∫≠t cache n·∫øu b√†i h√°t ƒë√≥ ƒë√£ c√≥ s·∫µn trong cache
      // (t·ª©c l√† b√†i h√°t thu·ªôc danh s√°ch ƒëang hi·ªÉn th·ªã)
      if (queryClient.getQueryData(['song', updatedSong.id])) {
        console.log('üü¢ Song updated in list via socket:', updatedSong);
        queryClient.setQueryData(['song', updatedSong.id], updatedSong);
      }
    };

    io.socket.on(events.created, refetchList);
    io.socket.on(events.deleted, refetchList);
    io.socket.on(events.updated, updateSongInList);

    return () => {
      io.socket.off(events.created, refetchList);
      io.socket.off(events.deleted, refetchList); io.socket.off(events.updated, updateSongInList);
    };
  }, [io, connected, queryClient, query.queryKey]);
  
  // Tr·∫£ v·ªÅ d·ªØ li·ªáu theo c·∫•u tr√∫c mong mu·ªën
  return {
    songs: query.data?.results ?? null,
    pagination: query.data?.pagination ?? null,
    isLoading: query.isLoading,
    isError: query.isError,
    refetch: query.refetch,
  };
};
