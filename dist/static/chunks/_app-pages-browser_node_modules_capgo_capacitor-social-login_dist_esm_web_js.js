"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_capgo_capacitor-social-login_dist_esm_web_js"],{

/***/ "(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/apple-provider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@capgo/capacitor-social-login/dist/esm/apple-provider.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppleSocialLogin: function() { return /* binding */ AppleSocialLogin; }\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/base.js\");\n\nclass AppleSocialLogin extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseSocialLogin {\n    constructor() {\n        super(...arguments);\n        this.clientId = null;\n        this.redirectUrl = null;\n        this.scriptLoaded = false;\n        this.scriptUrl = 'https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js';\n        this.useProperTokenExchange = false;\n    }\n    async initialize(clientId, redirectUrl, useProperTokenExchange = false) {\n        this.clientId = clientId;\n        this.redirectUrl = redirectUrl || null;\n        this.useProperTokenExchange = useProperTokenExchange;\n        if (clientId) {\n            await this.loadAppleScript();\n        }\n    }\n    async login(options) {\n        if (!this.clientId) {\n            throw new Error('Apple Client ID not set. Call initialize() first.');\n        }\n        if (!this.scriptLoaded) {\n            throw new Error('Apple Sign-In script not loaded.');\n        }\n        return new Promise((resolve, reject) => {\n            var _a;\n            AppleID.auth.init({\n                clientId: this.clientId,\n                scope: ((_a = options.scopes) === null || _a === void 0 ? void 0 : _a.join(' ')) || 'name email',\n                redirectURI: this.redirectUrl || window.location.href,\n                state: options.state,\n                nonce: options.nonce,\n                usePopup: true,\n            });\n            AppleID.auth\n                .signIn()\n                .then((res) => {\n                var _a, _b, _c, _d, _e;\n                let accessToken = null;\n                if (this.useProperTokenExchange) {\n                    // When using proper token exchange, the authorization code should be exchanged\n                    // for a proper access token on the backend. For now, we set accessToken to null\n                    // and provide the authorization code in a separate field for backend processing.\n                    accessToken = null;\n                }\n                else {\n                    // Legacy behavior: use authorization code as access token for backward compatibility\n                    accessToken = {\n                        token: res.authorization.code || '',\n                    };\n                }\n                const result = Object.assign({ profile: {\n                        user: res.user || '',\n                        email: ((_a = res.user) === null || _a === void 0 ? void 0 : _a.email) || null,\n                        givenName: ((_c = (_b = res.user) === null || _b === void 0 ? void 0 : _b.name) === null || _c === void 0 ? void 0 : _c.firstName) || null,\n                        familyName: ((_e = (_d = res.user) === null || _d === void 0 ? void 0 : _d.name) === null || _e === void 0 ? void 0 : _e.lastName) || null,\n                    }, accessToken: accessToken, idToken: res.authorization.id_token || null }, (this.useProperTokenExchange && { authorizationCode: res.authorization.code }));\n                resolve({ provider: 'apple', result });\n            })\n                .catch((error) => {\n                reject(error);\n            });\n        });\n    }\n    async logout() {\n        // Apple doesn't provide a logout method for web\n        console.log('Apple logout: Session should be managed on the client side');\n    }\n    async isLoggedIn() {\n        // Apple doesn't provide a method to check login status on web\n        console.log('Apple login status should be managed on the client side');\n        return { isLoggedIn: false };\n    }\n    async getAuthorizationCode() {\n        // Apple authorization code should be obtained during login\n        console.log('Apple authorization code should be stored during login');\n        throw new Error('Apple authorization code not available');\n    }\n    async refresh() {\n        // Apple doesn't provide a refresh method for web\n        console.log('Apple refresh not available on web');\n    }\n    async loadAppleScript() {\n        if (this.scriptLoaded)\n            return;\n        return this.loadScript(this.scriptUrl).then(() => {\n            this.scriptLoaded = true;\n        });\n    }\n}\n//# sourceMappingURL=apple-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2FwZ28vY2FwYWNpdG9yLXNvY2lhbC1sb2dpbi9kaXN0L2VzbS9hcHBsZS1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUNsQywrQkFBK0Isa0RBQWU7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlFQUF5RSxvQ0FBb0MsMkNBQTJDO0FBQzdLLDBCQUEwQiwyQkFBMkI7QUFDckQsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNhcGdvL2NhcGFjaXRvci1zb2NpYWwtbG9naW4vZGlzdC9lc20vYXBwbGUtcHJvdmlkZXIuanM/MzhhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlU29jaWFsTG9naW4gfSBmcm9tICcuL2Jhc2UnO1xuZXhwb3J0IGNsYXNzIEFwcGxlU29jaWFsTG9naW4gZXh0ZW5kcyBCYXNlU29jaWFsTG9naW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNsaWVudElkID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWRpcmVjdFVybCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2NyaXB0TG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NyaXB0VXJsID0gJ2h0dHBzOi8vYXBwbGVpZC5jZG4tYXBwbGUuY29tL2FwcGxlYXV0aC9zdGF0aWMvanNhcGkvYXBwbGVpZC8xL2VuX1VTL2FwcGxlaWQuYXV0aC5qcyc7XG4gICAgICAgIHRoaXMudXNlUHJvcGVyVG9rZW5FeGNoYW5nZSA9IGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyBpbml0aWFsaXplKGNsaWVudElkLCByZWRpcmVjdFVybCwgdXNlUHJvcGVyVG9rZW5FeGNoYW5nZSA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgICAgICAgdGhpcy5yZWRpcmVjdFVybCA9IHJlZGlyZWN0VXJsIHx8IG51bGw7XG4gICAgICAgIHRoaXMudXNlUHJvcGVyVG9rZW5FeGNoYW5nZSA9IHVzZVByb3BlclRva2VuRXhjaGFuZ2U7XG4gICAgICAgIGlmIChjbGllbnRJZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkQXBwbGVTY3JpcHQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBsb2dpbihvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5jbGllbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcHBsZSBDbGllbnQgSUQgbm90IHNldC4gQ2FsbCBpbml0aWFsaXplKCkgZmlyc3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnNjcmlwdExvYWRlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcHBsZSBTaWduLUluIHNjcmlwdCBub3QgbG9hZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBBcHBsZUlELmF1dGguaW5pdCh7XG4gICAgICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgc2NvcGU6ICgoX2EgPSBvcHRpb25zLnNjb3BlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmpvaW4oJyAnKSkgfHwgJ25hbWUgZW1haWwnLFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VVJJOiB0aGlzLnJlZGlyZWN0VXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBvcHRpb25zLnN0YXRlLFxuICAgICAgICAgICAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgICAgICAgICAgIHVzZVBvcHVwOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBBcHBsZUlELmF1dGhcbiAgICAgICAgICAgICAgICAuc2lnbkluKClcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgICAgICAgICBsZXQgYWNjZXNzVG9rZW4gPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZVByb3BlclRva2VuRXhjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB1c2luZyBwcm9wZXIgdG9rZW4gZXhjaGFuZ2UsIHRoZSBhdXRob3JpemF0aW9uIGNvZGUgc2hvdWxkIGJlIGV4Y2hhbmdlZFxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgYSBwcm9wZXIgYWNjZXNzIHRva2VuIG9uIHRoZSBiYWNrZW5kLiBGb3Igbm93LCB3ZSBzZXQgYWNjZXNzVG9rZW4gdG8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgcHJvdmlkZSB0aGUgYXV0aG9yaXphdGlvbiBjb2RlIGluIGEgc2VwYXJhdGUgZmllbGQgZm9yIGJhY2tlbmQgcHJvY2Vzc2luZy5cbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW4gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTGVnYWN5IGJlaGF2aW9yOiB1c2UgYXV0aG9yaXphdGlvbiBjb2RlIGFzIGFjY2VzcyB0b2tlbiBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiByZXMuYXV0aG9yaXphdGlvbi5jb2RlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuYXNzaWduKHsgcHJvZmlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcjogcmVzLnVzZXIgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogKChfYSA9IHJlcy51c2VyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZW1haWwpIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBnaXZlbk5hbWU6ICgoX2MgPSAoX2IgPSByZXMudXNlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm5hbWUpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5maXJzdE5hbWUpIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYW1pbHlOYW1lOiAoKF9lID0gKF9kID0gcmVzLnVzZXIpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5uYW1lKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UubGFzdE5hbWUpIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH0sIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbiwgaWRUb2tlbjogcmVzLmF1dGhvcml6YXRpb24uaWRfdG9rZW4gfHwgbnVsbCB9LCAodGhpcy51c2VQcm9wZXJUb2tlbkV4Y2hhbmdlICYmIHsgYXV0aG9yaXphdGlvbkNvZGU6IHJlcy5hdXRob3JpemF0aW9uLmNvZGUgfSkpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoeyBwcm92aWRlcjogJ2FwcGxlJywgcmVzdWx0IH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgbG9nb3V0KCkge1xuICAgICAgICAvLyBBcHBsZSBkb2Vzbid0IHByb3ZpZGUgYSBsb2dvdXQgbWV0aG9kIGZvciB3ZWJcbiAgICAgICAgY29uc29sZS5sb2coJ0FwcGxlIGxvZ291dDogU2Vzc2lvbiBzaG91bGQgYmUgbWFuYWdlZCBvbiB0aGUgY2xpZW50IHNpZGUnKTtcbiAgICB9XG4gICAgYXN5bmMgaXNMb2dnZWRJbigpIHtcbiAgICAgICAgLy8gQXBwbGUgZG9lc24ndCBwcm92aWRlIGEgbWV0aG9kIHRvIGNoZWNrIGxvZ2luIHN0YXR1cyBvbiB3ZWJcbiAgICAgICAgY29uc29sZS5sb2coJ0FwcGxlIGxvZ2luIHN0YXR1cyBzaG91bGQgYmUgbWFuYWdlZCBvbiB0aGUgY2xpZW50IHNpZGUnKTtcbiAgICAgICAgcmV0dXJuIHsgaXNMb2dnZWRJbjogZmFsc2UgfTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0QXV0aG9yaXphdGlvbkNvZGUoKSB7XG4gICAgICAgIC8vIEFwcGxlIGF1dGhvcml6YXRpb24gY29kZSBzaG91bGQgYmUgb2J0YWluZWQgZHVyaW5nIGxvZ2luXG4gICAgICAgIGNvbnNvbGUubG9nKCdBcHBsZSBhdXRob3JpemF0aW9uIGNvZGUgc2hvdWxkIGJlIHN0b3JlZCBkdXJpbmcgbG9naW4nKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcHBsZSBhdXRob3JpemF0aW9uIGNvZGUgbm90IGF2YWlsYWJsZScpO1xuICAgIH1cbiAgICBhc3luYyByZWZyZXNoKCkge1xuICAgICAgICAvLyBBcHBsZSBkb2Vzbid0IHByb3ZpZGUgYSByZWZyZXNoIG1ldGhvZCBmb3Igd2ViXG4gICAgICAgIGNvbnNvbGUubG9nKCdBcHBsZSByZWZyZXNoIG5vdCBhdmFpbGFibGUgb24gd2ViJyk7XG4gICAgfVxuICAgIGFzeW5jIGxvYWRBcHBsZVNjcmlwdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2NyaXB0TG9hZGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkU2NyaXB0KHRoaXMuc2NyaXB0VXJsKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2NyaXB0TG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbGUtcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/apple-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/base.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@capgo/capacitor-social-login/dist/esm/base.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseSocialLogin: function() { return /* binding */ BaseSocialLogin; }\n/* harmony export */ });\n/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/core */ \"(app-pages-browser)/./node_modules/@capacitor/core/dist/index.js\");\n\nclass BaseSocialLogin extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin {\n    constructor() {\n        super();\n    }\n    parseJwt(token) {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64)\n            .split('')\n            .map((c) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n            .join(''));\n        return JSON.parse(jsonPayload);\n    }\n    async loadScript(src) {\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            script.src = src;\n            script.async = true;\n            script.onload = () => {\n                resolve();\n            };\n            script.onerror = reject;\n            document.body.appendChild(script);\n        });\n    }\n}\nBaseSocialLogin.OAUTH_STATE_KEY = 'social_login_oauth_pending';\n//# sourceMappingURL=base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2FwZ28vY2FwYWNpdG9yLXNvY2lhbC1sb2dpbi9kaXN0L2VzbS9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQ3JDLDhCQUE4QixzREFBUztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNhcGdvL2NhcGFjaXRvci1zb2NpYWwtbG9naW4vZGlzdC9lc20vYmFzZS5qcz80ZGVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdlYlBsdWdpbiB9IGZyb20gJ0BjYXBhY2l0b3IvY29yZSc7XG5leHBvcnQgY2xhc3MgQmFzZVNvY2lhbExvZ2luIGV4dGVuZHMgV2ViUGx1Z2luIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgcGFyc2VKd3QodG9rZW4pIHtcbiAgICAgICAgY29uc3QgYmFzZTY0VXJsID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcbiAgICAgICAgY29uc3QgYmFzZTY0ID0gYmFzZTY0VXJsLnJlcGxhY2UoLy0vZywgJysnKS5yZXBsYWNlKC9fL2csICcvJyk7XG4gICAgICAgIGNvbnN0IGpzb25QYXlsb2FkID0gZGVjb2RlVVJJQ29tcG9uZW50KGF0b2IoYmFzZTY0KVxuICAgICAgICAgICAgLnNwbGl0KCcnKVxuICAgICAgICAgICAgLm1hcCgoYykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICclJyArICgnMDAnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJycpKTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblBheWxvYWQpO1xuICAgIH1cbiAgICBhc3luYyBsb2FkU2NyaXB0KHNyYykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICBzY3JpcHQuc3JjID0gc3JjO1xuICAgICAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNjcmlwdC5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5CYXNlU29jaWFsTG9naW4uT0FVVEhfU1RBVEVfS0VZID0gJ3NvY2lhbF9sb2dpbl9vYXV0aF9wZW5kaW5nJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/base.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/facebook-provider.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@capgo/capacitor-social-login/dist/esm/facebook-provider.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FacebookSocialLogin: function() { return /* binding */ FacebookSocialLogin; }\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/base.js\");\n\nclass FacebookSocialLogin extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseSocialLogin {\n    constructor() {\n        super(...arguments);\n        this.appId = null;\n        this.scriptLoaded = false;\n        this.locale = 'en_US';\n    }\n    async initialize(appId, locale) {\n        this.appId = appId;\n        if (locale) {\n            this.locale = locale;\n        }\n        if (appId) {\n            // Load with the specified locale or default\n            await this.loadFacebookScript(this.locale);\n            FB.init({\n                appId: this.appId,\n                version: 'v17.0',\n                xfbml: true,\n                cookie: true,\n            });\n        }\n    }\n    async login(options) {\n        if (!this.appId) {\n            throw new Error('Facebook App ID not set. Call initialize() first.');\n        }\n        return new Promise((resolve, reject) => {\n            FB.login((response) => {\n                if (response.status === 'connected') {\n                    FB.api('/me', { fields: 'id,name,email,picture' }, (userInfo) => {\n                        var _a, _b;\n                        const result = {\n                            accessToken: {\n                                token: response.authResponse.accessToken,\n                                userId: response.authResponse.userID,\n                            },\n                            profile: {\n                                userID: userInfo.id,\n                                name: userInfo.name,\n                                email: userInfo.email || null,\n                                imageURL: ((_b = (_a = userInfo.picture) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.url) || null,\n                                friendIDs: [],\n                                birthday: null,\n                                ageRange: null,\n                                gender: null,\n                                location: null,\n                                hometown: null,\n                                profileURL: null,\n                            },\n                            idToken: null,\n                        };\n                        resolve({ provider: 'facebook', result });\n                    });\n                }\n                else {\n                    reject(new Error('Facebook login failed'));\n                }\n            }, { scope: options.permissions.join(',') });\n        });\n    }\n    async logout() {\n        return new Promise((resolve) => {\n            FB.logout(() => resolve());\n        });\n    }\n    async isLoggedIn() {\n        return new Promise((resolve) => {\n            FB.getLoginStatus((response) => {\n                resolve({ isLoggedIn: response.status === 'connected' });\n            });\n        });\n    }\n    async getAuthorizationCode() {\n        return new Promise((resolve, reject) => {\n            FB.getLoginStatus((response) => {\n                var _a;\n                if (response.status === 'connected') {\n                    resolve({ jwt: ((_a = response.authResponse) === null || _a === void 0 ? void 0 : _a.accessToken) || '' });\n                }\n                else {\n                    reject(new Error('No Facebook authorization code available'));\n                }\n            });\n        });\n    }\n    async refresh(options) {\n        await this.login(options);\n    }\n    async loadFacebookScript(locale) {\n        if (this.scriptLoaded)\n            return;\n        // Remove any existing Facebook SDK script\n        const existingScript = document.querySelector('script[src*=\"connect.facebook.net\"]');\n        if (existingScript) {\n            existingScript.remove();\n        }\n        return this.loadScript(`https://connect.facebook.net/${locale}/sdk.js`).then(() => {\n            this.scriptLoaded = true;\n        });\n    }\n}\n//# sourceMappingURL=facebook-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2FwZ28vY2FwYWNpdG9yLXNvY2lhbC1sb2dpbi9kaXN0L2VzbS9mYWNlYm9vay1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUNsQyxrQ0FBa0Msa0RBQWU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGlDQUFpQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0Esa0NBQWtDLDhCQUE4QjtBQUNoRSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLElBQUksc0NBQXNDO0FBQ3ZELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw2Q0FBNkM7QUFDdkUsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsK0ZBQStGO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsT0FBTztBQUN0RTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjYXBnby9jYXBhY2l0b3Itc29jaWFsLWxvZ2luL2Rpc3QvZXNtL2ZhY2Vib29rLXByb3ZpZGVyLmpzP2UyMTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVNvY2lhbExvZ2luIH0gZnJvbSAnLi9iYXNlJztcbmV4cG9ydCBjbGFzcyBGYWNlYm9va1NvY2lhbExvZ2luIGV4dGVuZHMgQmFzZVNvY2lhbExvZ2luIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5hcHBJZCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2NyaXB0TG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9jYWxlID0gJ2VuX1VTJztcbiAgICB9XG4gICAgYXN5bmMgaW5pdGlhbGl6ZShhcHBJZCwgbG9jYWxlKSB7XG4gICAgICAgIHRoaXMuYXBwSWQgPSBhcHBJZDtcbiAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgdGhpcy5sb2NhbGUgPSBsb2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFwcElkKSB7XG4gICAgICAgICAgICAvLyBMb2FkIHdpdGggdGhlIHNwZWNpZmllZCBsb2NhbGUgb3IgZGVmYXVsdFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkRmFjZWJvb2tTY3JpcHQodGhpcy5sb2NhbGUpO1xuICAgICAgICAgICAgRkIuaW5pdCh7XG4gICAgICAgICAgICAgICAgYXBwSWQ6IHRoaXMuYXBwSWQsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogJ3YxNy4wJyxcbiAgICAgICAgICAgICAgICB4ZmJtbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb29raWU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBsb2dpbihvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5hcHBJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWNlYm9vayBBcHAgSUQgbm90IHNldC4gQ2FsbCBpbml0aWFsaXplKCkgZmlyc3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIEZCLmxvZ2luKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIEZCLmFwaSgnL21lJywgeyBmaWVsZHM6ICdpZCxuYW1lLGVtYWlsLHBpY3R1cmUnIH0sICh1c2VySW5mbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogcmVzcG9uc2UuYXV0aFJlc3BvbnNlLmFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IHJlc3BvbnNlLmF1dGhSZXNwb25zZS51c2VySUQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJRDogdXNlckluZm8uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHVzZXJJbmZvLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VySW5mby5lbWFpbCB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVVSTDogKChfYiA9IChfYSA9IHVzZXJJbmZvLnBpY3R1cmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kYXRhKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudXJsKSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmllbmRJRHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXJ0aGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdlUmFuZ2U6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmRlcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbWV0b3duOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlVVJMOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRUb2tlbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgcHJvdmlkZXI6ICdmYWNlYm9vaycsIHJlc3VsdCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdGYWNlYm9vayBsb2dpbiBmYWlsZWQnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgeyBzY29wZTogb3B0aW9ucy5wZXJtaXNzaW9ucy5qb2luKCcsJykgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBsb2dvdXQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgRkIubG9nb3V0KCgpID0+IHJlc29sdmUoKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBpc0xvZ2dlZEluKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIEZCLmdldExvZ2luU3RhdHVzKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoeyBpc0xvZ2dlZEluOiByZXNwb25zZS5zdGF0dXMgPT09ICdjb25uZWN0ZWQnIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBnZXRBdXRob3JpemF0aW9uQ29kZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIEZCLmdldExvZ2luU3RhdHVzKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgand0OiAoKF9hID0gcmVzcG9uc2UuYXV0aFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWNjZXNzVG9rZW4pIHx8ICcnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignTm8gRmFjZWJvb2sgYXV0aG9yaXphdGlvbiBjb2RlIGF2YWlsYWJsZScpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHJlZnJlc2gob3B0aW9ucykge1xuICAgICAgICBhd2FpdCB0aGlzLmxvZ2luKG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBsb2FkRmFjZWJvb2tTY3JpcHQobG9jYWxlKSB7XG4gICAgICAgIGlmICh0aGlzLnNjcmlwdExvYWRlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBGYWNlYm9vayBTREsgc2NyaXB0XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nU2NyaXB0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0W3NyYyo9XCJjb25uZWN0LmZhY2Vib29rLm5ldFwiXScpO1xuICAgICAgICBpZiAoZXhpc3RpbmdTY3JpcHQpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nU2NyaXB0LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRTY3JpcHQoYGh0dHBzOi8vY29ubmVjdC5mYWNlYm9vay5uZXQvJHtsb2NhbGV9L3Nkay5qc2ApLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zY3JpcHRMb2FkZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWNlYm9vay1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/facebook-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/google-provider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@capgo/capacitor-social-login/dist/esm/google-provider.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleSocialLogin: function() { return /* binding */ GoogleSocialLogin; }\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/base.js\");\n\nclass GoogleSocialLogin extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseSocialLogin {\n    constructor() {\n        super(...arguments);\n        this.clientId = null;\n        this.loginType = 'online';\n        this.GOOGLE_TOKEN_REQUEST_URL = 'https://www.googleapis.com/oauth2/v3/tokeninfo';\n        this.GOOGLE_STATE_KEY = 'capgo_social_login_google_state';\n    }\n    async initialize(clientId, mode, hostedDomain, redirectUrl) {\n        this.clientId = clientId;\n        if (mode) {\n            this.loginType = mode;\n        }\n        this.hostedDomain = hostedDomain;\n        this.redirectUrl = redirectUrl;\n    }\n    async login(options) {\n        if (!this.clientId) {\n            throw new Error('Google Client ID not set. Call initialize() first.');\n        }\n        let scopes = options.scopes || [];\n        if (scopes.length > 0) {\n            // If scopes are provided, directly use the traditional OAuth flow\n            if (!scopes.includes('https://www.googleapis.com/auth/userinfo.email')) {\n                scopes.push('https://www.googleapis.com/auth/userinfo.email');\n            }\n            if (!scopes.includes('https://www.googleapis.com/auth/userinfo.profile')) {\n                scopes.push('https://www.googleapis.com/auth/userinfo.profile');\n            }\n            if (!scopes.includes('openid')) {\n                scopes.push('openid');\n            }\n        }\n        else {\n            scopes = [\n                'https://www.googleapis.com/auth/userinfo.email',\n                'https://www.googleapis.com/auth/userinfo.profile',\n                'openid',\n            ];\n        }\n        const nonce = options.nonce || Math.random().toString(36).substring(2);\n        // If scopes are provided, directly use the traditional OAuth flow\n        return this.traditionalOAuth({\n            scopes,\n            nonce,\n            hostedDomain: this.hostedDomain,\n        });\n    }\n    async logout() {\n        if (this.loginType === 'offline') {\n            return Promise.reject(\"Offline login doesn't store tokens. logout is not available\");\n        }\n        // eslint-disable-next-line\n        const state = this.getGoogleState();\n        if (!state)\n            return;\n        await this.rawLogoutGoogle(state.accessToken);\n    }\n    async isLoggedIn() {\n        if (this.loginType === 'offline') {\n            return Promise.reject(\"Offline login doesn't store tokens. isLoggedIn is not available\");\n        }\n        // eslint-disable-next-line\n        const state = this.getGoogleState();\n        if (!state)\n            return { isLoggedIn: false };\n        try {\n            const isValidAccessToken = await this.accessTokenIsValid(state.accessToken);\n            const isValidIdToken = this.idTokenValid(state.idToken);\n            if (isValidAccessToken && isValidIdToken) {\n                return { isLoggedIn: true };\n            }\n            else {\n                try {\n                    await this.rawLogoutGoogle(state.accessToken, false);\n                }\n                catch (e) {\n                    console.error('Access token is not valid, but cannot logout', e);\n                }\n                return { isLoggedIn: false };\n            }\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    async getAuthorizationCode() {\n        if (this.loginType === 'offline') {\n            return Promise.reject(\"Offline login doesn't store tokens. getAuthorizationCode is not available\");\n        }\n        // eslint-disable-next-line\n        const state = this.getGoogleState();\n        if (!state)\n            throw new Error('No Google authorization code available');\n        try {\n            const isValidAccessToken = await this.accessTokenIsValid(state.accessToken);\n            const isValidIdToken = this.idTokenValid(state.idToken);\n            if (isValidAccessToken && isValidIdToken) {\n                return { accessToken: state.accessToken, jwt: state.idToken };\n            }\n            else {\n                try {\n                    await this.rawLogoutGoogle(state.accessToken, false);\n                }\n                catch (e) {\n                    console.error('Access token is not valid, but cannot logout', e);\n                }\n                throw new Error('No Google authorization code available');\n            }\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    async refresh() {\n        // For Google, we can prompt for re-authentication\n        return Promise.reject('Not implemented');\n    }\n    handleOAuthRedirect(url) {\n        const paramsRaw = url.searchParams;\n        const code = paramsRaw.get('code');\n        if (code && paramsRaw.has('scope')) {\n            return {\n                provider: 'google',\n                result: {\n                    serverAuthCode: code,\n                    responseType: 'offline',\n                },\n            };\n        }\n        const hash = url.hash.substring(1);\n        console.log('handleOAuthRedirect', url.hash);\n        if (!hash)\n            return null;\n        console.log('handleOAuthRedirect ok');\n        const params = new URLSearchParams(hash);\n        const accessToken = params.get('access_token');\n        const idToken = params.get('id_token');\n        if (accessToken && idToken) {\n            localStorage.removeItem(_base__WEBPACK_IMPORTED_MODULE_0__.BaseSocialLogin.OAUTH_STATE_KEY);\n            const profile = this.parseJwt(idToken);\n            return {\n                provider: 'google',\n                result: {\n                    accessToken: {\n                        token: accessToken,\n                    },\n                    idToken,\n                    profile: {\n                        email: profile.email || null,\n                        familyName: profile.family_name || null,\n                        givenName: profile.given_name || null,\n                        id: profile.sub || null,\n                        name: profile.name || null,\n                        imageUrl: profile.picture || null,\n                    },\n                    responseType: 'online',\n                },\n            };\n        }\n        return null;\n    }\n    async accessTokenIsValid(accessToken) {\n        const url = `${this.GOOGLE_TOKEN_REQUEST_URL}?access_token=${encodeURIComponent(accessToken)}`;\n        try {\n            // Make the GET request using fetch\n            const response = await fetch(url);\n            // Check if the response is successful\n            if (!response.ok) {\n                console.log(`Invalid response from ${this.GOOGLE_TOKEN_REQUEST_URL}. Response not successful. Status code: ${response.status}. Assuming that the token is not valid`);\n                return false;\n            }\n            // Get the response body as text\n            const responseBody = await response.text();\n            if (!responseBody) {\n                console.error(`Invalid response from ${this.GOOGLE_TOKEN_REQUEST_URL}. Response body is null`);\n                throw new Error(`Invalid response from ${this.GOOGLE_TOKEN_REQUEST_URL}. Response body is null`);\n            }\n            // Parse the response body as JSON\n            let jsonObject;\n            try {\n                jsonObject = JSON.parse(responseBody);\n            }\n            catch (e) {\n                console.error(`Invalid response from ${this.GOOGLE_TOKEN_REQUEST_URL}. Response body is not valid JSON. Error: ${e}`);\n                throw new Error(`Invalid response from ${this.GOOGLE_TOKEN_REQUEST_URL}. Response body is not valid JSON. Error: ${e}`);\n            }\n            // Extract the 'expires_in' field\n            const expiresInStr = jsonObject['expires_in'];\n            if (expiresInStr === undefined || expiresInStr === null) {\n                console.error(`Invalid response from ${this.GOOGLE_TOKEN_REQUEST_URL}. Response JSON does not include 'expires_in'.`);\n                throw new Error(`Invalid response from ${this.GOOGLE_TOKEN_REQUEST_URL}. Response JSON does not include 'expires_in'.`);\n            }\n            // Parse 'expires_in' as an integer\n            let expiresInInt;\n            try {\n                expiresInInt = parseInt(expiresInStr, 10);\n                if (isNaN(expiresInInt)) {\n                    throw new Error(`'expires_in' is not a valid integer`);\n                }\n            }\n            catch (e) {\n                console.error(`Invalid response from ${this.GOOGLE_TOKEN_REQUEST_URL}. 'expires_in': ${expiresInStr} is not a valid integer. Error: ${e}`);\n                throw new Error(`Invalid response from ${this.GOOGLE_TOKEN_REQUEST_URL}. 'expires_in': ${expiresInStr} is not a valid integer. Error: ${e}`);\n            }\n            // Determine if the access token is valid based on 'expires_in'\n            return expiresInInt > 5;\n        }\n        catch (error) {\n            console.error(error);\n            throw error;\n        }\n    }\n    idTokenValid(idToken) {\n        try {\n            const parsed = this.parseJwt(idToken);\n            const currentTime = Math.ceil(Date.now() / 1000) + 5; // Convert current time to seconds since epoch\n            return parsed.exp && currentTime < parsed.exp;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    async rawLogoutGoogle(accessToken, tokenValid = null) {\n        if (tokenValid === null) {\n            tokenValid = await this.accessTokenIsValid(accessToken);\n        }\n        if (tokenValid === true) {\n            try {\n                await fetch(`https://accounts.google.com/o/oauth2/revoke?token=${encodeURIComponent(accessToken)}`);\n                this.clearStateGoogle();\n            }\n            catch (e) {\n                // ignore\n            }\n            return;\n        }\n        else {\n            this.clearStateGoogle();\n            return;\n        }\n    }\n    persistStateGoogle(accessToken, idToken) {\n        try {\n            window.localStorage.setItem(this.GOOGLE_STATE_KEY, JSON.stringify({ accessToken, idToken }));\n        }\n        catch (e) {\n            console.error('Cannot persist state google', e);\n        }\n    }\n    clearStateGoogle() {\n        try {\n            window.localStorage.removeItem(this.GOOGLE_STATE_KEY);\n        }\n        catch (e) {\n            console.error('Cannot clear state google', e);\n        }\n    }\n    getGoogleState() {\n        try {\n            const state = window.localStorage.getItem(this.GOOGLE_STATE_KEY);\n            if (!state)\n                return null;\n            const { accessToken, idToken } = JSON.parse(state);\n            return { accessToken, idToken };\n        }\n        catch (e) {\n            console.error('Cannot get state google', e);\n            return null;\n        }\n    }\n    async traditionalOAuth({ scopes, hostedDomain, nonce, }) {\n        const uniqueScopes = [...new Set([...(scopes || []), 'openid'])];\n        const params = new URLSearchParams(Object.assign(Object.assign({ client_id: this.clientId, redirect_uri: this.redirectUrl || window.location.origin + window.location.pathname, response_type: this.loginType === 'offline' ? 'code' : 'token id_token', scope: uniqueScopes.join(' ') }, (nonce && { nonce })), { include_granted_scopes: 'true', state: 'popup' }));\n        if (hostedDomain !== undefined) {\n            params.append('hd', hostedDomain);\n        }\n        const url = `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n        const width = 500;\n        const height = 600;\n        const left = window.screenX + (window.outerWidth - width) / 2;\n        const top = window.screenY + (window.outerHeight - height) / 2;\n        localStorage.setItem(_base__WEBPACK_IMPORTED_MODULE_0__.BaseSocialLogin.OAUTH_STATE_KEY, 'true');\n        const popup = window.open(url, 'Google Sign In', `width=${width},height=${height},left=${left},top=${top},popup=1`);\n        let popupClosedInterval;\n        let timeoutHandle;\n        // This may never return...\n        return new Promise((resolve, reject) => {\n            if (!popup) {\n                reject(new Error('Failed to open popup'));\n                return;\n            }\n            const handleMessage = (event) => {\n                var _a, _b, _c;\n                if (event.origin !== window.location.origin || ((_b = (_a = event.data) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.startsWith('angular')))\n                    return;\n                if (((_c = event.data) === null || _c === void 0 ? void 0 : _c.type) === 'oauth-response') {\n                    window.removeEventListener('message', handleMessage);\n                    clearInterval(popupClosedInterval);\n                    if (this.loginType === 'online') {\n                        const { accessToken, idToken } = event.data;\n                        if (accessToken && idToken) {\n                            const profile = this.parseJwt(idToken);\n                            this.persistStateGoogle(accessToken.token, idToken);\n                            resolve({\n                                provider: 'google',\n                                result: {\n                                    accessToken: {\n                                        token: accessToken.token,\n                                    },\n                                    idToken,\n                                    profile: {\n                                        email: profile.email || null,\n                                        familyName: profile.family_name || null,\n                                        givenName: profile.given_name || null,\n                                        id: profile.sub || null,\n                                        name: profile.name || null,\n                                        imageUrl: profile.picture || null,\n                                    },\n                                    responseType: 'online',\n                                },\n                            });\n                        }\n                    }\n                    else {\n                        const { serverAuthCode } = event.data;\n                        resolve({\n                            provider: 'google',\n                            result: {\n                                responseType: 'offline',\n                                serverAuthCode,\n                            },\n                        });\n                    }\n                }\n                // Don't reject for non-OAuth messages, just ignore them\n            };\n            window.addEventListener('message', handleMessage);\n            // Timeout after 5 minutes\n            timeoutHandle = setTimeout(() => {\n                clearTimeout(timeoutHandle);\n                window.removeEventListener('message', handleMessage);\n                popup.close();\n                reject(new Error('OAuth timeout'));\n            }, 300000);\n            popupClosedInterval = setInterval(() => {\n                if (popup.closed) {\n                    clearInterval(popupClosedInterval);\n                    reject(new Error('Popup closed'));\n                }\n            }, 1000);\n        });\n    }\n}\n//# sourceMappingURL=google-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/google-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/web.js":
/*!********************************************************************!*\
  !*** ./node_modules/@capgo/capacitor-social-login/dist/esm/web.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SocialLoginWeb: function() { return /* binding */ SocialLoginWeb; }\n/* harmony export */ });\n/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/core */ \"(app-pages-browser)/./node_modules/@capacitor/core/dist/index.js\");\n/* harmony import */ var _apple_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apple-provider */ \"(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/apple-provider.js\");\n/* harmony import */ var _facebook_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./facebook-provider */ \"(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/facebook-provider.js\");\n/* harmony import */ var _google_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./google-provider */ \"(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/google-provider.js\");\n\n\n\n\nclass SocialLoginWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin {\n    constructor() {\n        var _a;\n        super();\n        this.googleProvider = new _google_provider__WEBPACK_IMPORTED_MODULE_3__.GoogleSocialLogin();\n        this.appleProvider = new _apple_provider__WEBPACK_IMPORTED_MODULE_1__.AppleSocialLogin();\n        this.facebookProvider = new _facebook_provider__WEBPACK_IMPORTED_MODULE_2__.FacebookSocialLogin();\n        // Set up listener for OAuth redirects if we have a pending OAuth flow\n        if (localStorage.getItem(SocialLoginWeb.OAUTH_STATE_KEY)) {\n            console.log('OAUTH_STATE_KEY found');\n            const result = this.handleOAuthRedirect();\n            if (result) {\n                (_a = window.opener) === null || _a === void 0 ? void 0 : _a.postMessage(Object.assign({ type: 'oauth-response' }, result.result), window.location.origin);\n                window.close();\n            }\n        }\n    }\n    handleOAuthRedirect() {\n        const url = new URL(window.location.href);\n        return this.googleProvider.handleOAuthRedirect(url);\n    }\n    async initialize(options) {\n        var _a, _b, _c;\n        const initPromises = [];\n        if ((_a = options.google) === null || _a === void 0 ? void 0 : _a.webClientId) {\n            initPromises.push(this.googleProvider.initialize(options.google.webClientId, options.google.mode, options.google.hostedDomain, options.google.redirectUrl));\n        }\n        if ((_b = options.apple) === null || _b === void 0 ? void 0 : _b.clientId) {\n            initPromises.push(this.appleProvider.initialize(options.apple.clientId, options.apple.redirectUrl, options.apple.useProperTokenExchange));\n        }\n        if ((_c = options.facebook) === null || _c === void 0 ? void 0 : _c.appId) {\n            initPromises.push(this.facebookProvider.initialize(options.facebook.appId, options.facebook.locale));\n        }\n        await Promise.all(initPromises);\n    }\n    async login(options) {\n        switch (options.provider) {\n            case 'google':\n                return this.googleProvider.login(options.options);\n            case 'apple':\n                return this.appleProvider.login(options.options);\n            case 'facebook':\n                return this.facebookProvider.login(options.options);\n            default:\n                throw new Error(`Login for ${options.provider} is not implemented on web`);\n        }\n    }\n    async logout(options) {\n        switch (options.provider) {\n            case 'google':\n                return this.googleProvider.logout();\n            case 'apple':\n                return this.appleProvider.logout();\n            case 'facebook':\n                return this.facebookProvider.logout();\n            default:\n                throw new Error(`Logout for ${options.provider} is not implemented`);\n        }\n    }\n    async isLoggedIn(options) {\n        switch (options.provider) {\n            case 'google':\n                return this.googleProvider.isLoggedIn();\n            case 'apple':\n                return this.appleProvider.isLoggedIn();\n            case 'facebook':\n                return this.facebookProvider.isLoggedIn();\n            default:\n                throw new Error(`isLoggedIn for ${options.provider} is not implemented`);\n        }\n    }\n    async getAuthorizationCode(options) {\n        switch (options.provider) {\n            case 'google':\n                return this.googleProvider.getAuthorizationCode();\n            case 'apple':\n                return this.appleProvider.getAuthorizationCode();\n            case 'facebook':\n                return this.facebookProvider.getAuthorizationCode();\n            default:\n                throw new Error(`getAuthorizationCode for ${options.provider} is not implemented`);\n        }\n    }\n    async refresh(options) {\n        switch (options.provider) {\n            case 'google':\n                return this.googleProvider.refresh();\n            case 'apple':\n                return this.appleProvider.refresh();\n            case 'facebook':\n                return this.facebookProvider.refresh(options.options);\n            default:\n                throw new Error(`Refresh for ${options.provider} is not implemented`);\n        }\n    }\n    async providerSpecificCall(options) {\n        throw new Error(`Provider specific call for ${options.call} is not implemented`);\n    }\n}\nSocialLoginWeb.OAUTH_STATE_KEY = 'social_login_oauth_pending';\n//# sourceMappingURL=web.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2FwZ28vY2FwYWNpdG9yLXNvY2lhbC1sb2dpbi9kaXN0L2VzbS93ZWIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEM7QUFDUTtBQUNNO0FBQ0o7QUFDL0MsNkJBQTZCLHNEQUFTO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywrREFBaUI7QUFDbkQsaUNBQWlDLDZEQUFnQjtBQUNqRCxvQ0FBb0MsbUVBQW1CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5R0FBeUcsd0JBQXdCO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGtCQUFrQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGtCQUFrQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGtCQUFrQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGtCQUFrQjtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLGtCQUFrQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsY0FBYztBQUNwRTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNhcGdvL2NhcGFjaXRvci1zb2NpYWwtbG9naW4vZGlzdC9lc20vd2ViLmpzPzRhY2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2ViUGx1Z2luIH0gZnJvbSAnQGNhcGFjaXRvci9jb3JlJztcbmltcG9ydCB7IEFwcGxlU29jaWFsTG9naW4gfSBmcm9tICcuL2FwcGxlLXByb3ZpZGVyJztcbmltcG9ydCB7IEZhY2Vib29rU29jaWFsTG9naW4gfSBmcm9tICcuL2ZhY2Vib29rLXByb3ZpZGVyJztcbmltcG9ydCB7IEdvb2dsZVNvY2lhbExvZ2luIH0gZnJvbSAnLi9nb29nbGUtcHJvdmlkZXInO1xuZXhwb3J0IGNsYXNzIFNvY2lhbExvZ2luV2ViIGV4dGVuZHMgV2ViUGx1Z2luIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmdvb2dsZVByb3ZpZGVyID0gbmV3IEdvb2dsZVNvY2lhbExvZ2luKCk7XG4gICAgICAgIHRoaXMuYXBwbGVQcm92aWRlciA9IG5ldyBBcHBsZVNvY2lhbExvZ2luKCk7XG4gICAgICAgIHRoaXMuZmFjZWJvb2tQcm92aWRlciA9IG5ldyBGYWNlYm9va1NvY2lhbExvZ2luKCk7XG4gICAgICAgIC8vIFNldCB1cCBsaXN0ZW5lciBmb3IgT0F1dGggcmVkaXJlY3RzIGlmIHdlIGhhdmUgYSBwZW5kaW5nIE9BdXRoIGZsb3dcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNvY2lhbExvZ2luV2ViLk9BVVRIX1NUQVRFX0tFWSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPQVVUSF9TVEFURV9LRVkgZm91bmQnKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuaGFuZGxlT0F1dGhSZWRpcmVjdCgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIChfYSA9IHdpbmRvdy5vcGVuZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wb3N0TWVzc2FnZShPYmplY3QuYXNzaWduKHsgdHlwZTogJ29hdXRoLXJlc3BvbnNlJyB9LCByZXN1bHQucmVzdWx0KSwgd2luZG93LmxvY2F0aW9uLm9yaWdpbik7XG4gICAgICAgICAgICAgICAgd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlT0F1dGhSZWRpcmVjdCgpIHtcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgIHJldHVybiB0aGlzLmdvb2dsZVByb3ZpZGVyLmhhbmRsZU9BdXRoUmVkaXJlY3QodXJsKTtcbiAgICB9XG4gICAgYXN5bmMgaW5pdGlhbGl6ZShvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBpbml0UHJvbWlzZXMgPSBbXTtcbiAgICAgICAgaWYgKChfYSA9IG9wdGlvbnMuZ29vZ2xlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eud2ViQ2xpZW50SWQpIHtcbiAgICAgICAgICAgIGluaXRQcm9taXNlcy5wdXNoKHRoaXMuZ29vZ2xlUHJvdmlkZXIuaW5pdGlhbGl6ZShvcHRpb25zLmdvb2dsZS53ZWJDbGllbnRJZCwgb3B0aW9ucy5nb29nbGUubW9kZSwgb3B0aW9ucy5nb29nbGUuaG9zdGVkRG9tYWluLCBvcHRpb25zLmdvb2dsZS5yZWRpcmVjdFVybCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoX2IgPSBvcHRpb25zLmFwcGxlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2xpZW50SWQpIHtcbiAgICAgICAgICAgIGluaXRQcm9taXNlcy5wdXNoKHRoaXMuYXBwbGVQcm92aWRlci5pbml0aWFsaXplKG9wdGlvbnMuYXBwbGUuY2xpZW50SWQsIG9wdGlvbnMuYXBwbGUucmVkaXJlY3RVcmwsIG9wdGlvbnMuYXBwbGUudXNlUHJvcGVyVG9rZW5FeGNoYW5nZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoX2MgPSBvcHRpb25zLmZhY2Vib29rKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuYXBwSWQpIHtcbiAgICAgICAgICAgIGluaXRQcm9taXNlcy5wdXNoKHRoaXMuZmFjZWJvb2tQcm92aWRlci5pbml0aWFsaXplKG9wdGlvbnMuZmFjZWJvb2suYXBwSWQsIG9wdGlvbnMuZmFjZWJvb2subG9jYWxlKSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoaW5pdFByb21pc2VzKTtcbiAgICB9XG4gICAgYXN5bmMgbG9naW4ob3B0aW9ucykge1xuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMucHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGNhc2UgJ2dvb2dsZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ29vZ2xlUHJvdmlkZXIubG9naW4ob3B0aW9ucy5vcHRpb25zKTtcbiAgICAgICAgICAgIGNhc2UgJ2FwcGxlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBsZVByb3ZpZGVyLmxvZ2luKG9wdGlvbnMub3B0aW9ucyk7XG4gICAgICAgICAgICBjYXNlICdmYWNlYm9vayc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFjZWJvb2tQcm92aWRlci5sb2dpbihvcHRpb25zLm9wdGlvbnMpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExvZ2luIGZvciAke29wdGlvbnMucHJvdmlkZXJ9IGlzIG5vdCBpbXBsZW1lbnRlZCBvbiB3ZWJgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBsb2dvdXQob3B0aW9ucykge1xuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMucHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGNhc2UgJ2dvb2dsZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ29vZ2xlUHJvdmlkZXIubG9nb3V0KCk7XG4gICAgICAgICAgICBjYXNlICdhcHBsZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbGVQcm92aWRlci5sb2dvdXQoKTtcbiAgICAgICAgICAgIGNhc2UgJ2ZhY2Vib29rJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mYWNlYm9va1Byb3ZpZGVyLmxvZ291dCgpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExvZ291dCBmb3IgJHtvcHRpb25zLnByb3ZpZGVyfSBpcyBub3QgaW1wbGVtZW50ZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBpc0xvZ2dlZEluKG9wdGlvbnMpIHtcbiAgICAgICAgc3dpdGNoIChvcHRpb25zLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjYXNlICdnb29nbGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdvb2dsZVByb3ZpZGVyLmlzTG9nZ2VkSW4oKTtcbiAgICAgICAgICAgIGNhc2UgJ2FwcGxlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBsZVByb3ZpZGVyLmlzTG9nZ2VkSW4oKTtcbiAgICAgICAgICAgIGNhc2UgJ2ZhY2Vib29rJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mYWNlYm9va1Byb3ZpZGVyLmlzTG9nZ2VkSW4oKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpc0xvZ2dlZEluIGZvciAke29wdGlvbnMucHJvdmlkZXJ9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldEF1dGhvcml6YXRpb25Db2RlKG9wdGlvbnMpIHtcbiAgICAgICAgc3dpdGNoIChvcHRpb25zLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjYXNlICdnb29nbGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdvb2dsZVByb3ZpZGVyLmdldEF1dGhvcml6YXRpb25Db2RlKCk7XG4gICAgICAgICAgICBjYXNlICdhcHBsZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbGVQcm92aWRlci5nZXRBdXRob3JpemF0aW9uQ29kZSgpO1xuICAgICAgICAgICAgY2FzZSAnZmFjZWJvb2snOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZhY2Vib29rUHJvdmlkZXIuZ2V0QXV0aG9yaXphdGlvbkNvZGUoKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBnZXRBdXRob3JpemF0aW9uQ29kZSBmb3IgJHtvcHRpb25zLnByb3ZpZGVyfSBpcyBub3QgaW1wbGVtZW50ZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyByZWZyZXNoKG9wdGlvbnMpIHtcbiAgICAgICAgc3dpdGNoIChvcHRpb25zLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjYXNlICdnb29nbGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdvb2dsZVByb3ZpZGVyLnJlZnJlc2goKTtcbiAgICAgICAgICAgIGNhc2UgJ2FwcGxlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBsZVByb3ZpZGVyLnJlZnJlc2goKTtcbiAgICAgICAgICAgIGNhc2UgJ2ZhY2Vib29rJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mYWNlYm9va1Byb3ZpZGVyLnJlZnJlc2gob3B0aW9ucy5vcHRpb25zKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZWZyZXNoIGZvciAke29wdGlvbnMucHJvdmlkZXJ9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHByb3ZpZGVyU3BlY2lmaWNDYWxsKG9wdGlvbnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm92aWRlciBzcGVjaWZpYyBjYWxsIGZvciAke29wdGlvbnMuY2FsbH0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gICAgfVxufVxuU29jaWFsTG9naW5XZWIuT0FVVEhfU1RBVEVfS0VZID0gJ3NvY2lhbF9sb2dpbl9vYXV0aF9wZW5kaW5nJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdlYi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@capgo/capacitor-social-login/dist/esm/web.js\n"));

/***/ })

}]);