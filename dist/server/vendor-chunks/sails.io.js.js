/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sails.io.js";
exports.ids = ["vendor-chunks/sails.io.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/sails.io.js/sails.io.js":
/*!**********************************************!*\
  !*** ./node_modules/sails.io.js/sails.io.js ***!
  \**********************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//////////////////////////////////////////////////////////////////////////////////////\n //                                                                                //\n //  ███████╗ █████╗ ██╗██╗     ███████╗   ██╗ ██████╗         ██╗███████╗         //\n //  ██╔════╝██╔══██╗██║██║     ██╔════╝   ██║██╔═══██╗        ██║██╔════╝         //\n //  ███████╗███████║██║██║     ███████╗   ██║██║   ██║        ██║███████╗         //\n //  ╚════██║██╔══██║██║██║     ╚════██║   ██║██║   ██║   ██   ██║╚════██║         //\n //  ███████║██║  ██║██║███████╗███████║██╗██║╚██████╔╝██╗╚█████╔╝███████║         //\n //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚═╝╚═╝ ╚═════╝ ╚═╝ ╚════╝ ╚══════╝         //\n //                                                                                //\n //   ╦╔═╗╦  ╦╔═╗╔═╗╔═╗╦═╗╦╔═╗╔╦╗  ╔═╗╦  ╦╔═╗╔╗╔╔╦╗  ╔═╗╔╦╗╦╔═                     //\n //   ║╠═╣╚╗╔╝╠═╣╚═╗║  ╠╦╝║╠═╝ ║   ║  ║  ║║╣ ║║║ ║   ╚═╗ ║║╠╩╗                     //\n //  ╚╝╩ ╩ ╚╝ ╩ ╩╚═╝╚═╝╩╚═╩╩   ╩   ╚═╝╩═╝╩╚═╝╝╚╝ ╩   ╚═╝═╩╝╩ ╩                     //\n //  ┌─┐┌─┐┬─┐  ┌┐┌┌─┐┌┬┐┌─┐  ┬┌─┐  ┌─┐┌┐┌┌┬┐  ┌┬┐┬ ┬┌─┐  ┌┐ ┬─┐┌─┐┬ ┬┌─┐┌─┐┬─┐    //\n //  ├┤ │ │├┬┘  ││││ │ ││├┤   │└─┐  ├─┤│││ ││   │ ├─┤├┤   ├┴┐├┬┘│ ││││└─┐├┤ ├┬┘    //\n //  └  └─┘┴└─  ┘└┘└─┘─┴┘└─┘o└┘└─┘  ┴ ┴┘└┘─┴┘   ┴ ┴ ┴└─┘  └─┘┴└─└─┘└┴┘└─┘└─┘┴└─    //\n //                                                                                //\n//////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * sails.io.js\n * ------------------------------------------------------------------------\n * JavaScript Client (SDK) for communicating with Sails.\n *\n * Note that this script is completely optional, but it is handy if you're\n * using WebSockets from the browser to talk to your Sails server.\n *\n * For tips and documentation, visit:\n * http://sailsjs.com/documentation/reference/web-sockets/socket-client\n * ------------------------------------------------------------------------\n *\n * This file allows you to send and receive socket.io messages to & from Sails\n * by simulating a REST client interface on top of socket.io. It models its API\n * after the $.ajax pattern from jQuery you might already be familiar with.\n *\n * So if you're switching from using AJAX to sockets, instead of:\n *    `$.post( url, [data], [cb] )`\n *\n * You would use:\n *    `socket.post( url, [data], [cb] )`\n */\n\n\n(function() {\n\n\n  //   ██████╗ ██████╗ ███╗   ██╗███████╗████████╗ █████╗ ███╗   ██╗████████╗███████╗\n  //  ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██╔══██╗████╗  ██║╚══██╔══╝██╔════╝\n  //  ██║     ██║   ██║██╔██╗ ██║███████╗   ██║   ███████║██╔██╗ ██║   ██║   ███████╗\n  //  ██║     ██║   ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║╚██╗██║   ██║   ╚════██║\n  //  ╚██████╗╚██████╔╝██║ ╚████║███████║   ██║   ██║  ██║██║ ╚████║   ██║   ███████║\n  //   ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝\n  //\n\n\n  /**\n   * Constant containing the names of all available options\n   * for individual sockets.\n   *\n   * @type {Array}\n   */\n  var SOCKET_OPTIONS = [\n    'useCORSRouteToGetCookie',\n    'url',\n    'multiplex',\n    'transports',\n    'query',\n    'path',\n    'headers',\n    'initialConnectionHeaders',\n    'reconnection',\n    'reconnectionAttempts',\n    'reconnectionDelay',\n    'reconnectionDelayMax',\n    'rejectUnauthorized',\n    'randomizationFactor',\n    'timeout'\n  ];\n\n\n  /**\n   * Constant containing the names of properties on `io.sails` which\n   * may be configured using HTML attributes on the script tag which\n   * loaded this file.\n   *\n   * @type {Array}\n   *\n   * (this is unused if loading from node.js)\n   */\n  var CONFIGURABLE_VIA_HTML_ATTR = [\n    'autoConnect',\n    'reconnection',\n    'environment',\n    'headers',\n    'url',\n    'transports',\n    'path'\n  ];\n\n\n\n\n  /**\n   * Constant containing the names of querystring\n   * parameters sent when connecting any SailsSocket.\n   *\n   * @type {Dictionary}\n   */\n  var CONNECTION_METADATA_PARAMS = {\n    version: '__sails_io_sdk_version',\n    platform: '__sails_io_sdk_platform',\n    language: '__sails_io_sdk_language'\n  };\n\n\n  /**\n   * Constant containing metadata about the platform, language, and\n   * current version of this SDK.\n   *\n   * @type {Dictionary}\n   */\n  var SDK_INFO = {\n    version: '1.2.1', // <-- pulled automatically from package.json, do not change!\n    language: 'javascript',\n    platform: (function (){\n      if ( true && typeof module.exports !== 'undefined') {\n        return 'node';\n      }\n      else {\n        return 'browser';\n      }\n    })()\n  };\n\n  // Build `versionString` (a querystring snippet) by\n  // combining SDK_INFO and CONNECTION_METADATA_PARAMS.\n  SDK_INFO.versionString =\n    CONNECTION_METADATA_PARAMS.version + '=' + SDK_INFO.version + '&' +\n    CONNECTION_METADATA_PARAMS.platform + '=' + SDK_INFO.platform + '&' +\n    CONNECTION_METADATA_PARAMS.language + '=' + SDK_INFO.language;\n\n\n\n\n  //   █████╗ ██████╗ ███████╗ ██████╗ ██████╗ ██████╗     ██╗  ██╗████████╗███╗   ███╗██╗\n  //  ██╔══██╗██╔══██╗██╔════╝██╔═══██╗██╔══██╗██╔══██╗    ██║  ██║╚══██╔══╝████╗ ████║██║\n  //  ███████║██████╔╝███████╗██║   ██║██████╔╝██████╔╝    ███████║   ██║   ██╔████╔██║██║\n  //  ██╔══██║██╔══██╗╚════██║██║   ██║██╔══██╗██╔══██╗    ██╔══██║   ██║   ██║╚██╔╝██║██║\n  //  ██║  ██║██████╔╝███████║╚██████╔╝██║  ██║██████╔╝    ██║  ██║   ██║   ██║ ╚═╝ ██║███████╗\n  //  ╚═╝  ╚═╝╚═════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝     ╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚═╝╚══════╝\n  //\n  //   █████╗ ████████╗████████╗██████╗ ██╗██████╗ ██╗   ██╗████████╗███████╗███████╗\n  //  ██╔══██╗╚══██╔══╝╚══██╔══╝██╔══██╗██║██╔══██╗██║   ██║╚══██╔══╝██╔════╝██╔════╝\n  //  ███████║   ██║      ██║   ██████╔╝██║██████╔╝██║   ██║   ██║   █████╗  ███████╗\n  //  ██╔══██║   ██║      ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ╚════██║\n  //  ██║  ██║   ██║      ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗███████║\n  //  ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚══════╝\n  //\n  //  ███████╗██████╗  ██████╗ ███╗   ███╗      ██╗███████╗ ██████╗██████╗ ██╗██████╗ ████████╗██╗\n  //  ██╔════╝██╔══██╗██╔═══██╗████╗ ████║     ██╔╝██╔════╝██╔════╝██╔══██╗██║██╔══██╗╚══██╔══╝╚██╗\n  //  █████╗  ██████╔╝██║   ██║██╔████╔██║    ██╔╝ ███████╗██║     ██████╔╝██║██████╔╝   ██║    ╚██╗\n  //  ██╔══╝  ██╔══██╗██║   ██║██║╚██╔╝██║    ╚██╗ ╚════██║██║     ██╔══██╗██║██╔═══╝    ██║    ██╔╝\n  //  ██║     ██║  ██║╚██████╔╝██║ ╚═╝ ██║     ╚██╗███████║╚██████╗██║  ██║██║██║        ██║   ██╔╝\n  //  ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝      ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝   ╚═╝\n  //\n  //\n  // If available, grab the DOM element for the script tag which imported this file.\n  // (skip this if this SDK is being used outside of the DOM, i.e. in a Node process)\n  //\n  // This is used below to parse client-side sails.io.js configuration encoded as\n  // HTML attributes, as well as grabbing hold of the URL from whence the SDK was fetched.\n  var thisScriptTag = (function() {\n    if (\n      typeof window !== 'object' ||\n      typeof window.document !== 'object' ||\n      typeof window.document.getElementsByTagName !== 'function'\n    ) {\n      return null;\n    }\n\n    // Return the URL of the last script loaded (i.e. this one)\n    // (this must run before nextTick; see http://stackoverflow.com/a/2976714/486547)\n    var allScriptsCurrentlyInDOM = window.document.getElementsByTagName('script');\n    return allScriptsCurrentlyInDOM[allScriptsCurrentlyInDOM.length - 1];\n  })();\n\n\n  // Variables to contain src URL and other script tag config (for use below).\n  var urlThisScriptWasFetchedFrom = '';\n  var scriptTagConfig = {};\n\n\n  if (thisScriptTag) {\n    // Save the URL that this script was fetched from.\n    urlThisScriptWasFetchedFrom = thisScriptTag.src;\n\n    // Now parse the most common client-side configuration settings\n    // from the script tag where they may be encoded as HTML attributes.\n    //\n    // Any configuration which may be provided as an HTML attribute may\n    // also be provided prefixed with `data-`.  This is for folks who\n    // need to support browsers that have issues with nonstandard\n    // HTML attributes (or if the idea of using nonstandard HTML attributes\n    // just creeps you out)\n    //\n    // If a `data-` prefixed attr is provided, it takes precedence.\n    // (this is so that if you are already using one of these HTML\n    //  attrs for some reason, you can keep it as-is and override\n    //  it using `data-`. If you are using the `data-` prefixed version\n    //  for some other purpose... well, in that case you'll just have to\n    //  configure programmatically using `io.sails` instead.)\n    CONFIGURABLE_VIA_HTML_ATTR.forEach(function (configKey){\n\n      scriptTagConfig[configKey] = (function (){\n\n        // Support 'data-' prefixed or normal attributes.\n        // (prefixed versions take precedence if provided)\n        var htmlAttrVal = thisScriptTag.getAttribute( 'data-'+configKey );\n        if (!htmlAttrVal) {\n          htmlAttrVal = thisScriptTag.getAttribute( configKey );\n        }\n\n        // The HTML attribute value should always be a string or `null`.\n        // We'll try to parse it as JSON and use that, but worst case fall back\n        // to the default situation of it being a string.\n        if (typeof htmlAttrVal === 'string') {\n          try { return JSON.parse(htmlAttrVal); } catch (e) { return htmlAttrVal; }\n        }\n        // If `null` was returned from getAttribute(), it means that the HTML attribute\n        // was not specified, so we treat it as undefined (which will cause the property\n        // to be removed below)\n        else if (htmlAttrVal === null) {\n          return undefined;\n        }\n        // Any other contingency shouldn't be possible:\n        // - if no quotes are used in the HTML attribute, it still comes in as a string.\n        // - if no RHS is provided for the attribute, it still comes in as \"\" (empty string)\n        // (but we still handle this with an explicit error just in case--for debugging and support purposes)\n        else throw new Error('sails.io.js :: Unexpected/invalid script tag configuration for `'+configKey+'`: `'+htmlAttrVal+'` (a `'+typeof htmlAttrVal+'`). Should be a string.');\n      })();\n\n      if (scriptTagConfig[configKey] === undefined){\n        delete scriptTagConfig[configKey];\n      }\n    });\n\n\n\n    // Now that they've been parsed, do an extremely lean version of\n    // logical type validation/coercion of provided values.\n    //////////////////////////////////////////////////////////////////\n\n    // `autoConnect`\n    if (typeof scriptTagConfig.autoConnect !== 'undefined') {\n      if (scriptTagConfig.autoConnect === '') {\n        // Special case for empty string.  It means `true` (see above).\n        scriptTagConfig.autoConnect = true;\n      }\n      else if (typeof scriptTagConfig.autoConnect !== 'boolean') {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `autoConnect` provided in script tag: `'+scriptTagConfig.autoConnect+'` (a `'+typeof scriptTagConfig.autoConnect+'`). Should be a boolean.');\n      }\n    }\n\n\n    // `environment`\n    if (typeof scriptTagConfig.environment !== 'undefined') {\n      if (typeof scriptTagConfig.environment !== 'string') {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `environment` provided in script tag: `'+scriptTagConfig.environment+'` (a `'+typeof scriptTagConfig.environment+'`). Should be a string.');\n      }\n    }\n\n\n    // `headers`\n    if (typeof scriptTagConfig.headers !== 'undefined') {\n      if (typeof scriptTagConfig.headers !== 'object' || Array.isArray(scriptTagConfig.headers)) {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `headers` provided in script tag: `'+scriptTagConfig.headers+'` (a `'+typeof scriptTagConfig.headers+'`). Should be a JSON-compatible dictionary (i.e. `{}`).  Don\\'t forget those double quotes (\"\"), even on key names!  Use single quotes (\\'\\') to wrap the HTML attribute value; e.g. `headers=\\'{\"X-Auth\": \"foo\"}\\'`');\n      }\n    }\n\n\n    // `url`\n    if (typeof scriptTagConfig.url !== 'undefined') {\n      if (typeof scriptTagConfig.url !== 'string') {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `url` provided in script tag: `'+scriptTagConfig.url+'` (a `'+typeof scriptTagConfig.url+'`). Should be a string.');\n      }\n    }\n\n    // OTHER `io.sails` options are NOT CURRENTLY SUPPORTED VIA HTML ATTRIBUTES.\n  }\n\n\n\n\n  // Grab a reference to the global socket.io client (if one is available).\n  // This is used via closure below to determine which `io` to use when the\n  // socket.io client instance (`io`) is augmented to become the Sails client\n  // SDK instance (still `io`).\n  var _existingGlobalSocketIO = (typeof io !== 'undefined') ? io : undefined;\n\n\n\n\n  //////////////////////////////////////////////////////////////\n  /////\n  ///// NOW FOR BUNCHES OF:\n  /////  - PRIVATE FUNCTION DEFINITIONS\n  /////  - CONSTRUCTORS\n  /////  - AND METHODS\n  /////\n  //////////////////////////////////////////////////////////////\n  //\n\n\n\n  //  ███████╗ █████╗ ██╗██╗     ███████╗      ██╗ ██████╗        ██████╗██╗     ██╗███████╗███╗   ██╗████████╗\n  //  ██╔════╝██╔══██╗██║██║     ██╔════╝      ██║██╔═══██╗      ██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝\n  //  ███████╗███████║██║██║     ███████╗█████╗██║██║   ██║█████╗██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║\n  //  ╚════██║██╔══██║██║██║     ╚════██║╚════╝██║██║   ██║╚════╝██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║\n  //  ███████║██║  ██║██║███████╗███████║      ██║╚██████╔╝      ╚██████╗███████╗██║███████╗██║ ╚████║   ██║\n  //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝      ╚═╝ ╚═════╝        ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝\n  //\n\n  /**\n   * SailsIOClient()\n   *\n   * Augment the provided Socket.io client object (`io`) with methods for\n   * talking and listening to one or more Sails backend(s).  If no `io` was\n   * provided (i.e. in a browser setting), then attempt to use the global.\n   *\n   * This absorbs implicit `io.sails` configuration, sets a timer for\n   * automatically connecting a socket (if `io.sails.autoConnect` is enabled)\n   * and returns the augmented `io`.\n   *\n   * Note:\n   * The automatically-connected socket is exposed as `io.socket`.  If this\n   * socket attempts to bind event listeners or send requests before it is\n   * connected, it will be queued up and replayed when the connection is\n   * successfully opened.\n   *\n   * @param {SocketIO} io\n   * @returns {SailsIOClient} [also called `io`]\n   */\n\n  function SailsIOClient(_providedSocketIO) {\n\n    // First, determine which `io` we're augmenting.\n    //\n    // Prefer the passed-in `io` instance, but fall back to the\n    // global one if we've got it.\n    var io;\n    if (_providedSocketIO) {\n      io = _providedSocketIO;\n    }\n    else {\n      io = _existingGlobalSocketIO;\n    }\n    // (note that for readability, we deliberately do not short circuit or use the tertiary operator above)\n\n\n    // If a socket.io client (`io`) is not available, none of this will work.\n    if (!io) {\n      // If node:\n      if (SDK_INFO.platform === 'node') {\n        throw new Error('No socket.io client available.  When requiring `sails.io.js` from Node.js, a socket.io client (`io`) must be passed in; e.g.:\\n```\\nvar io = require(\\'sails.io.js\\')( require(\\'socket.io-client\\') )\\n```\\n(see https://github.com/balderdashy/sails.io.js/tree/master/test for more examples)');\n      }\n      // Otherwise, this is a web browser:\n      else {\n        throw new Error('The Sails socket SDK depends on the socket.io client, but the socket.io global (`io`) was not available when `sails.io.js` loaded.  Normally, the socket.io client code is bundled with sails.io.js, so something is a little off.  Please check to be sure this version of `sails.io.js` has the minified Socket.io client at the top of the file.');\n      }\n    }\n\n    // If the chosen socket.io client (`io`) has ALREADY BEEN AUGMENTED by this SDK,\n    // (i.e. if it already has a `.sails` property) then throw an error.\n    if (io.sails) {\n      // If node:\n      if (SDK_INFO.platform === 'node') {\n        throw new Error('The provided socket.io client (`io`) has already been augmented into a Sails socket SDK instance (it has `io.sails`).');\n      }\n      // Otherwise, this is a web browser:\n      else {\n        throw new Error('The socket.io client (`io`) has already been augmented into a Sails socket SDK instance.  Usually, this means you are bringing `sails.io.js` onto the page more than once.');\n      }\n    }\n\n\n    /**\n     * A little logger for this library to use internally.\n     * Basically just a wrapper around `console.log` with\n     * support for feature-detection.\n     *\n     * @api private\n     * @factory\n     */\n    function LoggerFactory(options) {\n      options = options || {\n        prefix: true\n      };\n\n      // If `console.log` is not accessible, `log` is a noop.\n      if (\n        typeof console !== 'object' ||\n        typeof console.log !== 'function' ||\n        typeof console.log.bind !== 'function'\n      ) {\n        return function noop() {};\n      }\n\n      return function log() {\n        var args = Array.prototype.slice.call(arguments);\n\n        // All logs are disabled when `io.sails.environment = 'production'`.\n        if (io.sails.environment === 'production') return;\n\n        // Add prefix to log messages (unless disabled)\n        var PREFIX = '';\n        if (options.prefix) {\n          args.unshift(PREFIX);\n        }\n\n        // Call wrapped logger\n        console.log\n          .bind(console)\n          .apply(this, args);\n      };\n    }//</LoggerFactory>\n\n    // Create a private logger instance\n    var consolog = LoggerFactory();\n    consolog.noPrefix = LoggerFactory({\n      prefix: false\n    });\n\n\n\n    /**\n     * What is the `requestQueue`?\n     *\n     * The request queue is used to simplify app-level connection logic--\n     * i.e. so you don't have to wait for the socket to be connected\n     * to start trying to  synchronize data.\n     *\n     * @api private\n     * @param  {SailsSocket}  socket\n     */\n\n    function runRequestQueue (socket) {\n      var queue = socket.requestQueue;\n\n      if (!queue) return;\n      for (var i in queue) {\n\n        // Double-check that `queue[i]` will not\n        // inadvertently discover extra properties attached to the Object\n        // and/or Array prototype by other libraries/frameworks/tools.\n        // (e.g. Ember does this. See https://github.com/balderdashy/sails.io.js/pull/5)\n        var isSafeToDereference = ({}).hasOwnProperty.call(queue, i);\n        if (isSafeToDereference) {\n          // Get the arguments that were originally made to the \"request\" method\n          var requestArgs = queue[i];\n          // Call the request method again in the context of the socket, with the original args\n          socket.request.apply(socket, requestArgs);\n        }\n      }\n\n      // Now empty the queue to remove it as a source of additional complexity.\n      socket.requestQueue = null;\n    }\n\n\n\n    /**\n     * Send a JSONP request.\n     *\n     * @param  {Object}   opts [optional]\n     * @param  {Function} cb\n     * @return {XMLHttpRequest}\n     */\n\n    function jsonp(opts, cb) {\n      opts = opts || {};\n\n      if (typeof window === 'undefined') {\n        // FUTURE: refactor node usage to live in here\n        return cb();\n      }\n\n      var scriptEl = document.createElement('script');\n      window._sailsIoJSConnect = function(response) {\n        // In rare circumstances our script may have been vaporised.\n        // Remove it, but only if it still exists\n        // https://github.com/balderdashy/sails.io.js/issues/92\n        if (scriptEl && scriptEl.parentNode) {\n            scriptEl.parentNode.removeChild(scriptEl);\n        }\n\n        cb(response);\n      };\n      scriptEl.src = opts.url;\n      document.getElementsByTagName('head')[0].appendChild(scriptEl);\n\n    }\n\n\n\n\n    //       ██╗███████╗ ██████╗ ███╗   ██╗      ██╗    ██╗███████╗██████╗ ███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //       ██║██╔════╝██╔═══██╗████╗  ██║      ██║    ██║██╔════╝██╔══██╗██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //       ██║███████╗██║   ██║██╔██╗ ██║█████╗██║ █╗ ██║█████╗  ██████╔╝███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ██   ██║╚════██║██║   ██║██║╚██╗██║╚════╝██║███╗██║██╔══╝  ██╔══██╗╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ╚█████╔╝███████║╚██████╔╝██║ ╚████║      ╚███╔███╔╝███████╗██████╔╝███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //   ╚════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═══╝       ╚══╝╚══╝ ╚══════╝╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n    //  ██████╗ ███████╗███████╗██████╗  ██████╗ ███╗   ██╗███████╗███████╗     ██╗     ██╗██╗    ██╗██████╗ ██╗\n    //  ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔═══██╗████╗  ██║██╔════╝██╔════╝    ██╔╝     ██║██║    ██║██╔══██╗╚██╗\n    //  ██████╔╝█████╗  ███████╗██████╔╝██║   ██║██╔██╗ ██║███████╗█████╗      ██║      ██║██║ █╗ ██║██████╔╝ ██║\n    //  ██╔══██╗██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║╚██╗██║╚════██║██╔══╝      ██║ ██   ██║██║███╗██║██╔══██╗ ██║\n    //  ██║  ██║███████╗███████║██║     ╚██████╔╝██║ ╚████║███████║███████╗    ╚██╗╚█████╔╝╚███╔███╔╝██║  ██║██╔╝\n    //  ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚══════╝     ╚═╝ ╚════╝  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝\n    //\n\n    /**\n     * The JWR (JSON WebSocket Response) received from a Sails server.\n     *\n     * @api public\n     * @param  {Object}  responseCtx\n     *         => :body\n     *         => :statusCode\n     *         => :headers\n     *\n     * @constructor\n     */\n\n    function JWR(responseCtx) {\n      this.body = responseCtx.body;\n      this.headers = responseCtx.headers || {};\n      this.statusCode = (typeof responseCtx.statusCode === 'undefined') ? 200 : responseCtx.statusCode;\n      // FUTURE: Replace this typeof short-circuit with an assertion (statusCode should always be set)\n\n      if (this.statusCode < 200 || this.statusCode >= 400) {\n        // Determine the appropriate error message.\n        var msg;\n        if (this.statusCode === 0) {\n          msg = 'The socket request failed.';\n        }\n        else {\n          msg = 'Server responded with a ' + this.statusCode + ' status code';\n          msg += ':\\n```\\n' + JSON.stringify(this.body, null, 2) + '\\n```';\n          // (^^Note that we should always be able to rely on socket.io to give us\n          // non-circular data here, so we don't have to worry about wrapping the\n          // above in a try...catch)\n        }\n\n        // Now build and attach Error instance.\n        this.error = new Error(msg);\n      }\n    }\n    JWR.prototype.toString = function() {\n      return '[ResponseFromSails]' + '  -- ' +\n        'Status: ' + this.statusCode + '  -- ' +\n        'Headers: ' + this.headers + '  -- ' +\n        'Body: ' + this.body;\n    };\n    JWR.prototype.toPOJO = function() {\n      return {\n        body: this.body,\n        headers: this.headers,\n        statusCode: this.statusCode\n      };\n    };\n    JWR.prototype.pipe = function() {\n      // FUTURE: look at substack's stuff\n      return new Error('Client-side streaming support not implemented yet.');\n    };\n\n\n\n\n    //          ███████╗███╗   ███╗██╗████████╗███████╗██████╗  ██████╗ ███╗   ███╗ ██╗██╗\n    //          ██╔════╝████╗ ████║██║╚══██╔══╝██╔════╝██╔══██╗██╔═══██╗████╗ ████║██╔╝╚██╗\n    //          █████╗  ██╔████╔██║██║   ██║   █████╗  ██████╔╝██║   ██║██╔████╔██║██║  ██║\n    //          ██╔══╝  ██║╚██╔╝██║██║   ██║   ██╔══╝  ██╔══██╗██║   ██║██║╚██╔╝██║██║  ██║\n    //  ███████╗███████╗██║ ╚═╝ ██║██║   ██║   ██║     ██║  ██║╚██████╔╝██║ ╚═╝ ██║╚██╗██╔╝\n    //  ╚══════╝╚══════╝╚═╝     ╚═╝╚═╝   ╚═╝   ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝ ╚═╝╚═╝\n    //\n\n    /**\n     * @api private\n     * @param  {SailsSocket} socket  [description]\n     * @param  {Object} requestCtx [description]\n     */\n\n    function _emitFrom(socket, requestCtx) {\n\n      if (!socket._raw) {\n        throw new Error('Failed to emit from socket- raw SIO socket is missing.');\n      }\n\n      // Since callback is embedded in requestCtx,\n      // retrieve it and delete the key before continuing.\n      var cb = requestCtx.cb;\n      delete requestCtx.cb;\n\n      // Name of the appropriate socket.io listener on the server\n      // ( === the request method or \"verb\", e.g. 'get', 'post', 'put', etc. )\n      var sailsEndpoint = requestCtx.method;\n\n      socket._raw.emit(sailsEndpoint, requestCtx, function serverResponded(responseCtx) {\n\n        // Send back (emulatedHTTPBody, jsonWebSocketResponse)\n        if (cb && !requestCtx.calledCb) {\n          cb(responseCtx.body, new JWR(responseCtx));\n          // Set flag indicating that callback was called, to avoid duplicate calls.\n          requestCtx.calledCb = true;\n          // Remove the callback from the list.\n          socket._responseCbs.splice(socket._responseCbs.indexOf(cb), 1);\n          // Remove the context from the list.\n          socket._requestCtxs.splice(socket._requestCtxs.indexOf(requestCtx), 1);\n        }\n      });\n    }\n\n\n\n\n\n\n\n    //  ███████╗ █████╗ ██╗██╗     ███████╗███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //  ██╔════╝██╔══██╗██║██║     ██╔════╝██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //  ███████╗███████║██║██║     ███████╗███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ╚════██║██╔══██║██║██║     ╚════██║╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ███████║██║  ██║██║███████╗███████║███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n\n    /**\n     * SailsSocket\n     *\n     * A wrapper for an underlying Socket instance that communicates directly\n     * to the Socket.io server running inside of Sails.\n     *\n     * If no `socket` option is provied, SailsSocket will function as a mock. It will queue socket\n     * requests and event handler bindings, replaying them when the raw underlying socket actually\n     * connects. This is handy when we don't necessarily have the valid configuration to know\n     * WHICH SERVER to talk to yet, etc.  It is also used by `io.socket` for your convenience.\n     *\n     * @constructor\n     * @api private\n     *\n     * ----------------------------------------------------------------------\n     * Note: This constructor should not be used directly. To obtain a `SailsSocket`\n     * instance of your very own, run:\n     * ```\n     * var mySocket = io.sails.connect();\n     * ```\n     * ----------------------------------------------------------------------\n     */\n    function SailsSocket (opts){\n      var self = this;\n      opts = opts||{};\n\n      // Initialize private properties\n      self._isConnecting = false;\n      self._mightBeAboutToAutoConnect = false;\n\n      // Set up connection options so that they can only be changed when socket is disconnected.\n      var _opts = {};\n      SOCKET_OPTIONS.forEach(function(option) {\n        // Okay to change global headers while socket is connected\n        if (option == 'headers') {return;}\n        Object.defineProperty(self, option, {\n          get: function() {\n            if (option == 'url') {\n              return _opts[option] || (self._raw && self._raw.io && self._raw.io.uri);\n            }\n            return _opts[option];\n          },\n          set: function(value) {\n            // Don't allow value to be changed while socket is connected\n            if (self.isConnected() && io.sails.strict !== false && value != _opts[option]) {\n              throw new Error('Cannot change value of `' + option + '` while socket is connected.');\n            }\n            // If socket is attempting to reconnect, stop it.\n            if (self._raw && self._raw.io && self._raw.io.reconnecting && !self._raw.io.skipReconnect) {\n              self._raw.io.skipReconnect = true;\n              consolog('Stopping reconnect; use .reconnect() to connect socket after changing options.');\n            }\n            _opts[option] = value;\n          }\n        });\n      });\n\n      // Absorb opts into SailsSocket instance\n      // See http://sailsjs.com/documentation/reference/web-sockets/socket-client/sails-socket/properties\n      // for description of options\n      SOCKET_OPTIONS.forEach(function(option) {\n        self[option] = opts[option];\n      });\n\n      // Set up \"eventQueue\" to hold event handlers which have not been set on the actual raw socket yet.\n      self.eventQueue = {};\n\n      // Listen for special `parseError` event sent from sockets hook on the backend\n      // if an error occurs but a valid callback was not received from the client\n      // (i.e. so the server had no other way to send back the error information)\n      self.on('sails:parseError', function (err){\n        consolog('Sails encountered an error parsing a socket message sent from this client, and did not have access to a callback function to respond with.');\n        consolog('Error details:',err);\n      });\n\n      // FUTURE:\n      // Listen for a special private message on any connected that allows the server\n      // to set the environment (giving us 100% certainty that we guessed right)\n      // However, note that the `console.log`s called before and after connection\n      // are still forced to rely on our existing heuristics (to disable, tack #production\n      // onto the URL used to fetch this file.)\n\n    }//</SailsSocket>\n\n\n    /**\n     * `SailsSocket.prototype._connect()`\n     *\n     * Begin connecting this socket to the server.\n     *\n     * @api private\n     */\n    SailsSocket.prototype._connect = function (){\n      var self = this;\n\n      self._isConnecting = true;\n\n      // Apply `io.sails` config as defaults\n      // (now that at least one tick has elapsed)\n      // See http://sailsjs.com/documentation/reference/web-sockets/socket-client/sails-socket/properties\n      // for description of options and default values\n      SOCKET_OPTIONS.forEach(function(option) {\n        if ('undefined' == typeof self[option]) {\n          self[option] = io.sails[option];\n        }\n      });\n\n      // Headers that will be sent with the initial request to /socket.io (Node.js only)\n      self.extraHeaders = self.initialConnectionHeaders || {};\n\n      // For browser usage (currently works with \"polling\" transport only)\n      self.transportOptions = self.transportOptions || {};\n      self.transports.forEach(function(transport) {\n        self.transportOptions[transport] = self.transportOptions[transport] || {};\n        self.transportOptions[transport].extraHeaders = self.initialConnectionHeaders || {};\n      });\n\n      // Log a warning if non-Node.js platform attempts to use `initialConnectionHeaders` for anything other than `polling`.\n      if (self.initialConnectionHeaders && SDK_INFO.platform !== 'node' && self.transports.indexOf('polling') === -1 || self.transports.length > 1) {\n        if (typeof console === 'object' && typeof console.warn === 'function') {\n          console.warn('When running in browser, `initialConnectionHeaders` option is only available for the `polling` transport.');\n        }\n      }\n\n      // Ensure URL has no trailing slash\n      self.url = self.url ? self.url.replace(/(\\/)$/, '') : undefined;\n\n      // Mix the current SDK version into the query string in\n      // the connection request to the server:\n      if (typeof self.query === 'string') {\n        // (If provided as a string, trim leading question mark,\n        // just in case one was provided.)\n        self.query = self.query.replace(/^\\?/, '');\n        self.query += '&' + SDK_INFO.versionString;\n      }\n      else if (self.query && typeof self.query === 'object') {\n        throw new Error('`query` setting does not currently support configuration as a dictionary (`{}`).  Instead, it must be specified as a string like `foo=89&bar=hi`');\n      }\n      else if (!self.query) {\n        self.query = SDK_INFO.versionString;\n      }\n      else {\n        throw new Error('Unexpected data type provided for `query` setting: '+self.query);\n      }\n\n      // Determine whether this is a cross-origin socket by examining the\n      // hostname and port on the `window.location` object.  If it's cross-origin,\n      // we'll attempt to get a cookie for the domain so that a Sails session can\n      // be established.\n      var isXOrigin = (function (){\n\n        // If `window` doesn't exist (i.e. being used from Node.js), then\n        // we won't bother attempting to get a cookie.  If you're using sockets\n        // from Node.js and find you need to share a session between multiple\n        // socket connections, you'll need to make an HTTP request to the /__getcookie\n        // endpoint of the Sails server (or any endpoint that returns a set-cookie header)\n        // and then use the cookie value in the `initialConnectionHeaders` option to\n        // io.sails.connect()\n        if (typeof window === 'undefined' || typeof window.location === 'undefined') {\n          return false;\n        }\n\n        // If `self.url` (aka \"target\") is falsy, then we don't need to worry about it.\n        if (typeof self.url !== 'string') { return false; }\n\n        // Get information about the \"target\" (`self.url`)\n        var targetProtocol = (function (){\n          try {\n            targetProtocol = self.url.match(/^([a-z]+:\\/\\/)/i)[1].toLowerCase();\n          }\n          catch (e) {}\n          targetProtocol = targetProtocol || 'http://';\n          return targetProtocol;\n        })();\n        var isTargetSSL = !!self.url.match('^https');\n        var targetPort = (function (){\n          try {\n            return self.url.match(/^[a-z]+:\\/\\/[^:]*:([0-9]*)/i)[1];\n          }\n          catch (e){}\n          return isTargetSSL ? '443' : '80';\n        })();\n        var targetAfterProtocol = self.url.replace(/^([a-z]+:\\/\\/)/i, '');\n\n\n        // If target protocol is different than the actual protocol,\n        // then we'll consider this cross-origin.\n        if (targetProtocol.replace(/[:\\/]/g, '') !== window.location.protocol.replace(/[:\\/]/g,'')) {\n          return true;\n        }\n\n\n        // If target hostname is different than actual hostname, we'll consider this cross-origin.\n        var hasSameHostname = targetAfterProtocol.search(window.location.hostname) === 0;\n        if (!hasSameHostname) {\n          return true;\n        }\n\n        // If no actual port is explicitly set on the `window.location` object,\n        // we'll assume either 80 or 443.\n        var isLocationSSL = window.location.protocol.match(/https/i);\n        var locationPort = (window.location.port+'') || (isLocationSSL ? '443' : '80');\n\n        // Finally, if ports don't match, we'll consider this cross-origin.\n        if (targetPort !== locationPort) {\n          return true;\n        }\n\n        // Otherwise, it's the same origin.\n        return false;\n\n      })();\n\n\n      // Prepare to start connecting the socket\n      (function selfInvoking (cb){\n\n        // If this is an attempt at a cross-origin or cross-port\n        // socket connection via a browswe, send a JSONP request\n        // first to ensure that a valid cookie is available.\n        // This can be disabled by setting `io.sails.useCORSRouteToGetCookie`\n        // to false.\n        //\n        // Otherwise, skip the stuff below.\n        //\n        if (!(self.useCORSRouteToGetCookie && isXOrigin)) {\n          return cb();\n        }\n\n        // Figure out the x-origin CORS route\n        // (Sails provides a default)\n        var xOriginCookieURL = self.url;\n        if (typeof self.useCORSRouteToGetCookie === 'string') {\n          xOriginCookieURL += self.useCORSRouteToGetCookie;\n        }\n        else {\n          xOriginCookieURL += '/__getcookie';\n        }\n\n        // Make the AJAX request (CORS)\n        jsonp({\n          url: xOriginCookieURL,\n          method: 'GET'\n        }, cb);\n\n      })(function goAheadAndActuallyConnect() {\n\n        // Now that we're ready to connect, create a raw underlying Socket\n        // using Socket.io and save it as `_raw` (this will start it connecting)\n        self._raw = io(self.url, self);\n\n        // If the low-level transport throws an error _while connecting_, then set the _isConnecting flag\n        // to false (since we're no longer connecting with any chance of success anyway).\n        // Also, in this case (and in dev mode only) log a helpful message.\n        self._raw.io.engine.transport.on('error', function(err){\n          if (!self._isConnecting) { return; }\n\n          self._isConnecting = false;\n\n          // Track this timestamp for use in reconnection messages\n          // (only relevant if reconnection is enabled.)\n          self.connectionErrorTimestamp = (new Date()).getTime();\n\n          // Development-only message:\n          consolog('====================================');\n          consolog('The socket was unable to connect.');\n          consolog('The server may be offline, or the');\n          consolog('socket may have failed authorization');\n          consolog('based on its origin or other factors.');\n          consolog('You may want to check the values of');\n          consolog('`sails.config.sockets.onlyAllowOrigins`');\n          consolog('or (more rarely) `sails.config.sockets.beforeConnect`');\n          consolog('in your app.');\n          consolog('More info: https://sailsjs.com/config/sockets');\n          consolog('For help: https://sailsjs.com/support');\n          consolog('');\n          consolog('Technical details:');\n          consolog(err);\n          consolog('====================================');\n        });\n\n        // Replay event bindings from the eager socket\n        self.replay();\n\n\n        /**\n         * 'connect' event is triggered when the socket establishes a connection\n         *  successfully.\n         */\n        self.on('connect', function socketConnected() {\n          self._isConnecting = false;\n          consolog.noPrefix(\n            '\\n' +\n            '\\n' +\n            // '    |>    ' + '\\n' +\n            // '  \\\\___/  '+️\n            // '\\n'+\n             '  |>    Now connected to '+(self.url ? self.url : 'Sails')+'.' + '\\n' +\n            '\\\\___/   For help, see: http://bit.ly/2q0QDpf' + '\\n' +\n             '        (using sails.io.js '+io.sails.sdk.platform+' SDK @v'+io.sails.sdk.version+')'+ '\\n' +\n            '         Connected at: '+(new Date())+'\\n'+\n            '\\n'+\n            '\\n'+\n            // '\\n'+\n            ''\n            // ' ⚓︎ (development mode)'\n            // 'e.g. to send a GET request to Sails via WebSockets, run:'+ '\\n' +\n            // '`io.socket.get(\"/foo\", function serverRespondedWith (body, jwr) { console.log(body); })`'+ '\\n' +\n          );\n        });\n\n        self.on('disconnect', function() {\n\n          // Get a timestamp of when the disconnect was detected.\n          self.connectionLostTimestamp = (new Date()).getTime();\n\n          // Get a shallow clone of the internal array of response callbacks, in case any of the callbacks mutate it.\n          var responseCbs = [].concat(self._responseCbs || []);\n          // Wipe the internal array of response callbacks before executing them, in case a callback happens to add\n          // a new request to the queue.\n          self._responseCbs = [];\n\n          // Do the same for the internal request context list.\n          var requestCtxs = [].concat(self._requestCtxs || []);\n          self._requestCtxs = [];\n\n          // Loop through the callbacks for all in-progress requests, and call them each with an error indicating the disconnect.\n          if (responseCbs.length) {\n            responseCbs.forEach(function(responseCb) {\n              responseCb(new Error('The socket disconnected before the request completed.'), {\n                body: null,\n                statusCode: 0,\n                headers: {}\n              });\n            });\n          }\n\n          // If there is a list of request contexts, indicate that their callbacks have been\n          // called and then wipe the list.  This prevents errors in the edge case of a response\n          // somehow coming back after the socket reconnects.\n          if (requestCtxs.length) {\n            requestCtxs.forEach(function(requestCtx) {\n              requestCtx.calledCb = true;\n            });\n          }\n\n          consolog('====================================');\n          consolog('Socket was disconnected from Sails.');\n          consolog('Usually, this is due to one of the following reasons:' + '\\n' +\n            ' -> the server ' + (self.url ? self.url + ' ' : '') + 'was taken down' + '\\n' +\n            ' -> your browser lost internet connectivity');\n          consolog('====================================');\n        });\n\n        self.on('reconnecting', function(numAttempts) {\n          consolog(\n            '\\n'+\n            '        Socket is trying to reconnect to '+(self.url ? self.url : 'Sails')+'...\\n'+\n            '_-|>_-  (attempt #' + numAttempts + ')'+'\\n'+\n            '\\n'\n          );\n        });\n\n        self.on('reconnect', function(transport, numAttempts) {\n          if (!self._isConnecting) {\n            self.on('connect', runRequestQueue.bind(self, self));\n          }\n\n          var msSinceLastOffline;\n          var numSecsOffline;\n          if (self.connectionLostTimestamp){\n            msSinceLastOffline = ((new Date()).getTime() - self.connectionLostTimestamp);\n            numSecsOffline = (msSinceLastOffline / 1000);\n          }\n          else if (self.connectionErrorTimestamp) {\n            msSinceLastOffline = ((new Date()).getTime() - self.connectionErrorTimestamp);\n            numSecsOffline = (msSinceLastOffline / 1000);\n          }\n          else {\n            msSinceLastOffline = '???';\n            numSecsOffline = '???';\n          }\n\n          consolog(\n            '\\n'+\n             '  |>    Socket reconnected successfully after'+'\\n'+\n            '\\\\___/   being offline at least ' + numSecsOffline + ' seconds.'+'\\n'+\n            '\\n'\n          );\n        });\n\n        // 'error' event is triggered if connection can not be established.\n        // (usually because of a failed authorization, which is in turn\n        // usually due to a missing or invalid cookie)\n        self.on('error', function failedToConnect(err) {\n          self._isConnecting = false;\n          ////////////////////////////////////////////////////////////////////////////////////\n          // Note:\n          // In the future, we could provide a separate event for when a socket cannot connect\n          // due to a failed `beforeConnect` (aka \"authorization\" if you're old school).\n          // this could probably be implemented by emitting a special event from the server.\n          ////////////////////////////////////////////////////////////////////////////////////\n\n          consolog(\n            'Failed to connect socket (possibly due to failed `beforeConnect` on server)',\n            'Error:', err\n          );\n        });\n      });\n\n    };\n\n    /**\n     * Reconnect the underlying socket.\n     *\n     * @api public\n     */\n    SailsSocket.prototype.reconnect = function (){\n      if (this._isConnecting) {\n        throw new Error('Cannot connect- socket is already connecting');\n      }\n      if (this.isConnected()) {\n        throw new Error('Cannot connect- socket is already connected');\n      }\n      return this._connect();\n    };\n\n    /**\n     * Disconnect the underlying socket.\n     *\n     * @api public\n     */\n    SailsSocket.prototype.disconnect = function (){\n      this._isConnecting = false;\n      if (!this.isConnected()) {\n        throw new Error('Cannot disconnect- socket is already disconnected');\n      }\n      return this._raw.disconnect();\n    };\n\n\n\n    /**\n     * isConnected\n     *\n     * @return {Boolean} whether the socket is connected and able to\n     *                   communicate w/ the server.\n     */\n\n    SailsSocket.prototype.isConnected = function () {\n      if (!this._raw) {\n        return false;\n      }\n\n      return !!this._raw.connected;\n    };\n\n\n    /**\n     * isConnecting\n     *\n     * @return {Boolean} whether the socket is in the process of connecting\n     *                   to the server.\n     */\n\n    SailsSocket.prototype.isConnecting = function () {\n      return this._isConnecting;\n    };\n\n    /**\n     * isConnecting\n     *\n     * @return {Boolean} flag that is `true` after a SailsSocket instance is\n     *                   initialized but before one tick of the event loop\n     *                   has passed (so that it hasn't attempted to connect\n     *                   yet, if autoConnect ends up being configured `true`)\n     */\n    SailsSocket.prototype.mightBeAboutToAutoConnect = function() {\n      return this._mightBeAboutToAutoConnect;\n    };\n\n    /**\n     * [replay description]\n     * @return {[type]} [description]\n     */\n    SailsSocket.prototype.replay = function (){\n      var self = this;\n\n      // Pass events and a reference to the request queue\n      // off to the self._raw for consumption\n      for (var evName in self.eventQueue) {\n        for (var i in self.eventQueue[evName]) {\n          self._raw.on(evName, self.eventQueue[evName][i]);\n        }\n      }\n\n      // Bind a one-time function to run the request queue\n      // when the self._raw connects.\n      if ( !self.isConnected() ) {\n        self._raw.once('connect', runRequestQueue.bind(self, self));\n      }\n      // Or run it immediately if self._raw is already connected\n      else {\n        runRequestQueue(self);\n      }\n\n      return self;\n    };\n\n\n    /**\n     * Chainable method to bind an event to the socket.\n     *\n     * @param  {String}   evName [event name]\n     * @param  {Function} fn     [event handler function]\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.on = function (evName, fn){\n\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.on(evName, fn);\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      if (!this.eventQueue[evName]) {\n        this.eventQueue[evName] = [fn];\n      }\n      else {\n        this.eventQueue[evName].push(fn);\n      }\n\n      return this;\n    };\n\n    /**\n     * Chainable method to unbind an event from the socket.\n     *\n     * @param  {String}   evName [event name]\n     * @param  {Function} fn     [event handler function]\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.off = function (evName, fn){\n\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.off(evName, fn);\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      if (this.eventQueue[evName] && this.eventQueue[evName].indexOf(fn) > -1) {\n        this.eventQueue[evName].splice(this.eventQueue[evName].indexOf(fn), 1);\n      }\n\n      return this;\n    };\n\n\n    /**\n     * Chainable method to unbind all events from the socket.\n     *\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.removeAllListeners = function (){\n\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.removeAllListeners();\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      this.eventQueue = {};\n\n      return this;\n    };\n\n    /**\n     * Simulate a GET request to sails\n     * e.g.\n     *    `socket.get('/user/3', Stats.populate)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.get = function(url, data, cb) {\n\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n\n      return this.request({\n        method: 'get',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n\n\n    /**\n     * Simulate a POST request to sails\n     * e.g.\n     *    `socket.post('/event', newMeeting, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.post = function(url, data, cb) {\n\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n\n      return this.request({\n        method: 'post',\n        data: data,\n        url: url\n      }, cb);\n    };\n\n\n\n    /**\n     * Simulate a PUT request to sails\n     * e.g.\n     *    `socket.post('/event/3', changedFields, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.put = function(url, data, cb) {\n\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n\n      return this.request({\n        method: 'put',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n\n    /**\n     * Simulate a PATCH request to sails\n     * e.g.\n     *    `socket.patch('/event/3', changedFields, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.patch = function(url, data, cb) {\n\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n\n      return this.request({\n        method: 'patch',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n    /**\n     * Simulate a DELETE request to sails\n     * e.g.\n     *    `socket.delete('/event', $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype['delete'] = function(url, data, cb) {\n\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n\n      return this.request({\n        method: 'delete',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n\n\n    /**\n     * Simulate an HTTP request to sails\n     * e.g.\n     * ```\n     * socket.request({\n     *   url:'/user',\n     *   params: {},\n     *   method: 'POST',\n     *   headers: {}\n     * }, function (responseBody, JWR) {\n     *   // ...\n     * });\n     * ```\n     *\n     * @api public\n     * @option {String} url    ::    destination URL\n     * @option {Object} params ::    parameters to send with the request [optional]\n     * @option {Object} headers::    headers to send with the request [optional]\n     * @option {Function} cb   ::    callback function to call when finished [optional]\n     * @option {String} method ::    HTTP request method [optional]\n     */\n\n    SailsSocket.prototype.request = function(options, cb) {\n\n      var usage =\n      'Usage:\\n'+\n      'socket.request( options, [fnToCallWhenComplete] )\\n\\n'+\n      'options.url :: e.g. \"/foo/bar\"'+'\\n'+\n      'options.method :: e.g. \"get\", \"post\", \"put\", or \"delete\", etc.'+'\\n'+\n      'options.params :: e.g. { emailAddress: \"mike@example.com\" }'+'\\n'+\n      'options.headers :: e.g. { \"x-my-custom-header\": \"some string\" }';\n      // Old usage:\n      // var usage = 'Usage:\\n socket.'+(options.method||'request')+'('+\n      //   ' destinationURL, [dataToSend], [fnToCallWhenComplete] )';\n\n\n      // Validate options and callback\n      if (typeof cb !== 'undefined' && typeof cb !== 'function') {\n        throw new Error('Invalid callback function!\\n' + usage);\n      }\n      if (typeof options !== 'object' || typeof options.url !== 'string') {\n        throw new Error('Invalid or missing URL!\\n' + usage);\n      }\n      if (options.method && typeof options.method !== 'string') {\n        throw new Error('Invalid `method` provided (should be a string like \"post\" or \"put\")\\n' + usage);\n      }\n      if (options.headers && typeof options.headers !== 'object') {\n        throw new Error('Invalid `headers` provided (should be a dictionary with string values)\\n' + usage);\n      }\n      if (options.params && typeof options.params !== 'object') {\n        throw new Error('Invalid `params` provided (should be a dictionary with JSON-serializable values)\\n' + usage);\n      }\n      if (options.data && typeof options.data !== 'object') {\n        throw new Error('Invalid `data` provided (should be a dictionary with JSON-serializable values)\\n' + usage);\n      }\n\n      // Accept either `params` or `data` for backwards compatibility (but not both!)\n      if (options.data && options.params) {\n        throw new Error('Cannot specify both `params` and `data`!  They are aliases of each other.\\n' + usage);\n      }\n      else if (options.data) {\n        options.params = options.data;\n        delete options.data;\n      }\n\n\n      // If this socket is not connected yet, queue up this request\n      // instead of sending it.\n      // (so it can be replayed when the socket comes online.)\n      if ( ! this.isConnected() ) {\n\n        // If no queue array exists for this socket yet, create it.\n        this.requestQueue = this.requestQueue || [];\n        this.requestQueue.push([options, cb]);\n        return;\n      }\n\n      // Otherwise, our socket is connected, so continue prepping\n      // the request.\n\n      // Default headers to an empty object\n      options.headers = options.headers || {};\n\n      // Build a simulated request object\n      // (and sanitize/marshal options along the way)\n      var requestCtx = {\n\n        method: (options.method || 'get').toLowerCase(),\n\n        headers: options.headers,\n\n        data: options.params || options.data || {},\n\n        // Remove trailing slashes and spaces to make packets smaller.\n        url: options.url.replace(/^(.+)\\/*\\s*$/, '$1'),\n\n        cb: cb\n      };\n\n      // Get a reference to the callback list, or create a new one.\n      this._responseCbs = this._responseCbs || [];\n\n      // Get a reference to the request context list, or create a new one.\n      this._requestCtxs = this._requestCtxs || [];\n\n      // Add this callback to the list.  If the socket disconnects, we'll call\n      // each cb in the list with an error and reset the list.  Otherwise the\n      // cb will be removed from the list when the server responds.\n      // Also add the request context to the list.  It will be removed once\n      // the response comes back, or if the socket disconnects.\n      if (cb) {\n        this._responseCbs.push(cb);\n        this._requestCtxs.push(requestCtx);\n      }\n\n      // Merge global headers in, if there are any.\n      if (this.headers && 'object' === typeof this.headers) {\n        for (var header in this.headers) {\n          if (!options.headers.hasOwnProperty(header)) {\n            options.headers[header] = this.headers[header];\n          }\n        }\n      }\n\n      // Send the request.\n      _emitFrom(this, requestCtx);\n    };\n\n\n\n    /**\n     * Socket.prototype._request\n     *\n     * Simulate HTTP over Socket.io.\n     *\n     * @api private\n     * @param  {[type]}   options [description]\n     * @param  {Function} cb      [description]\n     */\n    SailsSocket.prototype._request = function(options, cb) {\n      throw new Error('`_request()` was a private API deprecated as of v0.11 of the sails.io.js client. Use `.request()` instead.');\n    };\n\n\n\n\n\n\n\n    //  ██╗ ██████╗    ███████╗ █████╗ ██╗██╗     ███████╗\n    //  ██║██╔═══██╗   ██╔════╝██╔══██╗██║██║     ██╔════╝\n    //  ██║██║   ██║   ███████╗███████║██║██║     ███████╗\n    //  ██║██║   ██║   ╚════██║██╔══██║██║██║     ╚════██║\n    //  ██║╚██████╔╝██╗███████║██║  ██║██║███████╗███████║\n    //  ╚═╝ ╚═════╝ ╚═╝╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝\n    //\n    // Set an `io.sails` object that may be used for configuration before the\n    // first socket connects (i.e. to allow auto-connect behavior to be\n    // prevented by setting `io.sails.autoConnect` in an inline script\n    // directly after the script tag which loaded this file).\n\n\n    //  ┌─┐┌─┐┌┬┐  ┬ ┬┌─┐  ╔╦╗╔═╗╔═╗╔═╗╦ ╦╦ ╔╦╗╔═╗  ┌─┐┌─┐┬─┐  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐\n    //  └─┐├┤  │   │ │├─┘   ║║║╣ ╠╣ ╠═╣║ ║║  ║ ╚═╗  ├┤ │ │├┬┘  ││ │ └─┐├─┤││  └─┐\n    //  └─┘└─┘ ┴   └─┘┴    ═╩╝╚═╝╚  ╩ ╩╚═╝╩═╝╩ ╚═╝  └  └─┘┴└─  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘\n    io.sails = {\n\n      // Whether to automatically connect a socket and save it as `io.socket`.\n      autoConnect: true,\n\n      // Whether to automatically try to reconnect after connection is lost\n      reconnection: false,\n\n      // The route (path) to hit to get a x-origin (CORS) cookie\n      // (or true to use the default: '/__getcookie')\n      useCORSRouteToGetCookie: true,\n\n      // The environment we're running in.\n      // (logs are not displayed when this is set to 'production')\n      //\n      // Defaults to \"development\" unless this script was fetched from a URL\n      // that ends in `*.min.js` or '#production', or if the conventional\n      // `SAILS_LOCALS` global is set with an `_environment` of \"production\"\n      // or \"staging\".  (This setting may also be manually overridden.)\n      environment: (\n        urlThisScriptWasFetchedFrom.match(/(\\#production|\\.min\\.js)/g) ||\n        (\n          typeof window === 'object' && window &&\n          typeof window.SAILS_LOCALS === 'object' && window.SAILS_LOCALS &&\n          (window.SAILS_LOCALS._environment === 'staging' || window.SAILS_LOCALS._environment === 'production')\n        )\n      )? 'production' : 'development',\n\n      // The version of this sails.io.js client SDK\n      sdk: SDK_INFO,\n\n      // Transports to use when communicating with the server, in the order they will be tried\n      transports: ['websocket']\n    };\n\n\n\n    //  ┌─┐─┐ ┬┌┬┐┌─┐┌┐┌┌┬┐  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐  ┌┬┐┌─┐┌─┐┌─┐┬ ┬┬ ┌┬┐┌─┐\n    //  ├┤ ┌┴┬┘ │ ├┤ │││ ││  ││ │ └─┐├─┤││  └─┐   ││├┤ ├┤ ├─┤│ ││  │ └─┐\n    //  └─┘┴ └─ ┴ └─┘┘└┘─┴┘  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘  ─┴┘└─┘└  ┴ ┴└─┘┴─┘┴ └─┘\n    //  ┬ ┬┬┌┬┐┬ ┬  ┌┬┐┬ ┬┌─┐  ╦ ╦╔╦╗╔╦╗╦    ╔═╗╔╦╗╔╦╗╦═╗╦╔╗ ╦ ╦╔╦╗╔═╗╔═╗\n    //  ││││ │ ├─┤   │ ├─┤├┤   ╠═╣ ║ ║║║║    ╠═╣ ║  ║ ╠╦╝║╠╩╗║ ║ ║ ║╣ ╚═╗\n    //  └┴┘┴ ┴ ┴ ┴   ┴ ┴ ┴└─┘  ╩ ╩ ╩ ╩ ╩╩═╝  ╩ ╩ ╩  ╩ ╩╚═╩╚═╝╚═╝ ╩ ╚═╝╚═╝\n    //  ┌─┐┬─┐┌─┐┌┬┐  ┌┬┐┬ ┬┌─┐  ┌─┐┌─┐┬─┐┬┌─┐┌┬┐  ┌┬┐┌─┐┌─┐\n    //  ├┤ ├┬┘│ ││││   │ ├─┤├┤   └─┐│  ├┬┘│├─┘ │    │ ├─┤│ ┬\n    //  └  ┴└─└─┘┴ ┴   ┴ ┴ ┴└─┘  └─┘└─┘┴└─┴┴   ┴    ┴ ┴ ┴└─┘\n    //\n    // Now fold in config provided as HTML attributes on the script tag:\n    // (note that if `io.sails.*` is changed after this script, those changes\n    //  will still take precedence)\n    CONFIGURABLE_VIA_HTML_ATTR.forEach(function (configKey){\n      if (typeof scriptTagConfig[configKey] !== 'undefined') {\n        io.sails[configKey] = scriptTagConfig[configKey];\n      }\n    });\n    //////////////////////////////////////////////////////////////////////////////\n    // Note that the new HTML attribute configuration style may eventually\n    // completely replace the original approach of setting `io.sails` properties,\n    // since the new strategy is easier to reason about.  Also, it would allow us\n    // to remove the timeout below someday.\n    //////////////////////////////////////////////////////////////////////////////\n\n\n\n\n    //  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐ ╔═╗╔═╗╔╗╔╔╗╔╔═╗╔═╗╔╦╗  /  \\\n    //  ││ │ └─┐├─┤││  └─┐ ║  ║ ║║║║║║║║╣ ║   ║  /   /\n    //  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘o╚═╝╚═╝╝╚╝╝╚╝╚═╝╚═╝ ╩  \\  /\n\n    /**\n     * Add `io.sails.connect` function as a wrapper for the built-in `io()` aka `io.connect()`\n     * method, returning a SailsSocket. This special function respects the configured io.sails\n     * connection URL, as well as sending other identifying information (most importantly, the\n     * current version of this SDK).\n     *\n     * @param  {String} url  [optional]\n     * @param  {Object} opts [optional]\n     * @return {Socket}\n     */\n    io.sails.connect = function(url, opts) {\n\n      // Make URL optional\n      if ('object' === typeof url) {\n        opts = url;\n        url = null;\n      }\n\n      // Default opts to empty object\n      opts = opts || {};\n\n      // If explicit connection url is specified, save it to options\n      opts.url = url || opts.url || undefined;\n\n      // Instantiate and return a new SailsSocket- and try to connect immediately.\n      var socket = new SailsSocket(opts);\n      socket._connect();\n      return socket;\n    };\n\n\n\n\n\n\n    //  ██╗ ██████╗    ███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //  ██║██╔═══██╗   ██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //  ██║██║   ██║   ███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ██║██║   ██║   ╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ██║╚██████╔╝██╗███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //  ╚═╝ ╚═════╝ ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n    // io.socket\n    //\n    // The eager instance of Socket which will automatically try to connect\n    // using the host that this js file was served from.\n    //\n    // This can be disabled or configured by setting properties on `io.sails.*` within the\n    // first cycle of the event loop.\n    //\n\n\n    // Build `io.socket` so it exists\n    // (note that this DOES NOT start the connection process)\n    io.socket = new SailsSocket();\n    //\n    // This socket is not connected yet, and has not even _started_ connecting.\n    //\n    // But in the mean time, this eager socket will be queue events bound by the user\n    // before the first cycle of the event loop (using `.on()`), which will later\n    // be rebound on the raw underlying socket.\n\n\n    //  ┌─┐┌─┐┌┬┐  ┌─┐┬ ┬┌┬┐┌─┐   ┌─┐┌─┐┌┐┌┌┐┌┌─┐┌─┐┌┬┐  ┌┬┐┬┌┬┐┌─┐┬─┐\n    //  └─┐├┤  │   ├─┤│ │ │ │ │───│  │ │││││││├┤ │   │    │ ││││├┤ ├┬┘\n    //  └─┘└─┘ ┴   ┴ ┴└─┘ ┴ └─┘   └─┘└─┘┘└┘┘└┘└─┘└─┘ ┴    ┴ ┴┴ ┴└─┘┴└─\n    // If configured to do so, start auto-connecting after the first cycle of the event loop\n    // has completed (to allow time for this behavior to be configured/disabled\n    // by specifying properties on `io.sails`)\n\n    // Indicate that the autoConnect timer has started.\n    io.socket._mightBeAboutToAutoConnect = true;\n\n    setTimeout(function() {\n\n      // Indicate that the autoConect timer fired.\n      io.socket._mightBeAboutToAutoConnect = false;\n\n      // If autoConnect is disabled, delete the eager socket (io.socket) and bail out.\n      if (io.sails.autoConnect === false || io.sails.autoconnect === false) {\n        delete io.socket;\n        return;\n      }\n\n      // consolog('Eagerly auto-connecting socket to Sails... (requests will be queued in the mean-time)');\n      io.socket._connect();\n\n\n    }, 0); // </setTimeout>\n\n\n    // Return the `io` object.\n    return io;\n  } //</SailsIOClient>\n\n  //\n  /////////////////////////////////////////////////////////////////////////////////\n  ///// </bunches of private function definitions, constructors, and methods>\n  /////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n  //  ███████╗██╗  ██╗██████╗  ██████╗ ███████╗███████╗    ███████╗██████╗ ██╗  ██╗\n  //  ██╔════╝╚██╗██╔╝██╔══██╗██╔═══██╗██╔════╝██╔════╝    ██╔════╝██╔══██╗██║ ██╔╝\n  //  █████╗   ╚███╔╝ ██████╔╝██║   ██║███████╗█████╗      ███████╗██║  ██║█████╔╝\n  //  ██╔══╝   ██╔██╗ ██╔═══╝ ██║   ██║╚════██║██╔══╝      ╚════██║██║  ██║██╔═██╗\n  //  ███████╗██╔╝ ██╗██║     ╚██████╔╝███████║███████╗    ███████║██████╔╝██║  ██╗\n  //  ╚══════╝╚═╝  ╚═╝╚═╝      ╚═════╝ ╚══════╝╚══════╝    ╚══════╝╚═════╝ ╚═╝  ╚═╝\n  //\n\n\n  // Add CommonJS support to allow this client SDK to be used from Node.js.\n  if (SDK_INFO.platform === 'node') {\n    module.exports = SailsIOClient;\n  }\n  // Add AMD support, registering this client SDK as an anonymous module.\n  else if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return SailsIOClient;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  else {}\n\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2FpbHMuaW8uanMvc2FpbHMuaW8uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsS0FBMEI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGtDQUFrQyxZQUFZO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7OztBQUlMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSx1T0FBdU8sNEhBQTRILGlCQUFpQixnQkFBZ0I7QUFDcFk7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCLGVBQWUsZUFBZTtBQUM5Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUpBQWlKO0FBQ2pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7OztBQUlMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUIsZ0JBQWdCLFVBQVU7QUFDMUIsZ0JBQWdCO0FBQ2hCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QixnQkFBZ0IsUUFBUTtBQUN4Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNHQUFzRztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNENBQTRDOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsT0FBTzs7O0FBR1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7O0FBRXJDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0Ysb0JBQW9CO0FBQ3RHO0FBQ0EsU0FBUzs7QUFFVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTzs7QUFFUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUIsZ0JBQWdCLFVBQVU7QUFDMUIsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCLGdCQUFnQixVQUFVO0FBQzFCLGdCQUFnQjtBQUNoQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFVBQVU7QUFDekI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxVQUFVO0FBQ3pCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsVUFBVTtBQUN6Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsVUFBVTtBQUN6Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxVQUFVO0FBQ3pCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsVUFBVTtBQUMxQixnQkFBZ0IsUUFBUTtBQUN4Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtDQUFrQztBQUNsRSxpQ0FBaUMscUNBQXFDO0FBQ3RFO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGtEQUFrRDs7QUFFbEQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQixnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0I7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQSxLQUFLLE1BQU07OztBQUdYO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxJQUEwQztBQUNyRCxJQUFJLGlDQUFPLEVBQUUsbUNBQUU7QUFDZjtBQUNBLEtBQUs7QUFBQSxrR0FBQztBQUNOO0FBQ0EsT0FBTyxFQVFKOztBQUVILENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2Rlcm5pemUtbmV4dC1zdGFydGVya2l0Ly4vbm9kZV9tb2R1bGVzL3NhaWxzLmlvLmpzL3NhaWxzLmlvLmpzPzdlNjIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAvLyAg4paI4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilZfilojilojilZcgICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyAgIOKWiOKWiOKVlyDilojilojilojilojilojilojilZcgICAgICAgICDilojilojilZfilojilojilojilojilojilojilojilZcgICAgICAgICAvL1xuIC8vICDilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilojilojilZfilojilojilZHilojilojilZEgICAgIOKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVnSAgIOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKVkOKWiOKWiOKVlyAgICAgICAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWdICAgICAgICAgLy9cbiAvLyAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4pWR4paI4paI4pWRICAgICDilojilojilojilojilojilojilojilZcgICDilojilojilZHilojilojilZEgICDilojilojilZEgICAgICAgIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyAgICAgICAgIC8vXG4gLy8gIOKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVkeKWiOKWiOKVkSAgICAg4pWa4pWQ4pWQ4pWQ4pWQ4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWRICAg4paI4paIICAg4paI4paI4pWR4pWa4pWQ4pWQ4pWQ4pWQ4paI4paI4pWRICAgICAgICAgLy9cbiAvLyAg4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4pWRICDilojilojilZHilojilojilZHilojilojilojilojilojilojilojilZfilojilojilojilojilojilojilojilZHilojilojilZfilojilojilZHilZrilojilojilojilojilojilojilZTilZ3ilojilojilZfilZrilojilojilojilojilojilZTilZ3ilojilojilojilojilojilojilojilZEgICAgICAgICAvL1xuIC8vICDilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVneKVmuKVkOKVnSDilZrilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVnSDilZrilZDilZDilZDilZDilZDilZDilZ0gICAgICAgICAvL1xuIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuIC8vICAg4pWm4pWU4pWQ4pWX4pWmICDilabilZTilZDilZfilZTilZDilZfilZTilZDilZfilabilZDilZfilabilZTilZDilZfilZTilabilZcgIOKVlOKVkOKVl+KVpiAg4pWm4pWU4pWQ4pWX4pWU4pWX4pWU4pWU4pWm4pWXICDilZTilZDilZfilZTilabilZfilabilZTilZAgICAgICAgICAgICAgICAgICAgICAvL1xuIC8vICAg4pWR4pWg4pWQ4pWj4pWa4pWX4pWU4pWd4pWg4pWQ4pWj4pWa4pWQ4pWX4pWRICDilaDilabilZ3ilZHilaDilZDilZ0g4pWRICAg4pWRICDilZEgIOKVkeKVkeKVoyDilZHilZHilZEg4pWRICAg4pWa4pWQ4pWXIOKVkeKVkeKVoOKVqeKVlyAgICAgICAgICAgICAgICAgICAgIC8vXG4gLy8gIOKVmuKVneKVqSDilakg4pWa4pWdIOKVqSDilanilZrilZDilZ3ilZrilZDilZ3ilanilZrilZDilanilakgICDilakgICDilZrilZDilZ3ilanilZDilZ3ilanilZrilZDilZ3ilZ3ilZrilZ0g4pWpICAg4pWa4pWQ4pWd4pWQ4pWp4pWd4pWpIOKVqSAgICAgICAgICAgICAgICAgICAgIC8vXG4gLy8gIOKUjOKUgOKUkOKUjOKUgOKUkOKUrOKUgOKUkCAg4pSM4pSQ4pSM4pSM4pSA4pSQ4pSM4pSs4pSQ4pSM4pSA4pSQICDilKzilIzilIDilJAgIOKUjOKUgOKUkOKUjOKUkOKUjOKUjOKUrOKUkCAg4pSM4pSs4pSQ4pSsIOKUrOKUjOKUgOKUkCAg4pSM4pSQIOKUrOKUgOKUkOKUjOKUgOKUkOKUrCDilKzilIzilIDilJDilIzilIDilJDilKzilIDilJAgICAgLy9cbiAvLyAg4pSc4pSkIOKUgiDilILilJzilKzilJggIOKUguKUguKUguKUgiDilIIg4pSC4pSC4pSc4pSkICAg4pSC4pSU4pSA4pSQICDilJzilIDilKTilILilILilIIg4pSC4pSCICAg4pSCIOKUnOKUgOKUpOKUnOKUpCAgIOKUnOKUtOKUkOKUnOKUrOKUmOKUgiDilILilILilILilILilJTilIDilJDilJzilKQg4pSc4pSs4pSYICAgIC8vXG4gLy8gIOKUlCAg4pSU4pSA4pSY4pS04pSU4pSAICDilJjilJTilJjilJTilIDilJjilIDilLTilJjilJTilIDilJhv4pSU4pSY4pSU4pSA4pSYICDilLQg4pS04pSY4pSU4pSY4pSA4pS04pSYICAg4pS0IOKUtCDilLTilJTilIDilJggIOKUlOKUgOKUmOKUtOKUlOKUgOKUlOKUgOKUmOKUlOKUtOKUmOKUlOKUgOKUmOKUlOKUgOKUmOKUtOKUlOKUgCAgICAvL1xuIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBzYWlscy5pby5qc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBKYXZhU2NyaXB0IENsaWVudCAoU0RLKSBmb3IgY29tbXVuaWNhdGluZyB3aXRoIFNhaWxzLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIHNjcmlwdCBpcyBjb21wbGV0ZWx5IG9wdGlvbmFsLCBidXQgaXQgaXMgaGFuZHkgaWYgeW91J3JlXG4gKiB1c2luZyBXZWJTb2NrZXRzIGZyb20gdGhlIGJyb3dzZXIgdG8gdGFsayB0byB5b3VyIFNhaWxzIHNlcnZlci5cbiAqXG4gKiBGb3IgdGlwcyBhbmQgZG9jdW1lbnRhdGlvbiwgdmlzaXQ6XG4gKiBodHRwOi8vc2FpbHNqcy5jb20vZG9jdW1lbnRhdGlvbi9yZWZlcmVuY2Uvd2ViLXNvY2tldHMvc29ja2V0LWNsaWVudFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogVGhpcyBmaWxlIGFsbG93cyB5b3UgdG8gc2VuZCBhbmQgcmVjZWl2ZSBzb2NrZXQuaW8gbWVzc2FnZXMgdG8gJiBmcm9tIFNhaWxzXG4gKiBieSBzaW11bGF0aW5nIGEgUkVTVCBjbGllbnQgaW50ZXJmYWNlIG9uIHRvcCBvZiBzb2NrZXQuaW8uIEl0IG1vZGVscyBpdHMgQVBJXG4gKiBhZnRlciB0aGUgJC5hamF4IHBhdHRlcm4gZnJvbSBqUXVlcnkgeW91IG1pZ2h0IGFscmVhZHkgYmUgZmFtaWxpYXIgd2l0aC5cbiAqXG4gKiBTbyBpZiB5b3UncmUgc3dpdGNoaW5nIGZyb20gdXNpbmcgQUpBWCB0byBzb2NrZXRzLCBpbnN0ZWFkIG9mOlxuICogICAgYCQucG9zdCggdXJsLCBbZGF0YV0sIFtjYl0gKWBcbiAqXG4gKiBZb3Ugd291bGQgdXNlOlxuICogICAgYHNvY2tldC5wb3N0KCB1cmwsIFtkYXRhXSwgW2NiXSApYFxuICovXG5cblxuKGZ1bmN0aW9uKCkge1xuXG5cbiAgLy8gICDilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKVlyAgIOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilZcg4paI4paI4paI4pWXICAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWXXG4gIC8vICDilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilZDilojilojilZfilojilojilojilojilZcgIOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVkOKWiOKWiOKVlOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKVlyAg4paI4paI4pWR4pWa4pWQ4pWQ4paI4paI4pWU4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWdXG4gIC8vICDilojilojilZEgICAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKVlOKWiOKWiOKVlyDilojilojilZHilojilojilojilojilojilojilojilZcgICDilojilojilZEgICDilojilojilojilojilojilojilojilZHilojilojilZTilojilojilZcg4paI4paI4pWRICAg4paI4paI4pWRICAg4paI4paI4paI4paI4paI4paI4paI4pWXXG4gIC8vICDilojilojilZEgICAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKVkeKVmuKWiOKWiOKVl+KWiOKWiOKVkeKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVkeKVmuKWiOKWiOKVl+KWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkVxuICAvLyAg4pWa4paI4paI4paI4paI4paI4paI4pWX4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWRIOKVmuKWiOKWiOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWRIOKVmuKWiOKWiOKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkVxuICAvLyAgIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWdICDilZrilZDilZDilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ0gICDilZrilZDilZ0gICDilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVnSAg4pWa4pWQ4pWQ4pWQ4pWdICAg4pWa4pWQ4pWdICAg4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdXG4gIC8vXG5cblxuICAvKipcbiAgICogQ29uc3RhbnQgY29udGFpbmluZyB0aGUgbmFtZXMgb2YgYWxsIGF2YWlsYWJsZSBvcHRpb25zXG4gICAqIGZvciBpbmRpdmlkdWFsIHNvY2tldHMuXG4gICAqXG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICovXG4gIHZhciBTT0NLRVRfT1BUSU9OUyA9IFtcbiAgICAndXNlQ09SU1JvdXRlVG9HZXRDb29raWUnLFxuICAgICd1cmwnLFxuICAgICdtdWx0aXBsZXgnLFxuICAgICd0cmFuc3BvcnRzJyxcbiAgICAncXVlcnknLFxuICAgICdwYXRoJyxcbiAgICAnaGVhZGVycycsXG4gICAgJ2luaXRpYWxDb25uZWN0aW9uSGVhZGVycycsXG4gICAgJ3JlY29ubmVjdGlvbicsXG4gICAgJ3JlY29ubmVjdGlvbkF0dGVtcHRzJyxcbiAgICAncmVjb25uZWN0aW9uRGVsYXknLFxuICAgICdyZWNvbm5lY3Rpb25EZWxheU1heCcsXG4gICAgJ3JlamVjdFVuYXV0aG9yaXplZCcsXG4gICAgJ3JhbmRvbWl6YXRpb25GYWN0b3InLFxuICAgICd0aW1lb3V0J1xuICBdO1xuXG5cbiAgLyoqXG4gICAqIENvbnN0YW50IGNvbnRhaW5pbmcgdGhlIG5hbWVzIG9mIHByb3BlcnRpZXMgb24gYGlvLnNhaWxzYCB3aGljaFxuICAgKiBtYXkgYmUgY29uZmlndXJlZCB1c2luZyBIVE1MIGF0dHJpYnV0ZXMgb24gdGhlIHNjcmlwdCB0YWcgd2hpY2hcbiAgICogbG9hZGVkIHRoaXMgZmlsZS5cbiAgICpcbiAgICogQHR5cGUge0FycmF5fVxuICAgKlxuICAgKiAodGhpcyBpcyB1bnVzZWQgaWYgbG9hZGluZyBmcm9tIG5vZGUuanMpXG4gICAqL1xuICB2YXIgQ09ORklHVVJBQkxFX1ZJQV9IVE1MX0FUVFIgPSBbXG4gICAgJ2F1dG9Db25uZWN0JyxcbiAgICAncmVjb25uZWN0aW9uJyxcbiAgICAnZW52aXJvbm1lbnQnLFxuICAgICdoZWFkZXJzJyxcbiAgICAndXJsJyxcbiAgICAndHJhbnNwb3J0cycsXG4gICAgJ3BhdGgnXG4gIF07XG5cblxuXG5cbiAgLyoqXG4gICAqIENvbnN0YW50IGNvbnRhaW5pbmcgdGhlIG5hbWVzIG9mIHF1ZXJ5c3RyaW5nXG4gICAqIHBhcmFtZXRlcnMgc2VudCB3aGVuIGNvbm5lY3RpbmcgYW55IFNhaWxzU29ja2V0LlxuICAgKlxuICAgKiBAdHlwZSB7RGljdGlvbmFyeX1cbiAgICovXG4gIHZhciBDT05ORUNUSU9OX01FVEFEQVRBX1BBUkFNUyA9IHtcbiAgICB2ZXJzaW9uOiAnX19zYWlsc19pb19zZGtfdmVyc2lvbicsXG4gICAgcGxhdGZvcm06ICdfX3NhaWxzX2lvX3Nka19wbGF0Zm9ybScsXG4gICAgbGFuZ3VhZ2U6ICdfX3NhaWxzX2lvX3Nka19sYW5ndWFnZSdcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBDb25zdGFudCBjb250YWluaW5nIG1ldGFkYXRhIGFib3V0IHRoZSBwbGF0Zm9ybSwgbGFuZ3VhZ2UsIGFuZFxuICAgKiBjdXJyZW50IHZlcnNpb24gb2YgdGhpcyBTREsuXG4gICAqXG4gICAqIEB0eXBlIHtEaWN0aW9uYXJ5fVxuICAgKi9cbiAgdmFyIFNES19JTkZPID0ge1xuICAgIHZlcnNpb246ICcxLjIuMScsIC8vIDwtLSBwdWxsZWQgYXV0b21hdGljYWxseSBmcm9tIHBhY2thZ2UuanNvbiwgZG8gbm90IGNoYW5nZSFcbiAgICBsYW5ndWFnZTogJ2phdmFzY3JpcHQnLFxuICAgIHBsYXRmb3JtOiAoZnVuY3Rpb24gKCl7XG4gICAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gJ25vZGUnO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAnYnJvd3Nlcic7XG4gICAgICB9XG4gICAgfSkoKVxuICB9O1xuXG4gIC8vIEJ1aWxkIGB2ZXJzaW9uU3RyaW5nYCAoYSBxdWVyeXN0cmluZyBzbmlwcGV0KSBieVxuICAvLyBjb21iaW5pbmcgU0RLX0lORk8gYW5kIENPTk5FQ1RJT05fTUVUQURBVEFfUEFSQU1TLlxuICBTREtfSU5GTy52ZXJzaW9uU3RyaW5nID1cbiAgICBDT05ORUNUSU9OX01FVEFEQVRBX1BBUkFNUy52ZXJzaW9uICsgJz0nICsgU0RLX0lORk8udmVyc2lvbiArICcmJyArXG4gICAgQ09OTkVDVElPTl9NRVRBREFUQV9QQVJBTVMucGxhdGZvcm0gKyAnPScgKyBTREtfSU5GTy5wbGF0Zm9ybSArICcmJyArXG4gICAgQ09OTkVDVElPTl9NRVRBREFUQV9QQVJBTVMubGFuZ3VhZ2UgKyAnPScgKyBTREtfSU5GTy5sYW5ndWFnZTtcblxuXG5cblxuICAvLyAgIOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4pWXICAgICDilojilojilZcgIOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKVlyAgIOKWiOKWiOKWiOKVl+KWiOKWiOKVl1xuICAvLyAg4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4paI4paI4pWXICAgIOKWiOKWiOKVkSAg4paI4paI4pWR4pWa4pWQ4pWQ4paI4paI4pWU4pWQ4pWQ4pWd4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVkVxuICAvLyAg4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4pWU4pWdICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVlOKWiOKWiOKWiOKWiOKVlOKWiOKWiOKVkeKWiOKWiOKVkVxuICAvLyAg4paI4paI4pWU4pWQ4pWQ4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4pWa4pWQ4pWQ4pWQ4pWQ4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4paI4paI4pWXICAgIOKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVkeKVmuKWiOKWiOKVlOKVneKWiOKWiOKVkeKWiOKWiOKVkVxuICAvLyAg4paI4paI4pWRICDilojilojilZHilojilojilojilojilojilojilZTilZ3ilojilojilojilojilojilojilojilZHilZrilojilojilojilojilojilojilZTilZ3ilojilojilZEgIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVnSAgICDilojilojilZEgIOKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVkSDilZrilZDilZ0g4paI4paI4pWR4paI4paI4paI4paI4paI4paI4paI4pWXXG4gIC8vICDilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIOKVmuKVkOKVnSAg4pWa4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdICAgICDilZrilZDilZ0gIOKVmuKVkOKVnSAgIOKVmuKVkOKVnSAgIOKVmuKVkOKVnSAgICAg4pWa4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdXG4gIC8vXG4gIC8vICAg4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilZfilojilojilojilojilojilojilZcg4paI4paI4pWXICAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWXXG4gIC8vICDilojilojilZTilZDilZDilojilojilZfilZrilZDilZDilojilojilZTilZDilZDilZ3ilZrilZDilZDilojilojilZTilZDilZDilZ3ilojilojilZTilZDilZDilojilojilZfilojilojilZHilojilojilZTilZDilZDilojilojilZfilojilojilZEgICDilojilojilZHilZrilZDilZDilojilojilZTilZDilZDilZ3ilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilZDilZDilZ1cbiAgLy8gIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgICAgIOKWiOKWiOKVkSAgIOKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVneKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVneKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKWiOKWiOKWiOKVlyAg4paI4paI4paI4paI4paI4paI4paI4pWXXG4gIC8vICDilojilojilZTilZDilZDilojilojilZEgICDilojilojilZEgICAgICDilojilojilZEgICDilojilojilZTilZDilZDilojilojilZfilojilojilZHilojilojilZTilZDilZDilojilojilZfilojilojilZEgICDilojilojilZEgICDilojilojilZEgICDilojilojilZTilZDilZDilZ0gIOKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkVxuICAvLyAg4paI4paI4pWRICDilojilojilZEgICDilojilojilZEgICAgICDilojilojilZEgICDilojilojilZEgIOKWiOKWiOKVkeKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVneKVmuKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVnSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkVxuICAvLyAg4pWa4pWQ4pWdICDilZrilZDilZ0gICDilZrilZDilZ0gICAgICDilZrilZDilZ0gICDilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVnSAg4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdICAgIOKVmuKVkOKVnSAgIOKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVnVxuICAvL1xuICAvLyAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXICDilojilojilojilojilojilojilZcg4paI4paI4paI4pWXICAg4paI4paI4paI4pWXICAgICAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilZfilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWXXG4gIC8vICDilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilojilojilZfilojilojilZTilZDilZDilZDilojilojilZfilojilojilojilojilZcg4paI4paI4paI4paI4pWRICAgICDilojilojilZTilZ3ilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilojilojilZfilojilojilZHilojilojilZTilZDilZDilojilojilZfilZrilZDilZDilojilojilZTilZDilZDilZ3ilZrilojilojilZdcbiAgLy8gIOKWiOKWiOKWiOKWiOKWiOKVlyAg4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWU4paI4paI4paI4paI4pWU4paI4paI4pWRICAgIOKWiOKWiOKVlOKVnSDilojilojilojilojilojilojilojilZfilojilojilZEgICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVneKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVnSAgIOKWiOKWiOKVkSAgICDilZrilojilojilZdcbiAgLy8gIOKWiOKWiOKVlOKVkOKVkOKVnSAg4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWR4pWa4paI4paI4pWU4pWd4paI4paI4pWRICAgIOKVmuKWiOKWiOKVlyDilZrilZDilZDilZDilZDilojilojilZHilojilojilZEgICAgIOKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKVkOKVnSAgICDilojilojilZEgICAg4paI4paI4pWU4pWdXG4gIC8vICDilojilojilZEgICAgIOKWiOKWiOKVkSAg4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWRIOKVmuKVkOKVnSDilojilojilZEgICAgIOKVmuKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKVmuKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWR4paI4paI4pWRICAgICAgICDilojilojilZEgICDilojilojilZTilZ1cbiAgLy8gIOKVmuKVkOKVnSAgICAg4pWa4pWQ4pWdICDilZrilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIOKVmuKVkOKVnSAgICAg4pWa4pWQ4pWdICAgICAg4pWa4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVnSAg4pWa4pWQ4pWd4pWa4pWQ4pWd4pWa4pWQ4pWdICAgICAgICDilZrilZDilZ0gICDilZrilZDilZ1cbiAgLy9cbiAgLy9cbiAgLy8gSWYgYXZhaWxhYmxlLCBncmFiIHRoZSBET00gZWxlbWVudCBmb3IgdGhlIHNjcmlwdCB0YWcgd2hpY2ggaW1wb3J0ZWQgdGhpcyBmaWxlLlxuICAvLyAoc2tpcCB0aGlzIGlmIHRoaXMgU0RLIGlzIGJlaW5nIHVzZWQgb3V0c2lkZSBvZiB0aGUgRE9NLCBpLmUuIGluIGEgTm9kZSBwcm9jZXNzKVxuICAvL1xuICAvLyBUaGlzIGlzIHVzZWQgYmVsb3cgdG8gcGFyc2UgY2xpZW50LXNpZGUgc2FpbHMuaW8uanMgY29uZmlndXJhdGlvbiBlbmNvZGVkIGFzXG4gIC8vIEhUTUwgYXR0cmlidXRlcywgYXMgd2VsbCBhcyBncmFiYmluZyBob2xkIG9mIHRoZSBVUkwgZnJvbSB3aGVuY2UgdGhlIFNESyB3YXMgZmV0Y2hlZC5cbiAgdmFyIHRoaXNTY3JpcHRUYWcgPSAoZnVuY3Rpb24oKSB7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ29iamVjdCcgfHxcbiAgICAgIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICdvYmplY3QnIHx8XG4gICAgICB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSAnZnVuY3Rpb24nXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIFVSTCBvZiB0aGUgbGFzdCBzY3JpcHQgbG9hZGVkIChpLmUuIHRoaXMgb25lKVxuICAgIC8vICh0aGlzIG11c3QgcnVuIGJlZm9yZSBuZXh0VGljazsgc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI5NzY3MTQvNDg2NTQ3KVxuICAgIHZhciBhbGxTY3JpcHRzQ3VycmVudGx5SW5ET00gPSB3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICAgIHJldHVybiBhbGxTY3JpcHRzQ3VycmVudGx5SW5ET01bYWxsU2NyaXB0c0N1cnJlbnRseUluRE9NLmxlbmd0aCAtIDFdO1xuICB9KSgpO1xuXG5cbiAgLy8gVmFyaWFibGVzIHRvIGNvbnRhaW4gc3JjIFVSTCBhbmQgb3RoZXIgc2NyaXB0IHRhZyBjb25maWcgKGZvciB1c2UgYmVsb3cpLlxuICB2YXIgdXJsVGhpc1NjcmlwdFdhc0ZldGNoZWRGcm9tID0gJyc7XG4gIHZhciBzY3JpcHRUYWdDb25maWcgPSB7fTtcblxuXG4gIGlmICh0aGlzU2NyaXB0VGFnKSB7XG4gICAgLy8gU2F2ZSB0aGUgVVJMIHRoYXQgdGhpcyBzY3JpcHQgd2FzIGZldGNoZWQgZnJvbS5cbiAgICB1cmxUaGlzU2NyaXB0V2FzRmV0Y2hlZEZyb20gPSB0aGlzU2NyaXB0VGFnLnNyYztcblxuICAgIC8vIE5vdyBwYXJzZSB0aGUgbW9zdCBjb21tb24gY2xpZW50LXNpZGUgY29uZmlndXJhdGlvbiBzZXR0aW5nc1xuICAgIC8vIGZyb20gdGhlIHNjcmlwdCB0YWcgd2hlcmUgdGhleSBtYXkgYmUgZW5jb2RlZCBhcyBIVE1MIGF0dHJpYnV0ZXMuXG4gICAgLy9cbiAgICAvLyBBbnkgY29uZmlndXJhdGlvbiB3aGljaCBtYXkgYmUgcHJvdmlkZWQgYXMgYW4gSFRNTCBhdHRyaWJ1dGUgbWF5XG4gICAgLy8gYWxzbyBiZSBwcm92aWRlZCBwcmVmaXhlZCB3aXRoIGBkYXRhLWAuICBUaGlzIGlzIGZvciBmb2xrcyB3aG9cbiAgICAvLyBuZWVkIHRvIHN1cHBvcnQgYnJvd3NlcnMgdGhhdCBoYXZlIGlzc3VlcyB3aXRoIG5vbnN0YW5kYXJkXG4gICAgLy8gSFRNTCBhdHRyaWJ1dGVzIChvciBpZiB0aGUgaWRlYSBvZiB1c2luZyBub25zdGFuZGFyZCBIVE1MIGF0dHJpYnV0ZXNcbiAgICAvLyBqdXN0IGNyZWVwcyB5b3Ugb3V0KVxuICAgIC8vXG4gICAgLy8gSWYgYSBgZGF0YS1gIHByZWZpeGVkIGF0dHIgaXMgcHJvdmlkZWQsIGl0IHRha2VzIHByZWNlZGVuY2UuXG4gICAgLy8gKHRoaXMgaXMgc28gdGhhdCBpZiB5b3UgYXJlIGFscmVhZHkgdXNpbmcgb25lIG9mIHRoZXNlIEhUTUxcbiAgICAvLyAgYXR0cnMgZm9yIHNvbWUgcmVhc29uLCB5b3UgY2FuIGtlZXAgaXQgYXMtaXMgYW5kIG92ZXJyaWRlXG4gICAgLy8gIGl0IHVzaW5nIGBkYXRhLWAuIElmIHlvdSBhcmUgdXNpbmcgdGhlIGBkYXRhLWAgcHJlZml4ZWQgdmVyc2lvblxuICAgIC8vICBmb3Igc29tZSBvdGhlciBwdXJwb3NlLi4uIHdlbGwsIGluIHRoYXQgY2FzZSB5b3UnbGwganVzdCBoYXZlIHRvXG4gICAgLy8gIGNvbmZpZ3VyZSBwcm9ncmFtbWF0aWNhbGx5IHVzaW5nIGBpby5zYWlsc2AgaW5zdGVhZC4pXG4gICAgQ09ORklHVVJBQkxFX1ZJQV9IVE1MX0FUVFIuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnS2V5KXtcblxuICAgICAgc2NyaXB0VGFnQ29uZmlnW2NvbmZpZ0tleV0gPSAoZnVuY3Rpb24gKCl7XG5cbiAgICAgICAgLy8gU3VwcG9ydCAnZGF0YS0nIHByZWZpeGVkIG9yIG5vcm1hbCBhdHRyaWJ1dGVzLlxuICAgICAgICAvLyAocHJlZml4ZWQgdmVyc2lvbnMgdGFrZSBwcmVjZWRlbmNlIGlmIHByb3ZpZGVkKVxuICAgICAgICB2YXIgaHRtbEF0dHJWYWwgPSB0aGlzU2NyaXB0VGFnLmdldEF0dHJpYnV0ZSggJ2RhdGEtJytjb25maWdLZXkgKTtcbiAgICAgICAgaWYgKCFodG1sQXR0clZhbCkge1xuICAgICAgICAgIGh0bWxBdHRyVmFsID0gdGhpc1NjcmlwdFRhZy5nZXRBdHRyaWJ1dGUoIGNvbmZpZ0tleSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIEhUTUwgYXR0cmlidXRlIHZhbHVlIHNob3VsZCBhbHdheXMgYmUgYSBzdHJpbmcgb3IgYG51bGxgLlxuICAgICAgICAvLyBXZSdsbCB0cnkgdG8gcGFyc2UgaXQgYXMgSlNPTiBhbmQgdXNlIHRoYXQsIGJ1dCB3b3JzdCBjYXNlIGZhbGwgYmFja1xuICAgICAgICAvLyB0byB0aGUgZGVmYXVsdCBzaXR1YXRpb24gb2YgaXQgYmVpbmcgYSBzdHJpbmcuXG4gICAgICAgIGlmICh0eXBlb2YgaHRtbEF0dHJWYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdHJ5IHsgcmV0dXJuIEpTT04ucGFyc2UoaHRtbEF0dHJWYWwpOyB9IGNhdGNoIChlKSB7IHJldHVybiBodG1sQXR0clZhbDsgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIGBudWxsYCB3YXMgcmV0dXJuZWQgZnJvbSBnZXRBdHRyaWJ1dGUoKSwgaXQgbWVhbnMgdGhhdCB0aGUgSFRNTCBhdHRyaWJ1dGVcbiAgICAgICAgLy8gd2FzIG5vdCBzcGVjaWZpZWQsIHNvIHdlIHRyZWF0IGl0IGFzIHVuZGVmaW5lZCAod2hpY2ggd2lsbCBjYXVzZSB0aGUgcHJvcGVydHlcbiAgICAgICAgLy8gdG8gYmUgcmVtb3ZlZCBiZWxvdylcbiAgICAgICAgZWxzZSBpZiAoaHRtbEF0dHJWYWwgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFueSBvdGhlciBjb250aW5nZW5jeSBzaG91bGRuJ3QgYmUgcG9zc2libGU6XG4gICAgICAgIC8vIC0gaWYgbm8gcXVvdGVzIGFyZSB1c2VkIGluIHRoZSBIVE1MIGF0dHJpYnV0ZSwgaXQgc3RpbGwgY29tZXMgaW4gYXMgYSBzdHJpbmcuXG4gICAgICAgIC8vIC0gaWYgbm8gUkhTIGlzIHByb3ZpZGVkIGZvciB0aGUgYXR0cmlidXRlLCBpdCBzdGlsbCBjb21lcyBpbiBhcyBcIlwiIChlbXB0eSBzdHJpbmcpXG4gICAgICAgIC8vIChidXQgd2Ugc3RpbGwgaGFuZGxlIHRoaXMgd2l0aCBhbiBleHBsaWNpdCBlcnJvciBqdXN0IGluIGNhc2UtLWZvciBkZWJ1Z2dpbmcgYW5kIHN1cHBvcnQgcHVycG9zZXMpXG4gICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdzYWlscy5pby5qcyA6OiBVbmV4cGVjdGVkL2ludmFsaWQgc2NyaXB0IHRhZyBjb25maWd1cmF0aW9uIGZvciBgJytjb25maWdLZXkrJ2A6IGAnK2h0bWxBdHRyVmFsKydgIChhIGAnK3R5cGVvZiBodG1sQXR0clZhbCsnYCkuIFNob3VsZCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH0pKCk7XG5cbiAgICAgIGlmIChzY3JpcHRUYWdDb25maWdbY29uZmlnS2V5XSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgZGVsZXRlIHNjcmlwdFRhZ0NvbmZpZ1tjb25maWdLZXldO1xuICAgICAgfVxuICAgIH0pO1xuXG5cblxuICAgIC8vIE5vdyB0aGF0IHRoZXkndmUgYmVlbiBwYXJzZWQsIGRvIGFuIGV4dHJlbWVseSBsZWFuIHZlcnNpb24gb2ZcbiAgICAvLyBsb2dpY2FsIHR5cGUgdmFsaWRhdGlvbi9jb2VyY2lvbiBvZiBwcm92aWRlZCB2YWx1ZXMuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvLyBgYXV0b0Nvbm5lY3RgXG4gICAgaWYgKHR5cGVvZiBzY3JpcHRUYWdDb25maWcuYXV0b0Nvbm5lY3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoc2NyaXB0VGFnQ29uZmlnLmF1dG9Db25uZWN0ID09PSAnJykge1xuICAgICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGVtcHR5IHN0cmluZy4gIEl0IG1lYW5zIGB0cnVlYCAoc2VlIGFib3ZlKS5cbiAgICAgICAgc2NyaXB0VGFnQ29uZmlnLmF1dG9Db25uZWN0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBzY3JpcHRUYWdDb25maWcuYXV0b0Nvbm5lY3QgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NhaWxzLmlvLmpzIDo6IFVuZXhwZWN0ZWQvaW52YWxpZCBjb25maWd1cmF0aW9uIGZvciBgYXV0b0Nvbm5lY3RgIHByb3ZpZGVkIGluIHNjcmlwdCB0YWc6IGAnK3NjcmlwdFRhZ0NvbmZpZy5hdXRvQ29ubmVjdCsnYCAoYSBgJyt0eXBlb2Ygc2NyaXB0VGFnQ29uZmlnLmF1dG9Db25uZWN0KydgKS4gU2hvdWxkIGJlIGEgYm9vbGVhbi4nKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIGBlbnZpcm9ubWVudGBcbiAgICBpZiAodHlwZW9mIHNjcmlwdFRhZ0NvbmZpZy5lbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2NyaXB0VGFnQ29uZmlnLmVudmlyb25tZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NhaWxzLmlvLmpzIDo6IFVuZXhwZWN0ZWQvaW52YWxpZCBjb25maWd1cmF0aW9uIGZvciBgZW52aXJvbm1lbnRgIHByb3ZpZGVkIGluIHNjcmlwdCB0YWc6IGAnK3NjcmlwdFRhZ0NvbmZpZy5lbnZpcm9ubWVudCsnYCAoYSBgJyt0eXBlb2Ygc2NyaXB0VGFnQ29uZmlnLmVudmlyb25tZW50KydgKS4gU2hvdWxkIGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gYGhlYWRlcnNgXG4gICAgaWYgKHR5cGVvZiBzY3JpcHRUYWdDb25maWcuaGVhZGVycyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2NyaXB0VGFnQ29uZmlnLmhlYWRlcnMgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoc2NyaXB0VGFnQ29uZmlnLmhlYWRlcnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2FpbHMuaW8uanMgOjogVW5leHBlY3RlZC9pbnZhbGlkIGNvbmZpZ3VyYXRpb24gZm9yIGBoZWFkZXJzYCBwcm92aWRlZCBpbiBzY3JpcHQgdGFnOiBgJytzY3JpcHRUYWdDb25maWcuaGVhZGVycysnYCAoYSBgJyt0eXBlb2Ygc2NyaXB0VGFnQ29uZmlnLmhlYWRlcnMrJ2ApLiBTaG91bGQgYmUgYSBKU09OLWNvbXBhdGlibGUgZGljdGlvbmFyeSAoaS5lLiBge31gKS4gIERvblxcJ3QgZm9yZ2V0IHRob3NlIGRvdWJsZSBxdW90ZXMgKFwiXCIpLCBldmVuIG9uIGtleSBuYW1lcyEgIFVzZSBzaW5nbGUgcXVvdGVzIChcXCdcXCcpIHRvIHdyYXAgdGhlIEhUTUwgYXR0cmlidXRlIHZhbHVlOyBlLmcuIGBoZWFkZXJzPVxcJ3tcIlgtQXV0aFwiOiBcImZvb1wifVxcJ2AnKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIGB1cmxgXG4gICAgaWYgKHR5cGVvZiBzY3JpcHRUYWdDb25maWcudXJsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiBzY3JpcHRUYWdDb25maWcudXJsICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NhaWxzLmlvLmpzIDo6IFVuZXhwZWN0ZWQvaW52YWxpZCBjb25maWd1cmF0aW9uIGZvciBgdXJsYCBwcm92aWRlZCBpbiBzY3JpcHQgdGFnOiBgJytzY3JpcHRUYWdDb25maWcudXJsKydgIChhIGAnK3R5cGVvZiBzY3JpcHRUYWdDb25maWcudXJsKydgKS4gU2hvdWxkIGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9USEVSIGBpby5zYWlsc2Agb3B0aW9ucyBhcmUgTk9UIENVUlJFTlRMWSBTVVBQT1JURUQgVklBIEhUTUwgQVRUUklCVVRFUy5cbiAgfVxuXG5cblxuXG4gIC8vIEdyYWIgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBzb2NrZXQuaW8gY2xpZW50IChpZiBvbmUgaXMgYXZhaWxhYmxlKS5cbiAgLy8gVGhpcyBpcyB1c2VkIHZpYSBjbG9zdXJlIGJlbG93IHRvIGRldGVybWluZSB3aGljaCBgaW9gIHRvIHVzZSB3aGVuIHRoZVxuICAvLyBzb2NrZXQuaW8gY2xpZW50IGluc3RhbmNlIChgaW9gKSBpcyBhdWdtZW50ZWQgdG8gYmVjb21lIHRoZSBTYWlscyBjbGllbnRcbiAgLy8gU0RLIGluc3RhbmNlIChzdGlsbCBgaW9gKS5cbiAgdmFyIF9leGlzdGluZ0dsb2JhbFNvY2tldElPID0gKHR5cGVvZiBpbyAhPT0gJ3VuZGVmaW5lZCcpID8gaW8gOiB1bmRlZmluZWQ7XG5cblxuXG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8vLy9cbiAgLy8vLy8gTk9XIEZPUiBCVU5DSEVTIE9GOlxuICAvLy8vLyAgLSBQUklWQVRFIEZVTkNUSU9OIERFRklOSVRJT05TXG4gIC8vLy8vICAtIENPTlNUUlVDVE9SU1xuICAvLy8vLyAgLSBBTkQgTUVUSE9EU1xuICAvLy8vL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvL1xuXG5cblxuICAvLyAg4paI4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilZfilojilojilZcgICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyAgICAgIOKWiOKWiOKVlyDilojilojilojilojilojilojilZcgICAgICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVlyAgICAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4pWXICAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4paI4pWXXG4gIC8vICDilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilojilojilZfilojilojilZHilojilojilZEgICAgIOKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVnSAgICAgIOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKVkOKWiOKWiOKVlyAgICAgIOKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVkSAgICAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4paI4paI4pWXICDilojilojilZHilZrilZDilZDilojilojilZTilZDilZDilZ1cbiAgLy8gIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVkeKWiOKWiOKVkSAgICAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4pWX4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICAgICDilojilojilZEgICAgIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKVlyAg4paI4paI4pWU4paI4paI4pWXIOKWiOKWiOKVkSAgIOKWiOKWiOKVkVxuICAvLyAg4pWa4pWQ4pWQ4pWQ4pWQ4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4paI4paI4pWR4paI4paI4pWR4paI4paI4pWRICAgICDilZrilZDilZDilZDilZDilojilojilZHilZrilZDilZDilZDilZDilZ3ilojilojilZHilojilojilZEgICDilojilojilZHilZrilZDilZDilZDilZDilZ3ilojilojilZEgICAgIOKWiOKWiOKVkSAgICAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWdICDilojilojilZHilZrilojilojilZfilojilojilZEgICDilojilojilZFcbiAgLy8gIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWR4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWRICAgICAg4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWU4pWdICAgICAg4pWa4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWR4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRIOKVmuKWiOKWiOKWiOKWiOKVkSAgIOKWiOKWiOKVkVxuICAvLyAg4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ0gICAgICDilZrilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdICAgICAgICDilZrilZDilZDilZDilZDilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVkOKVkOKVnSAgIOKVmuKVkOKVnVxuICAvL1xuXG4gIC8qKlxuICAgKiBTYWlsc0lPQ2xpZW50KClcbiAgICpcbiAgICogQXVnbWVudCB0aGUgcHJvdmlkZWQgU29ja2V0LmlvIGNsaWVudCBvYmplY3QgKGBpb2ApIHdpdGggbWV0aG9kcyBmb3JcbiAgICogdGFsa2luZyBhbmQgbGlzdGVuaW5nIHRvIG9uZSBvciBtb3JlIFNhaWxzIGJhY2tlbmQocykuICBJZiBubyBgaW9gIHdhc1xuICAgKiBwcm92aWRlZCAoaS5lLiBpbiBhIGJyb3dzZXIgc2V0dGluZyksIHRoZW4gYXR0ZW1wdCB0byB1c2UgdGhlIGdsb2JhbC5cbiAgICpcbiAgICogVGhpcyBhYnNvcmJzIGltcGxpY2l0IGBpby5zYWlsc2AgY29uZmlndXJhdGlvbiwgc2V0cyBhIHRpbWVyIGZvclxuICAgKiBhdXRvbWF0aWNhbGx5IGNvbm5lY3RpbmcgYSBzb2NrZXQgKGlmIGBpby5zYWlscy5hdXRvQ29ubmVjdGAgaXMgZW5hYmxlZClcbiAgICogYW5kIHJldHVybnMgdGhlIGF1Z21lbnRlZCBgaW9gLlxuICAgKlxuICAgKiBOb3RlOlxuICAgKiBUaGUgYXV0b21hdGljYWxseS1jb25uZWN0ZWQgc29ja2V0IGlzIGV4cG9zZWQgYXMgYGlvLnNvY2tldGAuICBJZiB0aGlzXG4gICAqIHNvY2tldCBhdHRlbXB0cyB0byBiaW5kIGV2ZW50IGxpc3RlbmVycyBvciBzZW5kIHJlcXVlc3RzIGJlZm9yZSBpdCBpc1xuICAgKiBjb25uZWN0ZWQsIGl0IHdpbGwgYmUgcXVldWVkIHVwIGFuZCByZXBsYXllZCB3aGVuIHRoZSBjb25uZWN0aW9uIGlzXG4gICAqIHN1Y2Nlc3NmdWxseSBvcGVuZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7U29ja2V0SU99IGlvXG4gICAqIEByZXR1cm5zIHtTYWlsc0lPQ2xpZW50fSBbYWxzbyBjYWxsZWQgYGlvYF1cbiAgICovXG5cbiAgZnVuY3Rpb24gU2FpbHNJT0NsaWVudChfcHJvdmlkZWRTb2NrZXRJTykge1xuXG4gICAgLy8gRmlyc3QsIGRldGVybWluZSB3aGljaCBgaW9gIHdlJ3JlIGF1Z21lbnRpbmcuXG4gICAgLy9cbiAgICAvLyBQcmVmZXIgdGhlIHBhc3NlZC1pbiBgaW9gIGluc3RhbmNlLCBidXQgZmFsbCBiYWNrIHRvIHRoZVxuICAgIC8vIGdsb2JhbCBvbmUgaWYgd2UndmUgZ290IGl0LlxuICAgIHZhciBpbztcbiAgICBpZiAoX3Byb3ZpZGVkU29ja2V0SU8pIHtcbiAgICAgIGlvID0gX3Byb3ZpZGVkU29ja2V0SU87XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaW8gPSBfZXhpc3RpbmdHbG9iYWxTb2NrZXRJTztcbiAgICB9XG4gICAgLy8gKG5vdGUgdGhhdCBmb3IgcmVhZGFiaWxpdHksIHdlIGRlbGliZXJhdGVseSBkbyBub3Qgc2hvcnQgY2lyY3VpdCBvciB1c2UgdGhlIHRlcnRpYXJ5IG9wZXJhdG9yIGFib3ZlKVxuXG5cbiAgICAvLyBJZiBhIHNvY2tldC5pbyBjbGllbnQgKGBpb2ApIGlzIG5vdCBhdmFpbGFibGUsIG5vbmUgb2YgdGhpcyB3aWxsIHdvcmsuXG4gICAgaWYgKCFpbykge1xuICAgICAgLy8gSWYgbm9kZTpcbiAgICAgIGlmIChTREtfSU5GTy5wbGF0Zm9ybSA9PT0gJ25vZGUnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc29ja2V0LmlvIGNsaWVudCBhdmFpbGFibGUuICBXaGVuIHJlcXVpcmluZyBgc2FpbHMuaW8uanNgIGZyb20gTm9kZS5qcywgYSBzb2NrZXQuaW8gY2xpZW50IChgaW9gKSBtdXN0IGJlIHBhc3NlZCBpbjsgZS5nLjpcXG5gYGBcXG52YXIgaW8gPSByZXF1aXJlKFxcJ3NhaWxzLmlvLmpzXFwnKSggcmVxdWlyZShcXCdzb2NrZXQuaW8tY2xpZW50XFwnKSApXFxuYGBgXFxuKHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmFsZGVyZGFzaHkvc2FpbHMuaW8uanMvdHJlZS9tYXN0ZXIvdGVzdCBmb3IgbW9yZSBleGFtcGxlcyknKTtcbiAgICAgIH1cbiAgICAgIC8vIE90aGVyd2lzZSwgdGhpcyBpcyBhIHdlYiBicm93c2VyOlxuICAgICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIFNhaWxzIHNvY2tldCBTREsgZGVwZW5kcyBvbiB0aGUgc29ja2V0LmlvIGNsaWVudCwgYnV0IHRoZSBzb2NrZXQuaW8gZ2xvYmFsIChgaW9gKSB3YXMgbm90IGF2YWlsYWJsZSB3aGVuIGBzYWlscy5pby5qc2AgbG9hZGVkLiAgTm9ybWFsbHksIHRoZSBzb2NrZXQuaW8gY2xpZW50IGNvZGUgaXMgYnVuZGxlZCB3aXRoIHNhaWxzLmlvLmpzLCBzbyBzb21ldGhpbmcgaXMgYSBsaXR0bGUgb2ZmLiAgUGxlYXNlIGNoZWNrIHRvIGJlIHN1cmUgdGhpcyB2ZXJzaW9uIG9mIGBzYWlscy5pby5qc2AgaGFzIHRoZSBtaW5pZmllZCBTb2NrZXQuaW8gY2xpZW50IGF0IHRoZSB0b3Agb2YgdGhlIGZpbGUuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIGNob3NlbiBzb2NrZXQuaW8gY2xpZW50IChgaW9gKSBoYXMgQUxSRUFEWSBCRUVOIEFVR01FTlRFRCBieSB0aGlzIFNESyxcbiAgICAvLyAoaS5lLiBpZiBpdCBhbHJlYWR5IGhhcyBhIGAuc2FpbHNgIHByb3BlcnR5KSB0aGVuIHRocm93IGFuIGVycm9yLlxuICAgIGlmIChpby5zYWlscykge1xuICAgICAgLy8gSWYgbm9kZTpcbiAgICAgIGlmIChTREtfSU5GTy5wbGF0Zm9ybSA9PT0gJ25vZGUnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3ZpZGVkIHNvY2tldC5pbyBjbGllbnQgKGBpb2ApIGhhcyBhbHJlYWR5IGJlZW4gYXVnbWVudGVkIGludG8gYSBTYWlscyBzb2NrZXQgU0RLIGluc3RhbmNlIChpdCBoYXMgYGlvLnNhaWxzYCkuJyk7XG4gICAgICB9XG4gICAgICAvLyBPdGhlcndpc2UsIHRoaXMgaXMgYSB3ZWIgYnJvd3NlcjpcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzb2NrZXQuaW8gY2xpZW50IChgaW9gKSBoYXMgYWxyZWFkeSBiZWVuIGF1Z21lbnRlZCBpbnRvIGEgU2FpbHMgc29ja2V0IFNESyBpbnN0YW5jZS4gIFVzdWFsbHksIHRoaXMgbWVhbnMgeW91IGFyZSBicmluZ2luZyBgc2FpbHMuaW8uanNgIG9udG8gdGhlIHBhZ2UgbW9yZSB0aGFuIG9uY2UuJyk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBBIGxpdHRsZSBsb2dnZXIgZm9yIHRoaXMgbGlicmFyeSB0byB1c2UgaW50ZXJuYWxseS5cbiAgICAgKiBCYXNpY2FsbHkganVzdCBhIHdyYXBwZXIgYXJvdW5kIGBjb25zb2xlLmxvZ2Agd2l0aFxuICAgICAqIHN1cHBvcnQgZm9yIGZlYXR1cmUtZGV0ZWN0aW9uLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICogQGZhY3RvcnlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2dnZXJGYWN0b3J5KG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHtcbiAgICAgICAgcHJlZml4OiB0cnVlXG4gICAgICB9O1xuXG4gICAgICAvLyBJZiBgY29uc29sZS5sb2dgIGlzIG5vdCBhY2Nlc3NpYmxlLCBgbG9nYCBpcyBhIG5vb3AuXG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICB0eXBlb2YgY29uc29sZS5sb2cgIT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgdHlwZW9mIGNvbnNvbGUubG9nLmJpbmQgIT09ICdmdW5jdGlvbidcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbm9vcCgpIHt9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbG9nKCkge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICAgICAgLy8gQWxsIGxvZ3MgYXJlIGRpc2FibGVkIHdoZW4gYGlvLnNhaWxzLmVudmlyb25tZW50ID0gJ3Byb2R1Y3Rpb24nYC5cbiAgICAgICAgaWYgKGlvLnNhaWxzLmVudmlyb25tZW50ID09PSAncHJvZHVjdGlvbicpIHJldHVybjtcblxuICAgICAgICAvLyBBZGQgcHJlZml4IHRvIGxvZyBtZXNzYWdlcyAodW5sZXNzIGRpc2FibGVkKVxuICAgICAgICB2YXIgUFJFRklYID0gJyc7XG4gICAgICAgIGlmIChvcHRpb25zLnByZWZpeCkge1xuICAgICAgICAgIGFyZ3MudW5zaGlmdChQUkVGSVgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FsbCB3cmFwcGVkIGxvZ2dlclxuICAgICAgICBjb25zb2xlLmxvZ1xuICAgICAgICAgIC5iaW5kKGNvbnNvbGUpXG4gICAgICAgICAgLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9Ly88L0xvZ2dlckZhY3Rvcnk+XG5cbiAgICAvLyBDcmVhdGUgYSBwcml2YXRlIGxvZ2dlciBpbnN0YW5jZVxuICAgIHZhciBjb25zb2xvZyA9IExvZ2dlckZhY3RvcnkoKTtcbiAgICBjb25zb2xvZy5ub1ByZWZpeCA9IExvZ2dlckZhY3Rvcnkoe1xuICAgICAgcHJlZml4OiBmYWxzZVxuICAgIH0pO1xuXG5cblxuICAgIC8qKlxuICAgICAqIFdoYXQgaXMgdGhlIGByZXF1ZXN0UXVldWVgP1xuICAgICAqXG4gICAgICogVGhlIHJlcXVlc3QgcXVldWUgaXMgdXNlZCB0byBzaW1wbGlmeSBhcHAtbGV2ZWwgY29ubmVjdGlvbiBsb2dpYy0tXG4gICAgICogaS5lLiBzbyB5b3UgZG9uJ3QgaGF2ZSB0byB3YWl0IGZvciB0aGUgc29ja2V0IHRvIGJlIGNvbm5lY3RlZFxuICAgICAqIHRvIHN0YXJ0IHRyeWluZyB0byAgc3luY2hyb25pemUgZGF0YS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqIEBwYXJhbSAge1NhaWxzU29ja2V0fSAgc29ja2V0XG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBydW5SZXF1ZXN0UXVldWUgKHNvY2tldCkge1xuICAgICAgdmFyIHF1ZXVlID0gc29ja2V0LnJlcXVlc3RRdWV1ZTtcblxuICAgICAgaWYgKCFxdWV1ZSkgcmV0dXJuO1xuICAgICAgZm9yICh2YXIgaSBpbiBxdWV1ZSkge1xuXG4gICAgICAgIC8vIERvdWJsZS1jaGVjayB0aGF0IGBxdWV1ZVtpXWAgd2lsbCBub3RcbiAgICAgICAgLy8gaW5hZHZlcnRlbnRseSBkaXNjb3ZlciBleHRyYSBwcm9wZXJ0aWVzIGF0dGFjaGVkIHRvIHRoZSBPYmplY3RcbiAgICAgICAgLy8gYW5kL29yIEFycmF5IHByb3RvdHlwZSBieSBvdGhlciBsaWJyYXJpZXMvZnJhbWV3b3Jrcy90b29scy5cbiAgICAgICAgLy8gKGUuZy4gRW1iZXIgZG9lcyB0aGlzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhbGRlcmRhc2h5L3NhaWxzLmlvLmpzL3B1bGwvNSlcbiAgICAgICAgdmFyIGlzU2FmZVRvRGVyZWZlcmVuY2UgPSAoe30pLmhhc093blByb3BlcnR5LmNhbGwocXVldWUsIGkpO1xuICAgICAgICBpZiAoaXNTYWZlVG9EZXJlZmVyZW5jZSkge1xuICAgICAgICAgIC8vIEdldCB0aGUgYXJndW1lbnRzIHRoYXQgd2VyZSBvcmlnaW5hbGx5IG1hZGUgdG8gdGhlIFwicmVxdWVzdFwiIG1ldGhvZFxuICAgICAgICAgIHZhciByZXF1ZXN0QXJncyA9IHF1ZXVlW2ldO1xuICAgICAgICAgIC8vIENhbGwgdGhlIHJlcXVlc3QgbWV0aG9kIGFnYWluIGluIHRoZSBjb250ZXh0IG9mIHRoZSBzb2NrZXQsIHdpdGggdGhlIG9yaWdpbmFsIGFyZ3NcbiAgICAgICAgICBzb2NrZXQucmVxdWVzdC5hcHBseShzb2NrZXQsIHJlcXVlc3RBcmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBOb3cgZW1wdHkgdGhlIHF1ZXVlIHRvIHJlbW92ZSBpdCBhcyBhIHNvdXJjZSBvZiBhZGRpdGlvbmFsIGNvbXBsZXhpdHkuXG4gICAgICBzb2NrZXQucmVxdWVzdFF1ZXVlID0gbnVsbDtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIEpTT05QIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9ICAgb3B0cyBbb3B0aW9uYWxdXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiXG4gICAgICogQHJldHVybiB7WE1MSHR0cFJlcXVlc3R9XG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBqc29ucChvcHRzLCBjYikge1xuICAgICAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBGVVRVUkU6IHJlZmFjdG9yIG5vZGUgdXNhZ2UgdG8gbGl2ZSBpbiBoZXJlXG4gICAgICAgIHJldHVybiBjYigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2NyaXB0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHdpbmRvdy5fc2FpbHNJb0pTQ29ubmVjdCA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIC8vIEluIHJhcmUgY2lyY3Vtc3RhbmNlcyBvdXIgc2NyaXB0IG1heSBoYXZlIGJlZW4gdmFwb3Jpc2VkLlxuICAgICAgICAvLyBSZW1vdmUgaXQsIGJ1dCBvbmx5IGlmIGl0IHN0aWxsIGV4aXN0c1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYmFsZGVyZGFzaHkvc2FpbHMuaW8uanMvaXNzdWVzLzkyXG4gICAgICAgIGlmIChzY3JpcHRFbCAmJiBzY3JpcHRFbC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBzY3JpcHRFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdEVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNiKHJlc3BvbnNlKTtcbiAgICAgIH07XG4gICAgICBzY3JpcHRFbC5zcmMgPSBvcHRzLnVybDtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0RWwpO1xuXG4gICAgfVxuXG5cblxuXG4gICAgLy8gICAgICAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilZcgICDilojilojilZcgICAgICDilojilojilZcgICAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilZcgIOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVlyAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4paI4pWXXG4gICAgLy8gICAgICAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4paI4paI4pWX4paI4paI4paI4paI4pWXICDilojilojilZEgICAgICDilojilojilZEgICAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWRIOKWiOKWiOKVlOKVneKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVkOKWiOKWiOKVlOKVkOKVkOKVnVxuICAgIC8vICAgICAgIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKVlOKWiOKWiOKVlyDilojilojilZHilojilojilojilojilojilZfilojilojilZEg4paI4pWXIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKVlyAg4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWRICAgICDilojilojilojilojilojilZTilZ0g4paI4paI4paI4paI4paI4pWXICAgICDilojilojilZFcbiAgICAvLyAg4paI4paIICAg4paI4paI4pWR4pWa4pWQ4pWQ4pWQ4pWQ4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWR4pWa4paI4paI4pWX4paI4paI4pWR4pWa4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWR4paI4paI4paI4pWX4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWdICDilojilojilZTilZDilZDilojilojilZfilZrilZDilZDilZDilZDilojilojilZHilojilojilZEgICDilojilojilZHilojilojilZEgICAgIOKWiOKWiOKVlOKVkOKWiOKWiOKVlyDilojilojilZTilZDilZDilZ0gICAgIOKWiOKWiOKVkVxuICAgIC8vICDilZrilojilojilojilojilojilZTilZ3ilojilojilojilojilojilojilojilZHilZrilojilojilojilojilojilojilZTilZ3ilojilojilZEg4pWa4paI4paI4paI4paI4pWRICAgICAg4pWa4paI4paI4paI4pWU4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4pWa4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICDilojilojilZfilojilojilojilojilojilojilojilZcgICDilojilojilZFcbiAgICAvLyAgIOKVmuKVkOKVkOKVkOKVkOKVnSDilZrilZDilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIOKVmuKVkOKVnSAg4pWa4pWQ4pWQ4pWQ4pWdICAgICAgIOKVmuKVkOKVkOKVneKVmuKVkOKVkOKVnSDilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSAg4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ0gICDilZrilZDilZ1cbiAgICAvL1xuICAgIC8vICDilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXICDilojilojilojilojilojilojilZcg4paI4paI4paI4pWXICAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWXICAgICDilojilojilZcgICAgIOKWiOKWiOKVl+KWiOKWiOKVlyAgICDilojilojilZfilojilojilojilojilojilojilZcg4paI4paI4pWXXG4gICAgLy8gIOKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVlOKVkOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKVlyAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWdICAgIOKWiOKWiOKVlOKVnSAgICAg4paI4paI4pWR4paI4paI4pWRICAgIOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KVmuKWiOKWiOKVl1xuICAgIC8vICDilojilojilojilojilojilojilZTilZ3ilojilojilojilojilojilZcgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKVlOKVneKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKVlOKWiOKWiOKVlyDilojilojilZHilojilojilojilojilojilojilojilZfilojilojilojilojilojilZcgICAgICDilojilojilZEgICAgICDilojilojilZHilojilojilZEg4paI4pWXIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVnSDilojilojilZFcbiAgICAvLyAg4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4pWdICDilZrilZDilZDilZDilZDilojilojilZHilojilojilZTilZDilZDilZDilZ0g4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWR4pWa4paI4paI4pWX4paI4paI4pWR4pWa4pWQ4pWQ4pWQ4pWQ4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWdICAgICAg4paI4paI4pWRIOKWiOKWiCAgIOKWiOKWiOKVkeKWiOKWiOKVkeKWiOKWiOKWiOKVl+KWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVlyDilojilojilZFcbiAgICAvLyAg4paI4paI4pWRICDilojilojilZHilojilojilojilojilojilojilojilZfilojilojilojilojilojilojilojilZHilojilojilZEgICAgIOKVmuKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVneKWiOKWiOKVkSDilZrilojilojilojilojilZHilojilojilojilojilojilojilojilZHilojilojilojilojilojilojilojilZcgICAg4pWa4paI4paI4pWX4pWa4paI4paI4paI4paI4paI4pWU4pWd4pWa4paI4paI4paI4pWU4paI4paI4paI4pWU4pWd4paI4paI4pWRICDilojilojilZHilojilojilZTilZ1cbiAgICAvLyAg4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZ0gICAgICDilZrilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWdICDilZrilZDilZDilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ0gICAgIOKVmuKVkOKVnSDilZrilZDilZDilZDilZDilZ0gIOKVmuKVkOKVkOKVneKVmuKVkOKVkOKVnSDilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVnVxuICAgIC8vXG5cbiAgICAvKipcbiAgICAgKiBUaGUgSldSIChKU09OIFdlYlNvY2tldCBSZXNwb25zZSkgcmVjZWl2ZWQgZnJvbSBhIFNhaWxzIHNlcnZlci5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSAgcmVzcG9uc2VDdHhcbiAgICAgKiAgICAgICAgID0+IDpib2R5XG4gICAgICogICAgICAgICA9PiA6c3RhdHVzQ29kZVxuICAgICAqICAgICAgICAgPT4gOmhlYWRlcnNcbiAgICAgKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gSldSKHJlc3BvbnNlQ3R4KSB7XG4gICAgICB0aGlzLmJvZHkgPSByZXNwb25zZUN0eC5ib2R5O1xuICAgICAgdGhpcy5oZWFkZXJzID0gcmVzcG9uc2VDdHguaGVhZGVycyB8fCB7fTtcbiAgICAgIHRoaXMuc3RhdHVzQ29kZSA9ICh0eXBlb2YgcmVzcG9uc2VDdHguc3RhdHVzQ29kZSA9PT0gJ3VuZGVmaW5lZCcpID8gMjAwIDogcmVzcG9uc2VDdHguc3RhdHVzQ29kZTtcbiAgICAgIC8vIEZVVFVSRTogUmVwbGFjZSB0aGlzIHR5cGVvZiBzaG9ydC1jaXJjdWl0IHdpdGggYW4gYXNzZXJ0aW9uIChzdGF0dXNDb2RlIHNob3VsZCBhbHdheXMgYmUgc2V0KVxuXG4gICAgICBpZiAodGhpcy5zdGF0dXNDb2RlIDwgMjAwIHx8IHRoaXMuc3RhdHVzQ29kZSA+PSA0MDApIHtcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBhcHByb3ByaWF0ZSBlcnJvciBtZXNzYWdlLlxuICAgICAgICB2YXIgbXNnO1xuICAgICAgICBpZiAodGhpcy5zdGF0dXNDb2RlID09PSAwKSB7XG4gICAgICAgICAgbXNnID0gJ1RoZSBzb2NrZXQgcmVxdWVzdCBmYWlsZWQuJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBtc2cgPSAnU2VydmVyIHJlc3BvbmRlZCB3aXRoIGEgJyArIHRoaXMuc3RhdHVzQ29kZSArICcgc3RhdHVzIGNvZGUnO1xuICAgICAgICAgIG1zZyArPSAnOlxcbmBgYFxcbicgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmJvZHksIG51bGwsIDIpICsgJ1xcbmBgYCc7XG4gICAgICAgICAgLy8gKF5eTm90ZSB0aGF0IHdlIHNob3VsZCBhbHdheXMgYmUgYWJsZSB0byByZWx5IG9uIHNvY2tldC5pbyB0byBnaXZlIHVzXG4gICAgICAgICAgLy8gbm9uLWNpcmN1bGFyIGRhdGEgaGVyZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCB3cmFwcGluZyB0aGVcbiAgICAgICAgICAvLyBhYm92ZSBpbiBhIHRyeS4uLmNhdGNoKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm93IGJ1aWxkIGFuZCBhdHRhY2ggRXJyb3IgaW5zdGFuY2UuXG4gICAgICAgIHRoaXMuZXJyb3IgPSBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgSldSLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdbUmVzcG9uc2VGcm9tU2FpbHNdJyArICcgIC0tICcgK1xuICAgICAgICAnU3RhdHVzOiAnICsgdGhpcy5zdGF0dXNDb2RlICsgJyAgLS0gJyArXG4gICAgICAgICdIZWFkZXJzOiAnICsgdGhpcy5oZWFkZXJzICsgJyAgLS0gJyArXG4gICAgICAgICdCb2R5OiAnICsgdGhpcy5ib2R5O1xuICAgIH07XG4gICAgSldSLnByb3RvdHlwZS50b1BPSk8gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJvZHk6IHRoaXMuYm9keSxcbiAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICBzdGF0dXNDb2RlOiB0aGlzLnN0YXR1c0NvZGVcbiAgICAgIH07XG4gICAgfTtcbiAgICBKV1IucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIEZVVFVSRTogbG9vayBhdCBzdWJzdGFjaydzIHN0dWZmXG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdDbGllbnQtc2lkZSBzdHJlYW1pbmcgc3VwcG9ydCBub3QgaW1wbGVtZW50ZWQgeWV0LicpO1xuICAgIH07XG5cblxuXG5cbiAgICAvLyAgICAgICAgICDilojilojilojilojilojilojilojilZfilojilojilojilZcgICDilojilojilojilZfilojilojilZfilojilojilojilojilojilojilojilojilZfilojilojilojilojilojilojilojilZfilojilojilojilojilojilojilZcgIOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilZcgICDilojilojilojilZcg4paI4paI4pWX4paI4paI4pWXXG4gICAgLy8gICAgICAgICAg4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVkeKVmuKVkOKVkOKWiOKWiOKVlOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVlOKVkOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKVlyDilojilojilojilojilZHilojilojilZTilZ3ilZrilojilojilZdcbiAgICAvLyAgICAgICAgICDilojilojilojilojilojilZcgIOKWiOKWiOKVlOKWiOKWiOKWiOKWiOKVlOKWiOKWiOKVkeKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKWiOKWiOKWiOKVlyAg4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWU4paI4paI4paI4paI4pWU4paI4paI4pWR4paI4paI4pWRICDilojilojilZFcbiAgICAvLyAgICAgICAgICDilojilojilZTilZDilZDilZ0gIOKWiOKWiOKVkeKVmuKWiOKWiOKVlOKVneKWiOKWiOKVkeKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVlOKVkOKVkOKVnSAg4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWR4pWa4paI4paI4pWU4pWd4paI4paI4pWR4paI4paI4pWRICDilojilojilZFcbiAgICAvLyAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRIOKVmuKVkOKVnSDilojilojilZHilojilojilZEgICDilojilojilZEgICDilojilojilZEgICAgIOKWiOKWiOKVkSAg4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWRIOKVmuKVkOKVnSDilojilojilZHilZrilojilojilZfilojilojilZTilZ1cbiAgICAvLyAg4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWdICAgICDilZrilZDilZ3ilZrilZDilZ0gICDilZrilZDilZ0gICDilZrilZDilZ0gICAgIOKVmuKVkOKVnSAg4pWa4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZ0gICAgIOKVmuKVkOKVnSDilZrilZDilZ3ilZrilZDilZ1cbiAgICAvL1xuXG4gICAgLyoqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICogQHBhcmFtICB7U2FpbHNTb2NrZXR9IHNvY2tldCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAge09iamVjdH0gcmVxdWVzdEN0eCBbZGVzY3JpcHRpb25dXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBfZW1pdEZyb20oc29ja2V0LCByZXF1ZXN0Q3R4KSB7XG5cbiAgICAgIGlmICghc29ja2V0Ll9yYXcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZW1pdCBmcm9tIHNvY2tldC0gcmF3IFNJTyBzb2NrZXQgaXMgbWlzc2luZy4nKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2luY2UgY2FsbGJhY2sgaXMgZW1iZWRkZWQgaW4gcmVxdWVzdEN0eCxcbiAgICAgIC8vIHJldHJpZXZlIGl0IGFuZCBkZWxldGUgdGhlIGtleSBiZWZvcmUgY29udGludWluZy5cbiAgICAgIHZhciBjYiA9IHJlcXVlc3RDdHguY2I7XG4gICAgICBkZWxldGUgcmVxdWVzdEN0eC5jYjtcblxuICAgICAgLy8gTmFtZSBvZiB0aGUgYXBwcm9wcmlhdGUgc29ja2V0LmlvIGxpc3RlbmVyIG9uIHRoZSBzZXJ2ZXJcbiAgICAgIC8vICggPT09IHRoZSByZXF1ZXN0IG1ldGhvZCBvciBcInZlcmJcIiwgZS5nLiAnZ2V0JywgJ3Bvc3QnLCAncHV0JywgZXRjLiApXG4gICAgICB2YXIgc2FpbHNFbmRwb2ludCA9IHJlcXVlc3RDdHgubWV0aG9kO1xuXG4gICAgICBzb2NrZXQuX3Jhdy5lbWl0KHNhaWxzRW5kcG9pbnQsIHJlcXVlc3RDdHgsIGZ1bmN0aW9uIHNlcnZlclJlc3BvbmRlZChyZXNwb25zZUN0eCkge1xuXG4gICAgICAgIC8vIFNlbmQgYmFjayAoZW11bGF0ZWRIVFRQQm9keSwganNvbldlYlNvY2tldFJlc3BvbnNlKVxuICAgICAgICBpZiAoY2IgJiYgIXJlcXVlc3RDdHguY2FsbGVkQ2IpIHtcbiAgICAgICAgICBjYihyZXNwb25zZUN0eC5ib2R5LCBuZXcgSldSKHJlc3BvbnNlQ3R4KSk7XG4gICAgICAgICAgLy8gU2V0IGZsYWcgaW5kaWNhdGluZyB0aGF0IGNhbGxiYWNrIHdhcyBjYWxsZWQsIHRvIGF2b2lkIGR1cGxpY2F0ZSBjYWxscy5cbiAgICAgICAgICByZXF1ZXN0Q3R4LmNhbGxlZENiID0gdHJ1ZTtcbiAgICAgICAgICAvLyBSZW1vdmUgdGhlIGNhbGxiYWNrIGZyb20gdGhlIGxpc3QuXG4gICAgICAgICAgc29ja2V0Ll9yZXNwb25zZUNicy5zcGxpY2Uoc29ja2V0Ll9yZXNwb25zZUNicy5pbmRleE9mKGNiKSwgMSk7XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBjb250ZXh0IGZyb20gdGhlIGxpc3QuXG4gICAgICAgICAgc29ja2V0Ll9yZXF1ZXN0Q3R4cy5zcGxpY2Uoc29ja2V0Ll9yZXF1ZXN0Q3R4cy5pbmRleE9mKHJlcXVlc3RDdHgpLCAxKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG5cblxuXG5cblxuXG4gICAgLy8gIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilZcg4paI4paI4pWX4paI4paI4pWXICAgICDilojilojilojilojilojilojilojilZfilojilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4pWXICDilojilojilojilojilojilojilZfilojilojilZcgIOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl1xuICAgIC8vICDilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilojilojilZfilojilojilZHilojilojilZEgICAgIOKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVkSDilojilojilZTilZ3ilojilojilZTilZDilZDilZDilZDilZ3ilZrilZDilZDilojilojilZTilZDilZDilZ1cbiAgICAvLyAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4pWR4paI4paI4pWRICAgICDilojilojilojilojilojilojilojilZfilojilojilojilojilojilojilojilZfilojilojilZEgICDilojilojilZHilojilojilZEgICAgIOKWiOKWiOKWiOKWiOKWiOKVlOKVnSDilojilojilojilojilojilZcgICAgIOKWiOKWiOKVkVxuICAgIC8vICDilZrilZDilZDilZDilZDilojilojilZHilojilojilZTilZDilZDilojilojilZHilojilojilZHilojilojilZEgICAgIOKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkeKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKVkSAgICAg4paI4paI4pWU4pWQ4paI4paI4pWXIOKWiOKWiOKVlOKVkOKVkOKVnSAgICAg4paI4paI4pWRXG4gICAgLy8gIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWR4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4paI4paI4paI4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4pWa4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICDilojilojilZfilojilojilojilojilojilojilojilZcgICDilojilojilZFcbiAgICAvLyAg4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdICDilZrilZDilZDilZDilZDilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVnSAgIOKVmuKVkOKVnVxuICAgIC8vXG5cbiAgICAvKipcbiAgICAgKiBTYWlsc1NvY2tldFxuICAgICAqXG4gICAgICogQSB3cmFwcGVyIGZvciBhbiB1bmRlcmx5aW5nIFNvY2tldCBpbnN0YW5jZSB0aGF0IGNvbW11bmljYXRlcyBkaXJlY3RseVxuICAgICAqIHRvIHRoZSBTb2NrZXQuaW8gc2VydmVyIHJ1bm5pbmcgaW5zaWRlIG9mIFNhaWxzLlxuICAgICAqXG4gICAgICogSWYgbm8gYHNvY2tldGAgb3B0aW9uIGlzIHByb3ZpZWQsIFNhaWxzU29ja2V0IHdpbGwgZnVuY3Rpb24gYXMgYSBtb2NrLiBJdCB3aWxsIHF1ZXVlIHNvY2tldFxuICAgICAqIHJlcXVlc3RzIGFuZCBldmVudCBoYW5kbGVyIGJpbmRpbmdzLCByZXBsYXlpbmcgdGhlbSB3aGVuIHRoZSByYXcgdW5kZXJseWluZyBzb2NrZXQgYWN0dWFsbHlcbiAgICAgKiBjb25uZWN0cy4gVGhpcyBpcyBoYW5keSB3aGVuIHdlIGRvbid0IG5lY2Vzc2FyaWx5IGhhdmUgdGhlIHZhbGlkIGNvbmZpZ3VyYXRpb24gdG8ga25vd1xuICAgICAqIFdISUNIIFNFUlZFUiB0byB0YWxrIHRvIHlldCwgZXRjLiAgSXQgaXMgYWxzbyB1c2VkIGJ5IGBpby5zb2NrZXRgIGZvciB5b3VyIGNvbnZlbmllbmNlLlxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICpcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogTm90ZTogVGhpcyBjb25zdHJ1Y3RvciBzaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHkuIFRvIG9idGFpbiBhIGBTYWlsc1NvY2tldGBcbiAgICAgKiBpbnN0YW5jZSBvZiB5b3VyIHZlcnkgb3duLCBydW46XG4gICAgICogYGBgXG4gICAgICogdmFyIG15U29ja2V0ID0gaW8uc2FpbHMuY29ubmVjdCgpO1xuICAgICAqIGBgYFxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTYWlsc1NvY2tldCAob3B0cyl7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBvcHRzID0gb3B0c3x8e307XG5cbiAgICAgIC8vIEluaXRpYWxpemUgcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICBzZWxmLl9pc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgIHNlbGYuX21pZ2h0QmVBYm91dFRvQXV0b0Nvbm5lY3QgPSBmYWxzZTtcblxuICAgICAgLy8gU2V0IHVwIGNvbm5lY3Rpb24gb3B0aW9ucyBzbyB0aGF0IHRoZXkgY2FuIG9ubHkgYmUgY2hhbmdlZCB3aGVuIHNvY2tldCBpcyBkaXNjb25uZWN0ZWQuXG4gICAgICB2YXIgX29wdHMgPSB7fTtcbiAgICAgIFNPQ0tFVF9PUFRJT05TLmZvckVhY2goZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgIC8vIE9rYXkgdG8gY2hhbmdlIGdsb2JhbCBoZWFkZXJzIHdoaWxlIHNvY2tldCBpcyBjb25uZWN0ZWRcbiAgICAgICAgaWYgKG9wdGlvbiA9PSAnaGVhZGVycycpIHtyZXR1cm47fVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgb3B0aW9uLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb24gPT0gJ3VybCcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9vcHRzW29wdGlvbl0gfHwgKHNlbGYuX3JhdyAmJiBzZWxmLl9yYXcuaW8gJiYgc2VsZi5fcmF3LmlvLnVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX29wdHNbb3B0aW9uXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIC8vIERvbid0IGFsbG93IHZhbHVlIHRvIGJlIGNoYW5nZWQgd2hpbGUgc29ja2V0IGlzIGNvbm5lY3RlZFxuICAgICAgICAgICAgaWYgKHNlbGYuaXNDb25uZWN0ZWQoKSAmJiBpby5zYWlscy5zdHJpY3QgIT09IGZhbHNlICYmIHZhbHVlICE9IF9vcHRzW29wdGlvbl0pIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY2hhbmdlIHZhbHVlIG9mIGAnICsgb3B0aW9uICsgJ2Agd2hpbGUgc29ja2V0IGlzIGNvbm5lY3RlZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHNvY2tldCBpcyBhdHRlbXB0aW5nIHRvIHJlY29ubmVjdCwgc3RvcCBpdC5cbiAgICAgICAgICAgIGlmIChzZWxmLl9yYXcgJiYgc2VsZi5fcmF3LmlvICYmIHNlbGYuX3Jhdy5pby5yZWNvbm5lY3RpbmcgJiYgIXNlbGYuX3Jhdy5pby5za2lwUmVjb25uZWN0KSB7XG4gICAgICAgICAgICAgIHNlbGYuX3Jhdy5pby5za2lwUmVjb25uZWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29uc29sb2coJ1N0b3BwaW5nIHJlY29ubmVjdDsgdXNlIC5yZWNvbm5lY3QoKSB0byBjb25uZWN0IHNvY2tldCBhZnRlciBjaGFuZ2luZyBvcHRpb25zLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX29wdHNbb3B0aW9uXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQWJzb3JiIG9wdHMgaW50byBTYWlsc1NvY2tldCBpbnN0YW5jZVxuICAgICAgLy8gU2VlIGh0dHA6Ly9zYWlsc2pzLmNvbS9kb2N1bWVudGF0aW9uL3JlZmVyZW5jZS93ZWItc29ja2V0cy9zb2NrZXQtY2xpZW50L3NhaWxzLXNvY2tldC9wcm9wZXJ0aWVzXG4gICAgICAvLyBmb3IgZGVzY3JpcHRpb24gb2Ygb3B0aW9uc1xuICAgICAgU09DS0VUX09QVElPTlMuZm9yRWFjaChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgc2VsZltvcHRpb25dID0gb3B0c1tvcHRpb25dO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNldCB1cCBcImV2ZW50UXVldWVcIiB0byBob2xkIGV2ZW50IGhhbmRsZXJzIHdoaWNoIGhhdmUgbm90IGJlZW4gc2V0IG9uIHRoZSBhY3R1YWwgcmF3IHNvY2tldCB5ZXQuXG4gICAgICBzZWxmLmV2ZW50UXVldWUgPSB7fTtcblxuICAgICAgLy8gTGlzdGVuIGZvciBzcGVjaWFsIGBwYXJzZUVycm9yYCBldmVudCBzZW50IGZyb20gc29ja2V0cyBob29rIG9uIHRoZSBiYWNrZW5kXG4gICAgICAvLyBpZiBhbiBlcnJvciBvY2N1cnMgYnV0IGEgdmFsaWQgY2FsbGJhY2sgd2FzIG5vdCByZWNlaXZlZCBmcm9tIHRoZSBjbGllbnRcbiAgICAgIC8vIChpLmUuIHNvIHRoZSBzZXJ2ZXIgaGFkIG5vIG90aGVyIHdheSB0byBzZW5kIGJhY2sgdGhlIGVycm9yIGluZm9ybWF0aW9uKVxuICAgICAgc2VsZi5vbignc2FpbHM6cGFyc2VFcnJvcicsIGZ1bmN0aW9uIChlcnIpe1xuICAgICAgICBjb25zb2xvZygnU2FpbHMgZW5jb3VudGVyZWQgYW4gZXJyb3IgcGFyc2luZyBhIHNvY2tldCBtZXNzYWdlIHNlbnQgZnJvbSB0aGlzIGNsaWVudCwgYW5kIGRpZCBub3QgaGF2ZSBhY2Nlc3MgdG8gYSBjYWxsYmFjayBmdW5jdGlvbiB0byByZXNwb25kIHdpdGguJyk7XG4gICAgICAgIGNvbnNvbG9nKCdFcnJvciBkZXRhaWxzOicsZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBGVVRVUkU6XG4gICAgICAvLyBMaXN0ZW4gZm9yIGEgc3BlY2lhbCBwcml2YXRlIG1lc3NhZ2Ugb24gYW55IGNvbm5lY3RlZCB0aGF0IGFsbG93cyB0aGUgc2VydmVyXG4gICAgICAvLyB0byBzZXQgdGhlIGVudmlyb25tZW50IChnaXZpbmcgdXMgMTAwJSBjZXJ0YWludHkgdGhhdCB3ZSBndWVzc2VkIHJpZ2h0KVxuICAgICAgLy8gSG93ZXZlciwgbm90ZSB0aGF0IHRoZSBgY29uc29sZS5sb2dgcyBjYWxsZWQgYmVmb3JlIGFuZCBhZnRlciBjb25uZWN0aW9uXG4gICAgICAvLyBhcmUgc3RpbGwgZm9yY2VkIHRvIHJlbHkgb24gb3VyIGV4aXN0aW5nIGhldXJpc3RpY3MgKHRvIGRpc2FibGUsIHRhY2sgI3Byb2R1Y3Rpb25cbiAgICAgIC8vIG9udG8gdGhlIFVSTCB1c2VkIHRvIGZldGNoIHRoaXMgZmlsZS4pXG5cbiAgICB9Ly88L1NhaWxzU29ja2V0PlxuXG5cbiAgICAvKipcbiAgICAgKiBgU2FpbHNTb2NrZXQucHJvdG90eXBlLl9jb25uZWN0KClgXG4gICAgICpcbiAgICAgKiBCZWdpbiBjb25uZWN0aW5nIHRoaXMgc29ja2V0IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBTYWlsc1NvY2tldC5wcm90b3R5cGUuX2Nvbm5lY3QgPSBmdW5jdGlvbiAoKXtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgc2VsZi5faXNDb25uZWN0aW5nID0gdHJ1ZTtcblxuICAgICAgLy8gQXBwbHkgYGlvLnNhaWxzYCBjb25maWcgYXMgZGVmYXVsdHNcbiAgICAgIC8vIChub3cgdGhhdCBhdCBsZWFzdCBvbmUgdGljayBoYXMgZWxhcHNlZClcbiAgICAgIC8vIFNlZSBodHRwOi8vc2FpbHNqcy5jb20vZG9jdW1lbnRhdGlvbi9yZWZlcmVuY2Uvd2ViLXNvY2tldHMvc29ja2V0LWNsaWVudC9zYWlscy1zb2NrZXQvcHJvcGVydGllc1xuICAgICAgLy8gZm9yIGRlc2NyaXB0aW9uIG9mIG9wdGlvbnMgYW5kIGRlZmF1bHQgdmFsdWVzXG4gICAgICBTT0NLRVRfT1BUSU9OUy5mb3JFYWNoKGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICBpZiAoJ3VuZGVmaW5lZCcgPT0gdHlwZW9mIHNlbGZbb3B0aW9uXSkge1xuICAgICAgICAgIHNlbGZbb3B0aW9uXSA9IGlvLnNhaWxzW29wdGlvbl07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBIZWFkZXJzIHRoYXQgd2lsbCBiZSBzZW50IHdpdGggdGhlIGluaXRpYWwgcmVxdWVzdCB0byAvc29ja2V0LmlvIChOb2RlLmpzIG9ubHkpXG4gICAgICBzZWxmLmV4dHJhSGVhZGVycyA9IHNlbGYuaW5pdGlhbENvbm5lY3Rpb25IZWFkZXJzIHx8IHt9O1xuXG4gICAgICAvLyBGb3IgYnJvd3NlciB1c2FnZSAoY3VycmVudGx5IHdvcmtzIHdpdGggXCJwb2xsaW5nXCIgdHJhbnNwb3J0IG9ubHkpXG4gICAgICBzZWxmLnRyYW5zcG9ydE9wdGlvbnMgPSBzZWxmLnRyYW5zcG9ydE9wdGlvbnMgfHwge307XG4gICAgICBzZWxmLnRyYW5zcG9ydHMuZm9yRWFjaChmdW5jdGlvbih0cmFuc3BvcnQpIHtcbiAgICAgICAgc2VsZi50cmFuc3BvcnRPcHRpb25zW3RyYW5zcG9ydF0gPSBzZWxmLnRyYW5zcG9ydE9wdGlvbnNbdHJhbnNwb3J0XSB8fCB7fTtcbiAgICAgICAgc2VsZi50cmFuc3BvcnRPcHRpb25zW3RyYW5zcG9ydF0uZXh0cmFIZWFkZXJzID0gc2VsZi5pbml0aWFsQ29ubmVjdGlvbkhlYWRlcnMgfHwge307XG4gICAgICB9KTtcblxuICAgICAgLy8gTG9nIGEgd2FybmluZyBpZiBub24tTm9kZS5qcyBwbGF0Zm9ybSBhdHRlbXB0cyB0byB1c2UgYGluaXRpYWxDb25uZWN0aW9uSGVhZGVyc2AgZm9yIGFueXRoaW5nIG90aGVyIHRoYW4gYHBvbGxpbmdgLlxuICAgICAgaWYgKHNlbGYuaW5pdGlhbENvbm5lY3Rpb25IZWFkZXJzICYmIFNES19JTkZPLnBsYXRmb3JtICE9PSAnbm9kZScgJiYgc2VsZi50cmFuc3BvcnRzLmluZGV4T2YoJ3BvbGxpbmcnKSA9PT0gLTEgfHwgc2VsZi50cmFuc3BvcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgY29uc29sZS53YXJuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdXaGVuIHJ1bm5pbmcgaW4gYnJvd3NlciwgYGluaXRpYWxDb25uZWN0aW9uSGVhZGVyc2Agb3B0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIGZvciB0aGUgYHBvbGxpbmdgIHRyYW5zcG9ydC4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBFbnN1cmUgVVJMIGhhcyBubyB0cmFpbGluZyBzbGFzaFxuICAgICAgc2VsZi51cmwgPSBzZWxmLnVybCA/IHNlbGYudXJsLnJlcGxhY2UoLyhcXC8pJC8sICcnKSA6IHVuZGVmaW5lZDtcblxuICAgICAgLy8gTWl4IHRoZSBjdXJyZW50IFNESyB2ZXJzaW9uIGludG8gdGhlIHF1ZXJ5IHN0cmluZyBpblxuICAgICAgLy8gdGhlIGNvbm5lY3Rpb24gcmVxdWVzdCB0byB0aGUgc2VydmVyOlxuICAgICAgaWYgKHR5cGVvZiBzZWxmLnF1ZXJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyAoSWYgcHJvdmlkZWQgYXMgYSBzdHJpbmcsIHRyaW0gbGVhZGluZyBxdWVzdGlvbiBtYXJrLFxuICAgICAgICAvLyBqdXN0IGluIGNhc2Ugb25lIHdhcyBwcm92aWRlZC4pXG4gICAgICAgIHNlbGYucXVlcnkgPSBzZWxmLnF1ZXJ5LnJlcGxhY2UoL15cXD8vLCAnJyk7XG4gICAgICAgIHNlbGYucXVlcnkgKz0gJyYnICsgU0RLX0lORk8udmVyc2lvblN0cmluZztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHNlbGYucXVlcnkgJiYgdHlwZW9mIHNlbGYucXVlcnkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYHF1ZXJ5YCBzZXR0aW5nIGRvZXMgbm90IGN1cnJlbnRseSBzdXBwb3J0IGNvbmZpZ3VyYXRpb24gYXMgYSBkaWN0aW9uYXJ5IChge31gKS4gIEluc3RlYWQsIGl0IG11c3QgYmUgc3BlY2lmaWVkIGFzIGEgc3RyaW5nIGxpa2UgYGZvbz04OSZiYXI9aGlgJyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghc2VsZi5xdWVyeSkge1xuICAgICAgICBzZWxmLnF1ZXJ5ID0gU0RLX0lORk8udmVyc2lvblN0cmluZztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZGF0YSB0eXBlIHByb3ZpZGVkIGZvciBgcXVlcnlgIHNldHRpbmc6ICcrc2VsZi5xdWVyeSk7XG4gICAgICB9XG5cbiAgICAgIC8vIERldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBjcm9zcy1vcmlnaW4gc29ja2V0IGJ5IGV4YW1pbmluZyB0aGVcbiAgICAgIC8vIGhvc3RuYW1lIGFuZCBwb3J0IG9uIHRoZSBgd2luZG93LmxvY2F0aW9uYCBvYmplY3QuICBJZiBpdCdzIGNyb3NzLW9yaWdpbixcbiAgICAgIC8vIHdlJ2xsIGF0dGVtcHQgdG8gZ2V0IGEgY29va2llIGZvciB0aGUgZG9tYWluIHNvIHRoYXQgYSBTYWlscyBzZXNzaW9uIGNhblxuICAgICAgLy8gYmUgZXN0YWJsaXNoZWQuXG4gICAgICB2YXIgaXNYT3JpZ2luID0gKGZ1bmN0aW9uICgpe1xuXG4gICAgICAgIC8vIElmIGB3aW5kb3dgIGRvZXNuJ3QgZXhpc3QgKGkuZS4gYmVpbmcgdXNlZCBmcm9tIE5vZGUuanMpLCB0aGVuXG4gICAgICAgIC8vIHdlIHdvbid0IGJvdGhlciBhdHRlbXB0aW5nIHRvIGdldCBhIGNvb2tpZS4gIElmIHlvdSdyZSB1c2luZyBzb2NrZXRzXG4gICAgICAgIC8vIGZyb20gTm9kZS5qcyBhbmQgZmluZCB5b3UgbmVlZCB0byBzaGFyZSBhIHNlc3Npb24gYmV0d2VlbiBtdWx0aXBsZVxuICAgICAgICAvLyBzb2NrZXQgY29ubmVjdGlvbnMsIHlvdSdsbCBuZWVkIHRvIG1ha2UgYW4gSFRUUCByZXF1ZXN0IHRvIHRoZSAvX19nZXRjb29raWVcbiAgICAgICAgLy8gZW5kcG9pbnQgb2YgdGhlIFNhaWxzIHNlcnZlciAob3IgYW55IGVuZHBvaW50IHRoYXQgcmV0dXJucyBhIHNldC1jb29raWUgaGVhZGVyKVxuICAgICAgICAvLyBhbmQgdGhlbiB1c2UgdGhlIGNvb2tpZSB2YWx1ZSBpbiB0aGUgYGluaXRpYWxDb25uZWN0aW9uSGVhZGVyc2Agb3B0aW9uIHRvXG4gICAgICAgIC8vIGlvLnNhaWxzLmNvbm5lY3QoKVxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHdpbmRvdy5sb2NhdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBgc2VsZi51cmxgIChha2EgXCJ0YXJnZXRcIikgaXMgZmFsc3ksIHRoZW4gd2UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCBpdC5cbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmLnVybCAhPT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgLy8gR2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBcInRhcmdldFwiIChgc2VsZi51cmxgKVxuICAgICAgICB2YXIgdGFyZ2V0UHJvdG9jb2wgPSAoZnVuY3Rpb24gKCl7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRhcmdldFByb3RvY29sID0gc2VsZi51cmwubWF0Y2goL14oW2Etel0rOlxcL1xcLykvaSlbMV0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgdGFyZ2V0UHJvdG9jb2wgPSB0YXJnZXRQcm90b2NvbCB8fCAnaHR0cDovLyc7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldFByb3RvY29sO1xuICAgICAgICB9KSgpO1xuICAgICAgICB2YXIgaXNUYXJnZXRTU0wgPSAhIXNlbGYudXJsLm1hdGNoKCdeaHR0cHMnKTtcbiAgICAgICAgdmFyIHRhcmdldFBvcnQgPSAoZnVuY3Rpb24gKCl7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnVybC5tYXRjaCgvXlthLXpdKzpcXC9cXC9bXjpdKjooWzAtOV0qKS9pKVsxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2F0Y2ggKGUpe31cbiAgICAgICAgICByZXR1cm4gaXNUYXJnZXRTU0wgPyAnNDQzJyA6ICc4MCc7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHZhciB0YXJnZXRBZnRlclByb3RvY29sID0gc2VsZi51cmwucmVwbGFjZSgvXihbYS16XSs6XFwvXFwvKS9pLCAnJyk7XG5cblxuICAgICAgICAvLyBJZiB0YXJnZXQgcHJvdG9jb2wgaXMgZGlmZmVyZW50IHRoYW4gdGhlIGFjdHVhbCBwcm90b2NvbCxcbiAgICAgICAgLy8gdGhlbiB3ZSdsbCBjb25zaWRlciB0aGlzIGNyb3NzLW9yaWdpbi5cbiAgICAgICAgaWYgKHRhcmdldFByb3RvY29sLnJlcGxhY2UoL1s6XFwvXS9nLCAnJykgIT09IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5yZXBsYWNlKC9bOlxcL10vZywnJykpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGhvc3RuYW1lIGlzIGRpZmZlcmVudCB0aGFuIGFjdHVhbCBob3N0bmFtZSwgd2UnbGwgY29uc2lkZXIgdGhpcyBjcm9zcy1vcmlnaW4uXG4gICAgICAgIHZhciBoYXNTYW1lSG9zdG5hbWUgPSB0YXJnZXRBZnRlclByb3RvY29sLnNlYXJjaCh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpID09PSAwO1xuICAgICAgICBpZiAoIWhhc1NhbWVIb3N0bmFtZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgbm8gYWN0dWFsIHBvcnQgaXMgZXhwbGljaXRseSBzZXQgb24gdGhlIGB3aW5kb3cubG9jYXRpb25gIG9iamVjdCxcbiAgICAgICAgLy8gd2UnbGwgYXNzdW1lIGVpdGhlciA4MCBvciA0NDMuXG4gICAgICAgIHZhciBpc0xvY2F0aW9uU1NMID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sLm1hdGNoKC9odHRwcy9pKTtcbiAgICAgICAgdmFyIGxvY2F0aW9uUG9ydCA9ICh3aW5kb3cubG9jYXRpb24ucG9ydCsnJykgfHwgKGlzTG9jYXRpb25TU0wgPyAnNDQzJyA6ICc4MCcpO1xuXG4gICAgICAgIC8vIEZpbmFsbHksIGlmIHBvcnRzIGRvbid0IG1hdGNoLCB3ZSdsbCBjb25zaWRlciB0aGlzIGNyb3NzLW9yaWdpbi5cbiAgICAgICAgaWYgKHRhcmdldFBvcnQgIT09IGxvY2F0aW9uUG9ydCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdCdzIHRoZSBzYW1lIG9yaWdpbi5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICB9KSgpO1xuXG5cbiAgICAgIC8vIFByZXBhcmUgdG8gc3RhcnQgY29ubmVjdGluZyB0aGUgc29ja2V0XG4gICAgICAoZnVuY3Rpb24gc2VsZkludm9raW5nIChjYil7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbiBhdHRlbXB0IGF0IGEgY3Jvc3Mtb3JpZ2luIG9yIGNyb3NzLXBvcnRcbiAgICAgICAgLy8gc29ja2V0IGNvbm5lY3Rpb24gdmlhIGEgYnJvd3N3ZSwgc2VuZCBhIEpTT05QIHJlcXVlc3RcbiAgICAgICAgLy8gZmlyc3QgdG8gZW5zdXJlIHRoYXQgYSB2YWxpZCBjb29raWUgaXMgYXZhaWxhYmxlLlxuICAgICAgICAvLyBUaGlzIGNhbiBiZSBkaXNhYmxlZCBieSBzZXR0aW5nIGBpby5zYWlscy51c2VDT1JTUm91dGVUb0dldENvb2tpZWBcbiAgICAgICAgLy8gdG8gZmFsc2UuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIE90aGVyd2lzZSwgc2tpcCB0aGUgc3R1ZmYgYmVsb3cuXG4gICAgICAgIC8vXG4gICAgICAgIGlmICghKHNlbGYudXNlQ09SU1JvdXRlVG9HZXRDb29raWUgJiYgaXNYT3JpZ2luKSkge1xuICAgICAgICAgIHJldHVybiBjYigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlndXJlIG91dCB0aGUgeC1vcmlnaW4gQ09SUyByb3V0ZVxuICAgICAgICAvLyAoU2FpbHMgcHJvdmlkZXMgYSBkZWZhdWx0KVxuICAgICAgICB2YXIgeE9yaWdpbkNvb2tpZVVSTCA9IHNlbGYudXJsO1xuICAgICAgICBpZiAodHlwZW9mIHNlbGYudXNlQ09SU1JvdXRlVG9HZXRDb29raWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgeE9yaWdpbkNvb2tpZVVSTCArPSBzZWxmLnVzZUNPUlNSb3V0ZVRvR2V0Q29va2llO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHhPcmlnaW5Db29raWVVUkwgKz0gJy9fX2dldGNvb2tpZSc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNYWtlIHRoZSBBSkFYIHJlcXVlc3QgKENPUlMpXG4gICAgICAgIGpzb25wKHtcbiAgICAgICAgICB1cmw6IHhPcmlnaW5Db29raWVVUkwsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgICAgICB9LCBjYik7XG5cbiAgICAgIH0pKGZ1bmN0aW9uIGdvQWhlYWRBbmRBY3R1YWxseUNvbm5lY3QoKSB7XG5cbiAgICAgICAgLy8gTm93IHRoYXQgd2UncmUgcmVhZHkgdG8gY29ubmVjdCwgY3JlYXRlIGEgcmF3IHVuZGVybHlpbmcgU29ja2V0XG4gICAgICAgIC8vIHVzaW5nIFNvY2tldC5pbyBhbmQgc2F2ZSBpdCBhcyBgX3Jhd2AgKHRoaXMgd2lsbCBzdGFydCBpdCBjb25uZWN0aW5nKVxuICAgICAgICBzZWxmLl9yYXcgPSBpbyhzZWxmLnVybCwgc2VsZik7XG5cbiAgICAgICAgLy8gSWYgdGhlIGxvdy1sZXZlbCB0cmFuc3BvcnQgdGhyb3dzIGFuIGVycm9yIF93aGlsZSBjb25uZWN0aW5nXywgdGhlbiBzZXQgdGhlIF9pc0Nvbm5lY3RpbmcgZmxhZ1xuICAgICAgICAvLyB0byBmYWxzZSAoc2luY2Ugd2UncmUgbm8gbG9uZ2VyIGNvbm5lY3Rpbmcgd2l0aCBhbnkgY2hhbmNlIG9mIHN1Y2Nlc3MgYW55d2F5KS5cbiAgICAgICAgLy8gQWxzbywgaW4gdGhpcyBjYXNlIChhbmQgaW4gZGV2IG1vZGUgb25seSkgbG9nIGEgaGVscGZ1bCBtZXNzYWdlLlxuICAgICAgICBzZWxmLl9yYXcuaW8uZW5naW5lLnRyYW5zcG9ydC5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpe1xuICAgICAgICAgIGlmICghc2VsZi5faXNDb25uZWN0aW5nKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgc2VsZi5faXNDb25uZWN0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAvLyBUcmFjayB0aGlzIHRpbWVzdGFtcCBmb3IgdXNlIGluIHJlY29ubmVjdGlvbiBtZXNzYWdlc1xuICAgICAgICAgIC8vIChvbmx5IHJlbGV2YW50IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkLilcbiAgICAgICAgICBzZWxmLmNvbm5lY3Rpb25FcnJvclRpbWVzdGFtcCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cbiAgICAgICAgICAvLyBEZXZlbG9wbWVudC1vbmx5IG1lc3NhZ2U6XG4gICAgICAgICAgY29uc29sb2coJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpO1xuICAgICAgICAgIGNvbnNvbG9nKCdUaGUgc29ja2V0IHdhcyB1bmFibGUgdG8gY29ubmVjdC4nKTtcbiAgICAgICAgICBjb25zb2xvZygnVGhlIHNlcnZlciBtYXkgYmUgb2ZmbGluZSwgb3IgdGhlJyk7XG4gICAgICAgICAgY29uc29sb2coJ3NvY2tldCBtYXkgaGF2ZSBmYWlsZWQgYXV0aG9yaXphdGlvbicpO1xuICAgICAgICAgIGNvbnNvbG9nKCdiYXNlZCBvbiBpdHMgb3JpZ2luIG9yIG90aGVyIGZhY3RvcnMuJyk7XG4gICAgICAgICAgY29uc29sb2coJ1lvdSBtYXkgd2FudCB0byBjaGVjayB0aGUgdmFsdWVzIG9mJyk7XG4gICAgICAgICAgY29uc29sb2coJ2BzYWlscy5jb25maWcuc29ja2V0cy5vbmx5QWxsb3dPcmlnaW5zYCcpO1xuICAgICAgICAgIGNvbnNvbG9nKCdvciAobW9yZSByYXJlbHkpIGBzYWlscy5jb25maWcuc29ja2V0cy5iZWZvcmVDb25uZWN0YCcpO1xuICAgICAgICAgIGNvbnNvbG9nKCdpbiB5b3VyIGFwcC4nKTtcbiAgICAgICAgICBjb25zb2xvZygnTW9yZSBpbmZvOiBodHRwczovL3NhaWxzanMuY29tL2NvbmZpZy9zb2NrZXRzJyk7XG4gICAgICAgICAgY29uc29sb2coJ0ZvciBoZWxwOiBodHRwczovL3NhaWxzanMuY29tL3N1cHBvcnQnKTtcbiAgICAgICAgICBjb25zb2xvZygnJyk7XG4gICAgICAgICAgY29uc29sb2coJ1RlY2huaWNhbCBkZXRhaWxzOicpO1xuICAgICAgICAgIGNvbnNvbG9nKGVycik7XG4gICAgICAgICAgY29uc29sb2coJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBSZXBsYXkgZXZlbnQgYmluZGluZ3MgZnJvbSB0aGUgZWFnZXIgc29ja2V0XG4gICAgICAgIHNlbGYucmVwbGF5KCk7XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogJ2Nvbm5lY3QnIGV2ZW50IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBzb2NrZXQgZXN0YWJsaXNoZXMgYSBjb25uZWN0aW9uXG4gICAgICAgICAqICBzdWNjZXNzZnVsbHkuXG4gICAgICAgICAqL1xuICAgICAgICBzZWxmLm9uKCdjb25uZWN0JywgZnVuY3Rpb24gc29ja2V0Q29ubmVjdGVkKCkge1xuICAgICAgICAgIHNlbGYuX2lzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgIGNvbnNvbG9nLm5vUHJlZml4KFxuICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgLy8gJyAgICB8PiAgICAnICsgJ1xcbicgK1xuICAgICAgICAgICAgLy8gJyAgXFxcXF9fXy8gICcr77iPXG4gICAgICAgICAgICAvLyAnXFxuJytcbiAgICAgICAgICAgICAnICB8PiAgICBOb3cgY29ubmVjdGVkIHRvICcrKHNlbGYudXJsID8gc2VsZi51cmwgOiAnU2FpbHMnKSsnLicgKyAnXFxuJyArXG4gICAgICAgICAgICAnXFxcXF9fXy8gICBGb3IgaGVscCwgc2VlOiBodHRwOi8vYml0Lmx5LzJxMFFEcGYnICsgJ1xcbicgK1xuICAgICAgICAgICAgICcgICAgICAgICh1c2luZyBzYWlscy5pby5qcyAnK2lvLnNhaWxzLnNkay5wbGF0Zm9ybSsnIFNESyBAdicraW8uc2FpbHMuc2RrLnZlcnNpb24rJyknKyAnXFxuJyArXG4gICAgICAgICAgICAnICAgICAgICAgQ29ubmVjdGVkIGF0OiAnKyhuZXcgRGF0ZSgpKSsnXFxuJytcbiAgICAgICAgICAgICdcXG4nK1xuICAgICAgICAgICAgJ1xcbicrXG4gICAgICAgICAgICAvLyAnXFxuJytcbiAgICAgICAgICAgICcnXG4gICAgICAgICAgICAvLyAnIOKak++4jiAoZGV2ZWxvcG1lbnQgbW9kZSknXG4gICAgICAgICAgICAvLyAnZS5nLiB0byBzZW5kIGEgR0VUIHJlcXVlc3QgdG8gU2FpbHMgdmlhIFdlYlNvY2tldHMsIHJ1bjonKyAnXFxuJyArXG4gICAgICAgICAgICAvLyAnYGlvLnNvY2tldC5nZXQoXCIvZm9vXCIsIGZ1bmN0aW9uIHNlcnZlclJlc3BvbmRlZFdpdGggKGJvZHksIGp3cikgeyBjb25zb2xlLmxvZyhib2R5KTsgfSlgJysgJ1xcbicgK1xuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGYub24oJ2Rpc2Nvbm5lY3QnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgIC8vIEdldCBhIHRpbWVzdGFtcCBvZiB3aGVuIHRoZSBkaXNjb25uZWN0IHdhcyBkZXRlY3RlZC5cbiAgICAgICAgICBzZWxmLmNvbm5lY3Rpb25Mb3N0VGltZXN0YW1wID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcblxuICAgICAgICAgIC8vIEdldCBhIHNoYWxsb3cgY2xvbmUgb2YgdGhlIGludGVybmFsIGFycmF5IG9mIHJlc3BvbnNlIGNhbGxiYWNrcywgaW4gY2FzZSBhbnkgb2YgdGhlIGNhbGxiYWNrcyBtdXRhdGUgaXQuXG4gICAgICAgICAgdmFyIHJlc3BvbnNlQ2JzID0gW10uY29uY2F0KHNlbGYuX3Jlc3BvbnNlQ2JzIHx8IFtdKTtcbiAgICAgICAgICAvLyBXaXBlIHRoZSBpbnRlcm5hbCBhcnJheSBvZiByZXNwb25zZSBjYWxsYmFja3MgYmVmb3JlIGV4ZWN1dGluZyB0aGVtLCBpbiBjYXNlIGEgY2FsbGJhY2sgaGFwcGVucyB0byBhZGRcbiAgICAgICAgICAvLyBhIG5ldyByZXF1ZXN0IHRvIHRoZSBxdWV1ZS5cbiAgICAgICAgICBzZWxmLl9yZXNwb25zZUNicyA9IFtdO1xuXG4gICAgICAgICAgLy8gRG8gdGhlIHNhbWUgZm9yIHRoZSBpbnRlcm5hbCByZXF1ZXN0IGNvbnRleHQgbGlzdC5cbiAgICAgICAgICB2YXIgcmVxdWVzdEN0eHMgPSBbXS5jb25jYXQoc2VsZi5fcmVxdWVzdEN0eHMgfHwgW10pO1xuICAgICAgICAgIHNlbGYuX3JlcXVlc3RDdHhzID0gW107XG5cbiAgICAgICAgICAvLyBMb29wIHRocm91Z2ggdGhlIGNhbGxiYWNrcyBmb3IgYWxsIGluLXByb2dyZXNzIHJlcXVlc3RzLCBhbmQgY2FsbCB0aGVtIGVhY2ggd2l0aCBhbiBlcnJvciBpbmRpY2F0aW5nIHRoZSBkaXNjb25uZWN0LlxuICAgICAgICAgIGlmIChyZXNwb25zZUNicy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlQ2JzLmZvckVhY2goZnVuY3Rpb24ocmVzcG9uc2VDYikge1xuICAgICAgICAgICAgICByZXNwb25zZUNiKG5ldyBFcnJvcignVGhlIHNvY2tldCBkaXNjb25uZWN0ZWQgYmVmb3JlIHRoZSByZXF1ZXN0IGNvbXBsZXRlZC4nKSwge1xuICAgICAgICAgICAgICAgIGJvZHk6IG51bGwsXG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogMCxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7fVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGEgbGlzdCBvZiByZXF1ZXN0IGNvbnRleHRzLCBpbmRpY2F0ZSB0aGF0IHRoZWlyIGNhbGxiYWNrcyBoYXZlIGJlZW5cbiAgICAgICAgICAvLyBjYWxsZWQgYW5kIHRoZW4gd2lwZSB0aGUgbGlzdC4gIFRoaXMgcHJldmVudHMgZXJyb3JzIGluIHRoZSBlZGdlIGNhc2Ugb2YgYSByZXNwb25zZVxuICAgICAgICAgIC8vIHNvbWVob3cgY29taW5nIGJhY2sgYWZ0ZXIgdGhlIHNvY2tldCByZWNvbm5lY3RzLlxuICAgICAgICAgIGlmIChyZXF1ZXN0Q3R4cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlcXVlc3RDdHhzLmZvckVhY2goZnVuY3Rpb24ocmVxdWVzdEN0eCkge1xuICAgICAgICAgICAgICByZXF1ZXN0Q3R4LmNhbGxlZENiID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnNvbG9nKCc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKTtcbiAgICAgICAgICBjb25zb2xvZygnU29ja2V0IHdhcyBkaXNjb25uZWN0ZWQgZnJvbSBTYWlscy4nKTtcbiAgICAgICAgICBjb25zb2xvZygnVXN1YWxseSwgdGhpcyBpcyBkdWUgdG8gb25lIG9mIHRoZSBmb2xsb3dpbmcgcmVhc29uczonICsgJ1xcbicgK1xuICAgICAgICAgICAgJyAtPiB0aGUgc2VydmVyICcgKyAoc2VsZi51cmwgPyBzZWxmLnVybCArICcgJyA6ICcnKSArICd3YXMgdGFrZW4gZG93bicgKyAnXFxuJyArXG4gICAgICAgICAgICAnIC0+IHlvdXIgYnJvd3NlciBsb3N0IGludGVybmV0IGNvbm5lY3Rpdml0eScpO1xuICAgICAgICAgIGNvbnNvbG9nKCc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2VsZi5vbigncmVjb25uZWN0aW5nJywgZnVuY3Rpb24obnVtQXR0ZW1wdHMpIHtcbiAgICAgICAgICBjb25zb2xvZyhcbiAgICAgICAgICAgICdcXG4nK1xuICAgICAgICAgICAgJyAgICAgICAgU29ja2V0IGlzIHRyeWluZyB0byByZWNvbm5lY3QgdG8gJysoc2VsZi51cmwgPyBzZWxmLnVybCA6ICdTYWlscycpKycuLi5cXG4nK1xuICAgICAgICAgICAgJ18tfD5fLSAgKGF0dGVtcHQgIycgKyBudW1BdHRlbXB0cyArICcpJysnXFxuJytcbiAgICAgICAgICAgICdcXG4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2VsZi5vbigncmVjb25uZWN0JywgZnVuY3Rpb24odHJhbnNwb3J0LCBudW1BdHRlbXB0cykge1xuICAgICAgICAgIGlmICghc2VsZi5faXNDb25uZWN0aW5nKSB7XG4gICAgICAgICAgICBzZWxmLm9uKCdjb25uZWN0JywgcnVuUmVxdWVzdFF1ZXVlLmJpbmQoc2VsZiwgc2VsZikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtc1NpbmNlTGFzdE9mZmxpbmU7XG4gICAgICAgICAgdmFyIG51bVNlY3NPZmZsaW5lO1xuICAgICAgICAgIGlmIChzZWxmLmNvbm5lY3Rpb25Mb3N0VGltZXN0YW1wKXtcbiAgICAgICAgICAgIG1zU2luY2VMYXN0T2ZmbGluZSA9ICgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gc2VsZi5jb25uZWN0aW9uTG9zdFRpbWVzdGFtcCk7XG4gICAgICAgICAgICBudW1TZWNzT2ZmbGluZSA9IChtc1NpbmNlTGFzdE9mZmxpbmUgLyAxMDAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoc2VsZi5jb25uZWN0aW9uRXJyb3JUaW1lc3RhbXApIHtcbiAgICAgICAgICAgIG1zU2luY2VMYXN0T2ZmbGluZSA9ICgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gc2VsZi5jb25uZWN0aW9uRXJyb3JUaW1lc3RhbXApO1xuICAgICAgICAgICAgbnVtU2Vjc09mZmxpbmUgPSAobXNTaW5jZUxhc3RPZmZsaW5lIC8gMTAwMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbXNTaW5jZUxhc3RPZmZsaW5lID0gJz8/Pyc7XG4gICAgICAgICAgICBudW1TZWNzT2ZmbGluZSA9ICc/Pz8nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnNvbG9nKFxuICAgICAgICAgICAgJ1xcbicrXG4gICAgICAgICAgICAgJyAgfD4gICAgU29ja2V0IHJlY29ubmVjdGVkIHN1Y2Nlc3NmdWxseSBhZnRlcicrJ1xcbicrXG4gICAgICAgICAgICAnXFxcXF9fXy8gICBiZWluZyBvZmZsaW5lIGF0IGxlYXN0ICcgKyBudW1TZWNzT2ZmbGluZSArICcgc2Vjb25kcy4nKydcXG4nK1xuICAgICAgICAgICAgJ1xcbidcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyAnZXJyb3InIGV2ZW50IGlzIHRyaWdnZXJlZCBpZiBjb25uZWN0aW9uIGNhbiBub3QgYmUgZXN0YWJsaXNoZWQuXG4gICAgICAgIC8vICh1c3VhbGx5IGJlY2F1c2Ugb2YgYSBmYWlsZWQgYXV0aG9yaXphdGlvbiwgd2hpY2ggaXMgaW4gdHVyblxuICAgICAgICAvLyB1c3VhbGx5IGR1ZSB0byBhIG1pc3Npbmcgb3IgaW52YWxpZCBjb29raWUpXG4gICAgICAgIHNlbGYub24oJ2Vycm9yJywgZnVuY3Rpb24gZmFpbGVkVG9Db25uZWN0KGVycikge1xuICAgICAgICAgIHNlbGYuX2lzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgIC8vIE5vdGU6XG4gICAgICAgICAgLy8gSW4gdGhlIGZ1dHVyZSwgd2UgY291bGQgcHJvdmlkZSBhIHNlcGFyYXRlIGV2ZW50IGZvciB3aGVuIGEgc29ja2V0IGNhbm5vdCBjb25uZWN0XG4gICAgICAgICAgLy8gZHVlIHRvIGEgZmFpbGVkIGBiZWZvcmVDb25uZWN0YCAoYWthIFwiYXV0aG9yaXphdGlvblwiIGlmIHlvdSdyZSBvbGQgc2Nob29sKS5cbiAgICAgICAgICAvLyB0aGlzIGNvdWxkIHByb2JhYmx5IGJlIGltcGxlbWVudGVkIGJ5IGVtaXR0aW5nIGEgc3BlY2lhbCBldmVudCBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgICBjb25zb2xvZyhcbiAgICAgICAgICAgICdGYWlsZWQgdG8gY29ubmVjdCBzb2NrZXQgKHBvc3NpYmx5IGR1ZSB0byBmYWlsZWQgYGJlZm9yZUNvbm5lY3RgIG9uIHNlcnZlciknLFxuICAgICAgICAgICAgJ0Vycm9yOicsIGVyclxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVjb25uZWN0IHRoZSB1bmRlcmx5aW5nIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgU2FpbHNTb2NrZXQucHJvdG90eXBlLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpe1xuICAgICAgaWYgKHRoaXMuX2lzQ29ubmVjdGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb25uZWN0LSBzb2NrZXQgaXMgYWxyZWFkeSBjb25uZWN0aW5nJyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNvbm5lY3QtIHNvY2tldCBpcyBhbHJlYWR5IGNvbm5lY3RlZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3QoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdCB0aGUgdW5kZXJseWluZyBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIFNhaWxzU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCl7XG4gICAgICB0aGlzLl9pc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgIGlmICghdGhpcy5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRpc2Nvbm5lY3QtIHNvY2tldCBpcyBhbHJlYWR5IGRpc2Nvbm5lY3RlZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3Jhdy5kaXNjb25uZWN0KCk7XG4gICAgfTtcblxuXG5cbiAgICAvKipcbiAgICAgKiBpc0Nvbm5lY3RlZFxuICAgICAqXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGUgc29ja2V0IGlzIGNvbm5lY3RlZCBhbmQgYWJsZSB0b1xuICAgICAqICAgICAgICAgICAgICAgICAgIGNvbW11bmljYXRlIHcvIHRoZSBzZXJ2ZXIuXG4gICAgICovXG5cbiAgICBTYWlsc1NvY2tldC5wcm90b3R5cGUuaXNDb25uZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuX3Jhdykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhIXRoaXMuX3Jhdy5jb25uZWN0ZWQ7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogaXNDb25uZWN0aW5nXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoZSBzb2NrZXQgaXMgaW4gdGhlIHByb2Nlc3Mgb2YgY29ubmVjdGluZ1xuICAgICAqICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzZXJ2ZXIuXG4gICAgICovXG5cbiAgICBTYWlsc1NvY2tldC5wcm90b3R5cGUuaXNDb25uZWN0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzQ29ubmVjdGluZztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogaXNDb25uZWN0aW5nXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBmbGFnIHRoYXQgaXMgYHRydWVgIGFmdGVyIGEgU2FpbHNTb2NrZXQgaW5zdGFuY2UgaXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplZCBidXQgYmVmb3JlIG9uZSB0aWNrIG9mIHRoZSBldmVudCBsb29wXG4gICAgICogICAgICAgICAgICAgICAgICAgaGFzIHBhc3NlZCAoc28gdGhhdCBpdCBoYXNuJ3QgYXR0ZW1wdGVkIHRvIGNvbm5lY3RcbiAgICAgKiAgICAgICAgICAgICAgICAgICB5ZXQsIGlmIGF1dG9Db25uZWN0IGVuZHMgdXAgYmVpbmcgY29uZmlndXJlZCBgdHJ1ZWApXG4gICAgICovXG4gICAgU2FpbHNTb2NrZXQucHJvdG90eXBlLm1pZ2h0QmVBYm91dFRvQXV0b0Nvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9taWdodEJlQWJvdXRUb0F1dG9Db25uZWN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBbcmVwbGF5IGRlc2NyaXB0aW9uXVxuICAgICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIFNhaWxzU29ja2V0LnByb3RvdHlwZS5yZXBsYXkgPSBmdW5jdGlvbiAoKXtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gUGFzcyBldmVudHMgYW5kIGEgcmVmZXJlbmNlIHRvIHRoZSByZXF1ZXN0IHF1ZXVlXG4gICAgICAvLyBvZmYgdG8gdGhlIHNlbGYuX3JhdyBmb3IgY29uc3VtcHRpb25cbiAgICAgIGZvciAodmFyIGV2TmFtZSBpbiBzZWxmLmV2ZW50UXVldWUpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBzZWxmLmV2ZW50UXVldWVbZXZOYW1lXSkge1xuICAgICAgICAgIHNlbGYuX3Jhdy5vbihldk5hbWUsIHNlbGYuZXZlbnRRdWV1ZVtldk5hbWVdW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBCaW5kIGEgb25lLXRpbWUgZnVuY3Rpb24gdG8gcnVuIHRoZSByZXF1ZXN0IHF1ZXVlXG4gICAgICAvLyB3aGVuIHRoZSBzZWxmLl9yYXcgY29ubmVjdHMuXG4gICAgICBpZiAoICFzZWxmLmlzQ29ubmVjdGVkKCkgKSB7XG4gICAgICAgIHNlbGYuX3Jhdy5vbmNlKCdjb25uZWN0JywgcnVuUmVxdWVzdFF1ZXVlLmJpbmQoc2VsZiwgc2VsZikpO1xuICAgICAgfVxuICAgICAgLy8gT3IgcnVuIGl0IGltbWVkaWF0ZWx5IGlmIHNlbGYuX3JhdyBpcyBhbHJlYWR5IGNvbm5lY3RlZFxuICAgICAgZWxzZSB7XG4gICAgICAgIHJ1blJlcXVlc3RRdWV1ZShzZWxmKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogQ2hhaW5hYmxlIG1ldGhvZCB0byBiaW5kIGFuIGV2ZW50IHRvIHRoZSBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgZXZOYW1lIFtldmVudCBuYW1lXVxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgICAgW2V2ZW50IGhhbmRsZXIgZnVuY3Rpb25dXG4gICAgICogQHJldHVybiB7U2FpbHNTb2NrZXR9XG4gICAgICovXG4gICAgU2FpbHNTb2NrZXQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2TmFtZSwgZm4pe1xuXG4gICAgICAvLyBCaW5kIHRoZSBldmVudCB0byB0aGUgcmF3IHVuZGVybHlpbmcgc29ja2V0IGlmIHBvc3NpYmxlLlxuICAgICAgaWYgKHRoaXMuX3Jhdykge1xuICAgICAgICB0aGlzLl9yYXcub24oZXZOYW1lLCBmbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UgcXVldWUgdGhlIGV2ZW50IGJpbmRpbmcuXG4gICAgICBpZiAoIXRoaXMuZXZlbnRRdWV1ZVtldk5hbWVdKSB7XG4gICAgICAgIHRoaXMuZXZlbnRRdWV1ZVtldk5hbWVdID0gW2ZuXTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmV2ZW50UXVldWVbZXZOYW1lXS5wdXNoKGZuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYWluYWJsZSBtZXRob2QgdG8gdW5iaW5kIGFuIGV2ZW50IGZyb20gdGhlIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gICBldk5hbWUgW2V2ZW50IG5hbWVdXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGZuICAgICBbZXZlbnQgaGFuZGxlciBmdW5jdGlvbl1cbiAgICAgKiBAcmV0dXJuIHtTYWlsc1NvY2tldH1cbiAgICAgKi9cbiAgICBTYWlsc1NvY2tldC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGV2TmFtZSwgZm4pe1xuXG4gICAgICAvLyBCaW5kIHRoZSBldmVudCB0byB0aGUgcmF3IHVuZGVybHlpbmcgc29ja2V0IGlmIHBvc3NpYmxlLlxuICAgICAgaWYgKHRoaXMuX3Jhdykge1xuICAgICAgICB0aGlzLl9yYXcub2ZmKGV2TmFtZSwgZm4pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlIHF1ZXVlIHRoZSBldmVudCBiaW5kaW5nLlxuICAgICAgaWYgKHRoaXMuZXZlbnRRdWV1ZVtldk5hbWVdICYmIHRoaXMuZXZlbnRRdWV1ZVtldk5hbWVdLmluZGV4T2YoZm4pID4gLTEpIHtcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlW2V2TmFtZV0uc3BsaWNlKHRoaXMuZXZlbnRRdWV1ZVtldk5hbWVdLmluZGV4T2YoZm4pLCAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogQ2hhaW5hYmxlIG1ldGhvZCB0byB1bmJpbmQgYWxsIGV2ZW50cyBmcm9tIHRoZSBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTYWlsc1NvY2tldH1cbiAgICAgKi9cbiAgICBTYWlsc1NvY2tldC5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gKCl7XG5cbiAgICAgIC8vIEJpbmQgdGhlIGV2ZW50IHRvIHRoZSByYXcgdW5kZXJseWluZyBzb2NrZXQgaWYgcG9zc2libGUuXG4gICAgICBpZiAodGhpcy5fcmF3KSB7XG4gICAgICAgIHRoaXMuX3Jhdy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSBxdWV1ZSB0aGUgZXZlbnQgYmluZGluZy5cbiAgICAgIHRoaXMuZXZlbnRRdWV1ZSA9IHt9O1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2ltdWxhdGUgYSBHRVQgcmVxdWVzdCB0byBzYWlsc1xuICAgICAqIGUuZy5cbiAgICAgKiAgICBgc29ja2V0LmdldCgnL3VzZXIvMycsIFN0YXRzLnBvcHVsYXRlKWBcbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCAgICA6OiAgICBkZXN0aW5hdGlvbiBVUkxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAgIDo6ICAgIHBhcmFtZXRlcnMgdG8gc2VuZCB3aXRoIHRoZSByZXF1ZXN0IFtvcHRpb25hbF1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAgIDo6ICAgIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBmaW5pc2hlZCBbb3B0aW9uYWxdXG4gICAgICovXG5cbiAgICBTYWlsc1NvY2tldC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjYikge1xuXG4gICAgICAvLyBgZGF0YWAgaXMgb3B0aW9uYWxcbiAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYiA9IGRhdGE7XG4gICAgICAgIGRhdGEgPSB7fTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHBhcmFtczogZGF0YSxcbiAgICAgICAgdXJsOiB1cmxcbiAgICAgIH0sIGNiKTtcbiAgICB9O1xuXG5cblxuICAgIC8qKlxuICAgICAqIFNpbXVsYXRlIGEgUE9TVCByZXF1ZXN0IHRvIHNhaWxzXG4gICAgICogZS5nLlxuICAgICAqICAgIGBzb2NrZXQucG9zdCgnL2V2ZW50JywgbmV3TWVldGluZywgJHNwaW5uZXIuaGlkZSlgXG4gICAgICpcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgICAgOjogICAgZGVzdGluYXRpb24gVVJMXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgICA6OiAgICBwYXJhbWV0ZXJzIHRvIHNlbmQgd2l0aCB0aGUgcmVxdWVzdCBbb3B0aW9uYWxdXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgICA6OiAgICBjYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIHdoZW4gZmluaXNoZWQgW29wdGlvbmFsXVxuICAgICAqL1xuXG4gICAgU2FpbHNTb2NrZXQucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNiKSB7XG5cbiAgICAgIC8vIGBkYXRhYCBpcyBvcHRpb25hbFxuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNiID0gZGF0YTtcbiAgICAgICAgZGF0YSA9IHt9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIHVybDogdXJsXG4gICAgICB9LCBjYik7XG4gICAgfTtcblxuXG5cbiAgICAvKipcbiAgICAgKiBTaW11bGF0ZSBhIFBVVCByZXF1ZXN0IHRvIHNhaWxzXG4gICAgICogZS5nLlxuICAgICAqICAgIGBzb2NrZXQucG9zdCgnL2V2ZW50LzMnLCBjaGFuZ2VkRmllbGRzLCAkc3Bpbm5lci5oaWRlKWBcbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCAgICA6OiAgICBkZXN0aW5hdGlvbiBVUkxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAgIDo6ICAgIHBhcmFtZXRlcnMgdG8gc2VuZCB3aXRoIHRoZSByZXF1ZXN0IFtvcHRpb25hbF1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAgIDo6ICAgIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBmaW5pc2hlZCBbb3B0aW9uYWxdXG4gICAgICovXG5cbiAgICBTYWlsc1NvY2tldC5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjYikge1xuXG4gICAgICAvLyBgZGF0YWAgaXMgb3B0aW9uYWxcbiAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYiA9IGRhdGE7XG4gICAgICAgIGRhdGEgPSB7fTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZDogJ3B1dCcsXG4gICAgICAgIHBhcmFtczogZGF0YSxcbiAgICAgICAgdXJsOiB1cmxcbiAgICAgIH0sIGNiKTtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBTaW11bGF0ZSBhIFBBVENIIHJlcXVlc3QgdG8gc2FpbHNcbiAgICAgKiBlLmcuXG4gICAgICogICAgYHNvY2tldC5wYXRjaCgnL2V2ZW50LzMnLCBjaGFuZ2VkRmllbGRzLCAkc3Bpbm5lci5oaWRlKWBcbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCAgICA6OiAgICBkZXN0aW5hdGlvbiBVUkxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAgIDo6ICAgIHBhcmFtZXRlcnMgdG8gc2VuZCB3aXRoIHRoZSByZXF1ZXN0IFtvcHRpb25hbF1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAgIDo6ICAgIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBmaW5pc2hlZCBbb3B0aW9uYWxdXG4gICAgICovXG5cbiAgICBTYWlsc1NvY2tldC5wcm90b3R5cGUucGF0Y2ggPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNiKSB7XG5cbiAgICAgIC8vIGBkYXRhYCBpcyBvcHRpb25hbFxuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNiID0gZGF0YTtcbiAgICAgICAgZGF0YSA9IHt9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiAncGF0Y2gnLFxuICAgICAgICBwYXJhbXM6IGRhdGEsXG4gICAgICAgIHVybDogdXJsXG4gICAgICB9LCBjYik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNpbXVsYXRlIGEgREVMRVRFIHJlcXVlc3QgdG8gc2FpbHNcbiAgICAgKiBlLmcuXG4gICAgICogICAgYHNvY2tldC5kZWxldGUoJy9ldmVudCcsICRzcGlubmVyLmhpZGUpYFxuICAgICAqXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsICAgIDo6ICAgIGRlc3RpbmF0aW9uIFVSTFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhICAgOjogICAgcGFyYW1ldGVycyB0byBzZW5kIHdpdGggdGhlIHJlcXVlc3QgW29wdGlvbmFsXVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiICAgOjogICAgY2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGZpbmlzaGVkIFtvcHRpb25hbF1cbiAgICAgKi9cblxuICAgIFNhaWxzU29ja2V0LnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNiKSB7XG5cbiAgICAgIC8vIGBkYXRhYCBpcyBvcHRpb25hbFxuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNiID0gZGF0YTtcbiAgICAgICAgZGF0YSA9IHt9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyxcbiAgICAgICAgcGFyYW1zOiBkYXRhLFxuICAgICAgICB1cmw6IHVybFxuICAgICAgfSwgY2IpO1xuICAgIH07XG5cblxuXG4gICAgLyoqXG4gICAgICogU2ltdWxhdGUgYW4gSFRUUCByZXF1ZXN0IHRvIHNhaWxzXG4gICAgICogZS5nLlxuICAgICAqIGBgYFxuICAgICAqIHNvY2tldC5yZXF1ZXN0KHtcbiAgICAgKiAgIHVybDonL3VzZXInLFxuICAgICAqICAgcGFyYW1zOiB7fSxcbiAgICAgKiAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAqICAgaGVhZGVyczoge31cbiAgICAgKiB9LCBmdW5jdGlvbiAocmVzcG9uc2VCb2R5LCBKV1IpIHtcbiAgICAgKiAgIC8vIC4uLlxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKiBAb3B0aW9uIHtTdHJpbmd9IHVybCAgICA6OiAgICBkZXN0aW5hdGlvbiBVUkxcbiAgICAgKiBAb3B0aW9uIHtPYmplY3R9IHBhcmFtcyA6OiAgICBwYXJhbWV0ZXJzIHRvIHNlbmQgd2l0aCB0aGUgcmVxdWVzdCBbb3B0aW9uYWxdXG4gICAgICogQG9wdGlvbiB7T2JqZWN0fSBoZWFkZXJzOjogICAgaGVhZGVycyB0byBzZW5kIHdpdGggdGhlIHJlcXVlc3QgW29wdGlvbmFsXVxuICAgICAqIEBvcHRpb24ge0Z1bmN0aW9ufSBjYiAgIDo6ICAgIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBmaW5pc2hlZCBbb3B0aW9uYWxdXG4gICAgICogQG9wdGlvbiB7U3RyaW5nfSBtZXRob2QgOjogICAgSFRUUCByZXF1ZXN0IG1ldGhvZCBbb3B0aW9uYWxdXG4gICAgICovXG5cbiAgICBTYWlsc1NvY2tldC5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNiKSB7XG5cbiAgICAgIHZhciB1c2FnZSA9XG4gICAgICAnVXNhZ2U6XFxuJytcbiAgICAgICdzb2NrZXQucmVxdWVzdCggb3B0aW9ucywgW2ZuVG9DYWxsV2hlbkNvbXBsZXRlXSApXFxuXFxuJytcbiAgICAgICdvcHRpb25zLnVybCA6OiBlLmcuIFwiL2Zvby9iYXJcIicrJ1xcbicrXG4gICAgICAnb3B0aW9ucy5tZXRob2QgOjogZS5nLiBcImdldFwiLCBcInBvc3RcIiwgXCJwdXRcIiwgb3IgXCJkZWxldGVcIiwgZXRjLicrJ1xcbicrXG4gICAgICAnb3B0aW9ucy5wYXJhbXMgOjogZS5nLiB7IGVtYWlsQWRkcmVzczogXCJtaWtlQGV4YW1wbGUuY29tXCIgfScrJ1xcbicrXG4gICAgICAnb3B0aW9ucy5oZWFkZXJzIDo6IGUuZy4geyBcIngtbXktY3VzdG9tLWhlYWRlclwiOiBcInNvbWUgc3RyaW5nXCIgfSc7XG4gICAgICAvLyBPbGQgdXNhZ2U6XG4gICAgICAvLyB2YXIgdXNhZ2UgPSAnVXNhZ2U6XFxuIHNvY2tldC4nKyhvcHRpb25zLm1ldGhvZHx8J3JlcXVlc3QnKSsnKCcrXG4gICAgICAvLyAgICcgZGVzdGluYXRpb25VUkwsIFtkYXRhVG9TZW5kXSwgW2ZuVG9DYWxsV2hlbkNvbXBsZXRlXSApJztcblxuXG4gICAgICAvLyBWYWxpZGF0ZSBvcHRpb25zIGFuZCBjYWxsYmFja1xuICAgICAgaWYgKHR5cGVvZiBjYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjYWxsYmFjayBmdW5jdGlvbiFcXG4nICsgdXNhZ2UpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0aW9ucy51cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBvciBtaXNzaW5nIFVSTCFcXG4nICsgdXNhZ2UpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMubWV0aG9kICYmIHR5cGVvZiBvcHRpb25zLm1ldGhvZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGBtZXRob2RgIHByb3ZpZGVkIChzaG91bGQgYmUgYSBzdHJpbmcgbGlrZSBcInBvc3RcIiBvciBcInB1dFwiKVxcbicgKyB1c2FnZSk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5oZWFkZXJzICYmIHR5cGVvZiBvcHRpb25zLmhlYWRlcnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBgaGVhZGVyc2AgcHJvdmlkZWQgKHNob3VsZCBiZSBhIGRpY3Rpb25hcnkgd2l0aCBzdHJpbmcgdmFsdWVzKVxcbicgKyB1c2FnZSk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5wYXJhbXMgJiYgdHlwZW9mIG9wdGlvbnMucGFyYW1zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYHBhcmFtc2AgcHJvdmlkZWQgKHNob3VsZCBiZSBhIGRpY3Rpb25hcnkgd2l0aCBKU09OLXNlcmlhbGl6YWJsZSB2YWx1ZXMpXFxuJyArIHVzYWdlKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgdHlwZW9mIG9wdGlvbnMuZGF0YSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGBkYXRhYCBwcm92aWRlZCAoc2hvdWxkIGJlIGEgZGljdGlvbmFyeSB3aXRoIEpTT04tc2VyaWFsaXphYmxlIHZhbHVlcylcXG4nICsgdXNhZ2UpO1xuICAgICAgfVxuXG4gICAgICAvLyBBY2NlcHQgZWl0aGVyIGBwYXJhbXNgIG9yIGBkYXRhYCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgKGJ1dCBub3QgYm90aCEpXG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMucGFyYW1zKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNwZWNpZnkgYm90aCBgcGFyYW1zYCBhbmQgYGRhdGFgISAgVGhleSBhcmUgYWxpYXNlcyBvZiBlYWNoIG90aGVyLlxcbicgKyB1c2FnZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgICAgb3B0aW9ucy5wYXJhbXMgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmRhdGE7XG4gICAgICB9XG5cblxuICAgICAgLy8gSWYgdGhpcyBzb2NrZXQgaXMgbm90IGNvbm5lY3RlZCB5ZXQsIHF1ZXVlIHVwIHRoaXMgcmVxdWVzdFxuICAgICAgLy8gaW5zdGVhZCBvZiBzZW5kaW5nIGl0LlxuICAgICAgLy8gKHNvIGl0IGNhbiBiZSByZXBsYXllZCB3aGVuIHRoZSBzb2NrZXQgY29tZXMgb25saW5lLilcbiAgICAgIGlmICggISB0aGlzLmlzQ29ubmVjdGVkKCkgKSB7XG5cbiAgICAgICAgLy8gSWYgbm8gcXVldWUgYXJyYXkgZXhpc3RzIGZvciB0aGlzIHNvY2tldCB5ZXQsIGNyZWF0ZSBpdC5cbiAgICAgICAgdGhpcy5yZXF1ZXN0UXVldWUgPSB0aGlzLnJlcXVlc3RRdWV1ZSB8fCBbXTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0UXVldWUucHVzaChbb3B0aW9ucywgY2JdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIG91ciBzb2NrZXQgaXMgY29ubmVjdGVkLCBzbyBjb250aW51ZSBwcmVwcGluZ1xuICAgICAgLy8gdGhlIHJlcXVlc3QuXG5cbiAgICAgIC8vIERlZmF1bHQgaGVhZGVycyB0byBhbiBlbXB0eSBvYmplY3RcbiAgICAgIG9wdGlvbnMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcblxuICAgICAgLy8gQnVpbGQgYSBzaW11bGF0ZWQgcmVxdWVzdCBvYmplY3RcbiAgICAgIC8vIChhbmQgc2FuaXRpemUvbWFyc2hhbCBvcHRpb25zIGFsb25nIHRoZSB3YXkpXG4gICAgICB2YXIgcmVxdWVzdEN0eCA9IHtcblxuICAgICAgICBtZXRob2Q6IChvcHRpb25zLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKSxcblxuICAgICAgICBoZWFkZXJzOiBvcHRpb25zLmhlYWRlcnMsXG5cbiAgICAgICAgZGF0YTogb3B0aW9ucy5wYXJhbXMgfHwgb3B0aW9ucy5kYXRhIHx8IHt9LFxuXG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBzbGFzaGVzIGFuZCBzcGFjZXMgdG8gbWFrZSBwYWNrZXRzIHNtYWxsZXIuXG4gICAgICAgIHVybDogb3B0aW9ucy51cmwucmVwbGFjZSgvXiguKylcXC8qXFxzKiQvLCAnJDEnKSxcblxuICAgICAgICBjYjogY2JcbiAgICAgIH07XG5cbiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2FsbGJhY2sgbGlzdCwgb3IgY3JlYXRlIGEgbmV3IG9uZS5cbiAgICAgIHRoaXMuX3Jlc3BvbnNlQ2JzID0gdGhpcy5fcmVzcG9uc2VDYnMgfHwgW107XG5cbiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVxdWVzdCBjb250ZXh0IGxpc3QsIG9yIGNyZWF0ZSBhIG5ldyBvbmUuXG4gICAgICB0aGlzLl9yZXF1ZXN0Q3R4cyA9IHRoaXMuX3JlcXVlc3RDdHhzIHx8IFtdO1xuXG4gICAgICAvLyBBZGQgdGhpcyBjYWxsYmFjayB0byB0aGUgbGlzdC4gIElmIHRoZSBzb2NrZXQgZGlzY29ubmVjdHMsIHdlJ2xsIGNhbGxcbiAgICAgIC8vIGVhY2ggY2IgaW4gdGhlIGxpc3Qgd2l0aCBhbiBlcnJvciBhbmQgcmVzZXQgdGhlIGxpc3QuICBPdGhlcndpc2UgdGhlXG4gICAgICAvLyBjYiB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgbGlzdCB3aGVuIHRoZSBzZXJ2ZXIgcmVzcG9uZHMuXG4gICAgICAvLyBBbHNvIGFkZCB0aGUgcmVxdWVzdCBjb250ZXh0IHRvIHRoZSBsaXN0LiAgSXQgd2lsbCBiZSByZW1vdmVkIG9uY2VcbiAgICAgIC8vIHRoZSByZXNwb25zZSBjb21lcyBiYWNrLCBvciBpZiB0aGUgc29ja2V0IGRpc2Nvbm5lY3RzLlxuICAgICAgaWYgKGNiKSB7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlQ2JzLnB1c2goY2IpO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0Q3R4cy5wdXNoKHJlcXVlc3RDdHgpO1xuICAgICAgfVxuXG4gICAgICAvLyBNZXJnZSBnbG9iYWwgaGVhZGVycyBpbiwgaWYgdGhlcmUgYXJlIGFueS5cbiAgICAgIGlmICh0aGlzLmhlYWRlcnMgJiYgJ29iamVjdCcgPT09IHR5cGVvZiB0aGlzLmhlYWRlcnMpIHtcbiAgICAgICAgZm9yICh2YXIgaGVhZGVyIGluIHRoaXMuaGVhZGVycykge1xuICAgICAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzLmhhc093blByb3BlcnR5KGhlYWRlcikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVyc1toZWFkZXJdID0gdGhpcy5oZWFkZXJzW2hlYWRlcl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFNlbmQgdGhlIHJlcXVlc3QuXG4gICAgICBfZW1pdEZyb20odGhpcywgcmVxdWVzdEN0eCk7XG4gICAgfTtcblxuXG5cbiAgICAvKipcbiAgICAgKiBTb2NrZXQucHJvdG90eXBlLl9yZXF1ZXN0XG4gICAgICpcbiAgICAgKiBTaW11bGF0ZSBIVFRQIG92ZXIgU29ja2V0LmlvLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgIG9wdGlvbnMgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYiAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBTYWlsc1NvY2tldC5wcm90b3R5cGUuX3JlcXVlc3QgPSBmdW5jdGlvbihvcHRpb25zLCBjYikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgX3JlcXVlc3QoKWAgd2FzIGEgcHJpdmF0ZSBBUEkgZGVwcmVjYXRlZCBhcyBvZiB2MC4xMSBvZiB0aGUgc2FpbHMuaW8uanMgY2xpZW50LiBVc2UgYC5yZXF1ZXN0KClgIGluc3RlYWQuJyk7XG4gICAgfTtcblxuXG5cblxuXG5cblxuICAgIC8vICDilojilojilZcg4paI4paI4paI4paI4paI4paI4pWXICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilZcg4paI4paI4pWX4paI4paI4pWXICAgICDilojilojilojilojilojilojilojilZdcbiAgICAvLyAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWQ4paI4paI4pWXICAg4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWR4paI4paI4pWRICAgICDilojilojilZTilZDilZDilZDilZDilZ1cbiAgICAvLyAg4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWRICAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4pWR4paI4paI4pWRICAgICDilojilojilojilojilojilojilojilZdcbiAgICAvLyAg4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWRICAg4pWa4pWQ4pWQ4pWQ4pWQ4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4paI4paI4pWR4paI4paI4pWR4paI4paI4pWRICAgICDilZrilZDilZDilZDilZDilojilojilZFcbiAgICAvLyAg4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4pWRICDilojilojilZHilojilojilZHilojilojilojilojilojilojilojilZfilojilojilojilojilojilojilojilZFcbiAgICAvLyAg4pWa4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVnVxuICAgIC8vXG4gICAgLy8gU2V0IGFuIGBpby5zYWlsc2Agb2JqZWN0IHRoYXQgbWF5IGJlIHVzZWQgZm9yIGNvbmZpZ3VyYXRpb24gYmVmb3JlIHRoZVxuICAgIC8vIGZpcnN0IHNvY2tldCBjb25uZWN0cyAoaS5lLiB0byBhbGxvdyBhdXRvLWNvbm5lY3QgYmVoYXZpb3IgdG8gYmVcbiAgICAvLyBwcmV2ZW50ZWQgYnkgc2V0dGluZyBgaW8uc2FpbHMuYXV0b0Nvbm5lY3RgIGluIGFuIGlubGluZSBzY3JpcHRcbiAgICAvLyBkaXJlY3RseSBhZnRlciB0aGUgc2NyaXB0IHRhZyB3aGljaCBsb2FkZWQgdGhpcyBmaWxlKS5cblxuXG4gICAgLy8gIOKUjOKUgOKUkOKUjOKUgOKUkOKUjOKUrOKUkCAg4pSsIOKUrOKUjOKUgOKUkCAg4pWU4pWm4pWX4pWU4pWQ4pWX4pWU4pWQ4pWX4pWU4pWQ4pWX4pWmIOKVpuKVpiDilZTilabilZfilZTilZDilZcgIOKUjOKUgOKUkOKUjOKUgOKUkOKUrOKUgOKUkCAg4pSs4pSM4pSA4pSQIOKUjOKUgOKUkOKUjOKUgOKUkOKUrOKUrCAg4pSM4pSA4pSQXG4gICAgLy8gIOKUlOKUgOKUkOKUnOKUpCAg4pSCICAg4pSCIOKUguKUnOKUgOKUmCAgIOKVkeKVkeKVkeKVoyDilaDilaMg4pWg4pWQ4pWj4pWRIOKVkeKVkSAg4pWRIOKVmuKVkOKVlyAg4pSc4pSkIOKUgiDilILilJzilKzilJggIOKUguKUgiDilIIg4pSU4pSA4pSQ4pSc4pSA4pSk4pSC4pSCICDilJTilIDilJBcbiAgICAvLyAg4pSU4pSA4pSY4pSU4pSA4pSYIOKUtCAgIOKUlOKUgOKUmOKUtCAgICDilZDilanilZ3ilZrilZDilZ3ilZogIOKVqSDilanilZrilZDilZ3ilanilZDilZ3ilakg4pWa4pWQ4pWdICDilJQgIOKUlOKUgOKUmOKUtOKUlOKUgCAg4pS04pSU4pSA4pSYb+KUlOKUgOKUmOKUtCDilLTilLTilLTilIDilJjilJTilIDilJhcbiAgICBpby5zYWlscyA9IHtcblxuICAgICAgLy8gV2hldGhlciB0byBhdXRvbWF0aWNhbGx5IGNvbm5lY3QgYSBzb2NrZXQgYW5kIHNhdmUgaXQgYXMgYGlvLnNvY2tldGAuXG4gICAgICBhdXRvQ29ubmVjdDogdHJ1ZSxcblxuICAgICAgLy8gV2hldGhlciB0byBhdXRvbWF0aWNhbGx5IHRyeSB0byByZWNvbm5lY3QgYWZ0ZXIgY29ubmVjdGlvbiBpcyBsb3N0XG4gICAgICByZWNvbm5lY3Rpb246IGZhbHNlLFxuXG4gICAgICAvLyBUaGUgcm91dGUgKHBhdGgpIHRvIGhpdCB0byBnZXQgYSB4LW9yaWdpbiAoQ09SUykgY29va2llXG4gICAgICAvLyAob3IgdHJ1ZSB0byB1c2UgdGhlIGRlZmF1bHQ6ICcvX19nZXRjb29raWUnKVxuICAgICAgdXNlQ09SU1JvdXRlVG9HZXRDb29raWU6IHRydWUsXG5cbiAgICAgIC8vIFRoZSBlbnZpcm9ubWVudCB3ZSdyZSBydW5uaW5nIGluLlxuICAgICAgLy8gKGxvZ3MgYXJlIG5vdCBkaXNwbGF5ZWQgd2hlbiB0aGlzIGlzIHNldCB0byAncHJvZHVjdGlvbicpXG4gICAgICAvL1xuICAgICAgLy8gRGVmYXVsdHMgdG8gXCJkZXZlbG9wbWVudFwiIHVubGVzcyB0aGlzIHNjcmlwdCB3YXMgZmV0Y2hlZCBmcm9tIGEgVVJMXG4gICAgICAvLyB0aGF0IGVuZHMgaW4gYCoubWluLmpzYCBvciAnI3Byb2R1Y3Rpb24nLCBvciBpZiB0aGUgY29udmVudGlvbmFsXG4gICAgICAvLyBgU0FJTFNfTE9DQUxTYCBnbG9iYWwgaXMgc2V0IHdpdGggYW4gYF9lbnZpcm9ubWVudGAgb2YgXCJwcm9kdWN0aW9uXCJcbiAgICAgIC8vIG9yIFwic3RhZ2luZ1wiLiAgKFRoaXMgc2V0dGluZyBtYXkgYWxzbyBiZSBtYW51YWxseSBvdmVycmlkZGVuLilcbiAgICAgIGVudmlyb25tZW50OiAoXG4gICAgICAgIHVybFRoaXNTY3JpcHRXYXNGZXRjaGVkRnJvbS5tYXRjaCgvKFxcI3Byb2R1Y3Rpb258XFwubWluXFwuanMpL2cpIHx8XG4gICAgICAgIChcbiAgICAgICAgICB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiZcbiAgICAgICAgICB0eXBlb2Ygd2luZG93LlNBSUxTX0xPQ0FMUyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlNBSUxTX0xPQ0FMUyAmJlxuICAgICAgICAgICh3aW5kb3cuU0FJTFNfTE9DQUxTLl9lbnZpcm9ubWVudCA9PT0gJ3N0YWdpbmcnIHx8IHdpbmRvdy5TQUlMU19MT0NBTFMuX2Vudmlyb25tZW50ID09PSAncHJvZHVjdGlvbicpXG4gICAgICAgIClcbiAgICAgICk/ICdwcm9kdWN0aW9uJyA6ICdkZXZlbG9wbWVudCcsXG5cbiAgICAgIC8vIFRoZSB2ZXJzaW9uIG9mIHRoaXMgc2FpbHMuaW8uanMgY2xpZW50IFNES1xuICAgICAgc2RrOiBTREtfSU5GTyxcblxuICAgICAgLy8gVHJhbnNwb3J0cyB0byB1c2Ugd2hlbiBjb21tdW5pY2F0aW5nIHdpdGggdGhlIHNlcnZlciwgaW4gdGhlIG9yZGVyIHRoZXkgd2lsbCBiZSB0cmllZFxuICAgICAgdHJhbnNwb3J0czogWyd3ZWJzb2NrZXQnXVxuICAgIH07XG5cblxuXG4gICAgLy8gIOKUjOKUgOKUkOKUgOKUkCDilKzilIzilKzilJDilIzilIDilJDilIzilJDilIzilIzilKzilJAgIOKUrOKUjOKUgOKUkCDilIzilIDilJDilIzilIDilJDilKzilKwgIOKUjOKUgOKUkCAg4pSM4pSs4pSQ4pSM4pSA4pSQ4pSM4pSA4pSQ4pSM4pSA4pSQ4pSsIOKUrOKUrCDilIzilKzilJDilIzilIDilJBcbiAgICAvLyAg4pSc4pSkIOKUjOKUtOKUrOKUmCDilIIg4pSc4pSkIOKUguKUguKUgiDilILilIIgIOKUguKUgiDilIIg4pSU4pSA4pSQ4pSc4pSA4pSk4pSC4pSCICDilJTilIDilJAgICDilILilILilJzilKQg4pSc4pSkIOKUnOKUgOKUpOKUgiDilILilIIgIOKUgiDilJTilIDilJBcbiAgICAvLyAg4pSU4pSA4pSY4pS0IOKUlOKUgCDilLQg4pSU4pSA4pSY4pSY4pSU4pSY4pSA4pS04pSYICDilLTilJTilIDilJhv4pSU4pSA4pSY4pS0IOKUtOKUtOKUtOKUgOKUmOKUlOKUgOKUmCAg4pSA4pS04pSY4pSU4pSA4pSY4pSUICDilLQg4pS04pSU4pSA4pSY4pS04pSA4pSY4pS0IOKUlOKUgOKUmFxuICAgIC8vICDilKwg4pSs4pSs4pSM4pSs4pSQ4pSsIOKUrCAg4pSM4pSs4pSQ4pSsIOKUrOKUjOKUgOKUkCAg4pWmIOKVpuKVlOKVpuKVl+KVlOKVpuKVl+KVpiAgICDilZTilZDilZfilZTilabilZfilZTilabilZfilabilZDilZfilabilZTilZcg4pWmIOKVpuKVlOKVpuKVl+KVlOKVkOKVl+KVlOKVkOKVl1xuICAgIC8vICDilILilILilILilIIg4pSCIOKUnOKUgOKUpCAgIOKUgiDilJzilIDilKTilJzilKQgICDilaDilZDilaMg4pWRIOKVkeKVkeKVkeKVkSAgICDilaDilZDilaMg4pWRICDilZEg4pWg4pWm4pWd4pWR4pWg4pWp4pWX4pWRIOKVkSDilZEg4pWR4pWjIOKVmuKVkOKVl1xuICAgIC8vICDilJTilLTilJjilLQg4pS0IOKUtCDilLQgICDilLQg4pS0IOKUtOKUlOKUgOKUmCAg4pWpIOKVqSDilakg4pWpIOKVqeKVqeKVkOKVnSAg4pWpIOKVqSDilakgIOKVqSDilanilZrilZDilanilZrilZDilZ3ilZrilZDilZ0g4pWpIOKVmuKVkOKVneKVmuKVkOKVnVxuICAgIC8vICDilIzilIDilJDilKzilIDilJDilIzilIDilJDilIzilKzilJAgIOKUjOKUrOKUkOKUrCDilKzilIzilIDilJAgIOKUjOKUgOKUkOKUjOKUgOKUkOKUrOKUgOKUkOKUrOKUjOKUgOKUkOKUjOKUrOKUkCAg4pSM4pSs4pSQ4pSM4pSA4pSQ4pSM4pSA4pSQXG4gICAgLy8gIOKUnOKUpCDilJzilKzilJjilIIg4pSC4pSC4pSC4pSCICAg4pSCIOKUnOKUgOKUpOKUnOKUpCAgIOKUlOKUgOKUkOKUgiAg4pSc4pSs4pSY4pSC4pSc4pSA4pSYIOKUgiAgICDilIIg4pSc4pSA4pSk4pSCIOKUrFxuICAgIC8vICDilJQgIOKUtOKUlOKUgOKUlOKUgOKUmOKUtCDilLQgICDilLQg4pS0IOKUtOKUlOKUgOKUmCAg4pSU4pSA4pSY4pSU4pSA4pSY4pS04pSU4pSA4pS04pS0ICAg4pS0ICAgIOKUtCDilLQg4pS04pSU4pSA4pSYXG4gICAgLy9cbiAgICAvLyBOb3cgZm9sZCBpbiBjb25maWcgcHJvdmlkZWQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9uIHRoZSBzY3JpcHQgdGFnOlxuICAgIC8vIChub3RlIHRoYXQgaWYgYGlvLnNhaWxzLipgIGlzIGNoYW5nZWQgYWZ0ZXIgdGhpcyBzY3JpcHQsIHRob3NlIGNoYW5nZXNcbiAgICAvLyAgd2lsbCBzdGlsbCB0YWtlIHByZWNlZGVuY2UpXG4gICAgQ09ORklHVVJBQkxFX1ZJQV9IVE1MX0FUVFIuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnS2V5KXtcbiAgICAgIGlmICh0eXBlb2Ygc2NyaXB0VGFnQ29uZmlnW2NvbmZpZ0tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlvLnNhaWxzW2NvbmZpZ0tleV0gPSBzY3JpcHRUYWdDb25maWdbY29uZmlnS2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBOb3RlIHRoYXQgdGhlIG5ldyBIVE1MIGF0dHJpYnV0ZSBjb25maWd1cmF0aW9uIHN0eWxlIG1heSBldmVudHVhbGx5XG4gICAgLy8gY29tcGxldGVseSByZXBsYWNlIHRoZSBvcmlnaW5hbCBhcHByb2FjaCBvZiBzZXR0aW5nIGBpby5zYWlsc2AgcHJvcGVydGllcyxcbiAgICAvLyBzaW5jZSB0aGUgbmV3IHN0cmF0ZWd5IGlzIGVhc2llciB0byByZWFzb24gYWJvdXQuICBBbHNvLCBpdCB3b3VsZCBhbGxvdyB1c1xuICAgIC8vIHRvIHJlbW92ZSB0aGUgdGltZW91dCBiZWxvdyBzb21lZGF5LlxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cblxuXG4gICAgLy8gIOKUrOKUjOKUgOKUkCDilIzilIDilJDilIzilIDilJDilKzilKwgIOKUjOKUgOKUkCDilZTilZDilZfilZTilZDilZfilZTilZfilZTilZTilZfilZTilZTilZDilZfilZTilZDilZfilZTilabilZcgIC8gIFxcXG4gICAgLy8gIOKUguKUgiDilIIg4pSU4pSA4pSQ4pSc4pSA4pSk4pSC4pSCICDilJTilIDilJAg4pWRICDilZEg4pWR4pWR4pWR4pWR4pWR4pWR4pWR4pWR4pWjIOKVkSAgIOKVkSAgLyAgIC9cbiAgICAvLyAg4pS04pSU4pSA4pSYb+KUlOKUgOKUmOKUtCDilLTilLTilLTilIDilJjilJTilIDilJhv4pWa4pWQ4pWd4pWa4pWQ4pWd4pWd4pWa4pWd4pWd4pWa4pWd4pWa4pWQ4pWd4pWa4pWQ4pWdIOKVqSAgXFwgIC9cblxuICAgIC8qKlxuICAgICAqIEFkZCBgaW8uc2FpbHMuY29ubmVjdGAgZnVuY3Rpb24gYXMgYSB3cmFwcGVyIGZvciB0aGUgYnVpbHQtaW4gYGlvKClgIGFrYSBgaW8uY29ubmVjdCgpYFxuICAgICAqIG1ldGhvZCwgcmV0dXJuaW5nIGEgU2FpbHNTb2NrZXQuIFRoaXMgc3BlY2lhbCBmdW5jdGlvbiByZXNwZWN0cyB0aGUgY29uZmlndXJlZCBpby5zYWlsc1xuICAgICAqIGNvbm5lY3Rpb24gVVJMLCBhcyB3ZWxsIGFzIHNlbmRpbmcgb3RoZXIgaWRlbnRpZnlpbmcgaW5mb3JtYXRpb24gKG1vc3QgaW1wb3J0YW50bHksIHRoZVxuICAgICAqIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGlzIFNESykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHVybCAgW29wdGlvbmFsXVxuICAgICAqIEBwYXJhbSAge09iamVjdH0gb3B0cyBbb3B0aW9uYWxdXG4gICAgICogQHJldHVybiB7U29ja2V0fVxuICAgICAqL1xuICAgIGlvLnNhaWxzLmNvbm5lY3QgPSBmdW5jdGlvbih1cmwsIG9wdHMpIHtcblxuICAgICAgLy8gTWFrZSBVUkwgb3B0aW9uYWxcbiAgICAgIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHVybCkge1xuICAgICAgICBvcHRzID0gdXJsO1xuICAgICAgICB1cmwgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBEZWZhdWx0IG9wdHMgdG8gZW1wdHkgb2JqZWN0XG4gICAgICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICAgICAgLy8gSWYgZXhwbGljaXQgY29ubmVjdGlvbiB1cmwgaXMgc3BlY2lmaWVkLCBzYXZlIGl0IHRvIG9wdGlvbnNcbiAgICAgIG9wdHMudXJsID0gdXJsIHx8IG9wdHMudXJsIHx8IHVuZGVmaW5lZDtcblxuICAgICAgLy8gSW5zdGFudGlhdGUgYW5kIHJldHVybiBhIG5ldyBTYWlsc1NvY2tldC0gYW5kIHRyeSB0byBjb25uZWN0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIHNvY2tldCA9IG5ldyBTYWlsc1NvY2tldChvcHRzKTtcbiAgICAgIHNvY2tldC5fY29ubmVjdCgpO1xuICAgICAgcmV0dXJuIHNvY2tldDtcbiAgICB9O1xuXG5cblxuXG5cblxuICAgIC8vICDilojilojilZcg4paI4paI4paI4paI4paI4paI4pWXICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilZcgIOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVlyAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4paI4pWXXG4gICAgLy8gIOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKVkOKWiOKWiOKVlyAgIOKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVkSDilojilojilZTilZ3ilojilojilZTilZDilZDilZDilZDilZ3ilZrilZDilZDilojilojilZTilZDilZDilZ1cbiAgICAvLyAg4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWRICAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWRICAgICDilojilojilojilojilojilZTilZ0g4paI4paI4paI4paI4paI4pWXICAgICDilojilojilZFcbiAgICAvLyAg4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWRICAg4pWa4pWQ4pWQ4pWQ4pWQ4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWRICAgICDilojilojilZTilZDilojilojilZcg4paI4paI4pWU4pWQ4pWQ4pWdICAgICDilojilojilZFcbiAgICAvLyAg4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4pWa4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICDilojilojilZfilojilojilojilojilojilojilojilZcgICDilojilojilZFcbiAgICAvLyAg4pWa4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdICDilZrilZDilZDilZDilZDilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVnSAgIOKVmuKVkOKVnVxuICAgIC8vXG4gICAgLy8gaW8uc29ja2V0XG4gICAgLy9cbiAgICAvLyBUaGUgZWFnZXIgaW5zdGFuY2Ugb2YgU29ja2V0IHdoaWNoIHdpbGwgYXV0b21hdGljYWxseSB0cnkgdG8gY29ubmVjdFxuICAgIC8vIHVzaW5nIHRoZSBob3N0IHRoYXQgdGhpcyBqcyBmaWxlIHdhcyBzZXJ2ZWQgZnJvbS5cbiAgICAvL1xuICAgIC8vIFRoaXMgY2FuIGJlIGRpc2FibGVkIG9yIGNvbmZpZ3VyZWQgYnkgc2V0dGluZyBwcm9wZXJ0aWVzIG9uIGBpby5zYWlscy4qYCB3aXRoaW4gdGhlXG4gICAgLy8gZmlyc3QgY3ljbGUgb2YgdGhlIGV2ZW50IGxvb3AuXG4gICAgLy9cblxuXG4gICAgLy8gQnVpbGQgYGlvLnNvY2tldGAgc28gaXQgZXhpc3RzXG4gICAgLy8gKG5vdGUgdGhhdCB0aGlzIERPRVMgTk9UIHN0YXJ0IHRoZSBjb25uZWN0aW9uIHByb2Nlc3MpXG4gICAgaW8uc29ja2V0ID0gbmV3IFNhaWxzU29ja2V0KCk7XG4gICAgLy9cbiAgICAvLyBUaGlzIHNvY2tldCBpcyBub3QgY29ubmVjdGVkIHlldCwgYW5kIGhhcyBub3QgZXZlbiBfc3RhcnRlZF8gY29ubmVjdGluZy5cbiAgICAvL1xuICAgIC8vIEJ1dCBpbiB0aGUgbWVhbiB0aW1lLCB0aGlzIGVhZ2VyIHNvY2tldCB3aWxsIGJlIHF1ZXVlIGV2ZW50cyBib3VuZCBieSB0aGUgdXNlclxuICAgIC8vIGJlZm9yZSB0aGUgZmlyc3QgY3ljbGUgb2YgdGhlIGV2ZW50IGxvb3AgKHVzaW5nIGAub24oKWApLCB3aGljaCB3aWxsIGxhdGVyXG4gICAgLy8gYmUgcmVib3VuZCBvbiB0aGUgcmF3IHVuZGVybHlpbmcgc29ja2V0LlxuXG5cbiAgICAvLyAg4pSM4pSA4pSQ4pSM4pSA4pSQ4pSM4pSs4pSQICDilIzilIDilJDilKwg4pSs4pSM4pSs4pSQ4pSM4pSA4pSQICAg4pSM4pSA4pSQ4pSM4pSA4pSQ4pSM4pSQ4pSM4pSM4pSQ4pSM4pSM4pSA4pSQ4pSM4pSA4pSQ4pSM4pSs4pSQICDilIzilKzilJDilKzilIzilKzilJDilIzilIDilJDilKzilIDilJBcbiAgICAvLyAg4pSU4pSA4pSQ4pSc4pSkICDilIIgICDilJzilIDilKTilIIg4pSCIOKUgiDilIIg4pSC4pSA4pSA4pSA4pSCICDilIIg4pSC4pSC4pSC4pSC4pSC4pSC4pSC4pSc4pSkIOKUgiAgIOKUgiAgICDilIIg4pSC4pSC4pSC4pSC4pSc4pSkIOKUnOKUrOKUmFxuICAgIC8vICDilJTilIDilJjilJTilIDilJgg4pS0ICAg4pS0IOKUtOKUlOKUgOKUmCDilLQg4pSU4pSA4pSYICAg4pSU4pSA4pSY4pSU4pSA4pSY4pSY4pSU4pSY4pSY4pSU4pSY4pSU4pSA4pSY4pSU4pSA4pSYIOKUtCAgICDilLQg4pS04pS0IOKUtOKUlOKUgOKUmOKUtOKUlOKUgFxuICAgIC8vIElmIGNvbmZpZ3VyZWQgdG8gZG8gc28sIHN0YXJ0IGF1dG8tY29ubmVjdGluZyBhZnRlciB0aGUgZmlyc3QgY3ljbGUgb2YgdGhlIGV2ZW50IGxvb3BcbiAgICAvLyBoYXMgY29tcGxldGVkICh0byBhbGxvdyB0aW1lIGZvciB0aGlzIGJlaGF2aW9yIHRvIGJlIGNvbmZpZ3VyZWQvZGlzYWJsZWRcbiAgICAvLyBieSBzcGVjaWZ5aW5nIHByb3BlcnRpZXMgb24gYGlvLnNhaWxzYClcblxuICAgIC8vIEluZGljYXRlIHRoYXQgdGhlIGF1dG9Db25uZWN0IHRpbWVyIGhhcyBzdGFydGVkLlxuICAgIGlvLnNvY2tldC5fbWlnaHRCZUFib3V0VG9BdXRvQ29ubmVjdCA9IHRydWU7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAvLyBJbmRpY2F0ZSB0aGF0IHRoZSBhdXRvQ29uZWN0IHRpbWVyIGZpcmVkLlxuICAgICAgaW8uc29ja2V0Ll9taWdodEJlQWJvdXRUb0F1dG9Db25uZWN0ID0gZmFsc2U7XG5cbiAgICAgIC8vIElmIGF1dG9Db25uZWN0IGlzIGRpc2FibGVkLCBkZWxldGUgdGhlIGVhZ2VyIHNvY2tldCAoaW8uc29ja2V0KSBhbmQgYmFpbCBvdXQuXG4gICAgICBpZiAoaW8uc2FpbHMuYXV0b0Nvbm5lY3QgPT09IGZhbHNlIHx8IGlvLnNhaWxzLmF1dG9jb25uZWN0ID09PSBmYWxzZSkge1xuICAgICAgICBkZWxldGUgaW8uc29ja2V0O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnNvbG9nKCdFYWdlcmx5IGF1dG8tY29ubmVjdGluZyBzb2NrZXQgdG8gU2FpbHMuLi4gKHJlcXVlc3RzIHdpbGwgYmUgcXVldWVkIGluIHRoZSBtZWFuLXRpbWUpJyk7XG4gICAgICBpby5zb2NrZXQuX2Nvbm5lY3QoKTtcblxuXG4gICAgfSwgMCk7IC8vIDwvc2V0VGltZW91dD5cblxuXG4gICAgLy8gUmV0dXJuIHRoZSBgaW9gIG9iamVjdC5cbiAgICByZXR1cm4gaW87XG4gIH0gLy88L1NhaWxzSU9DbGllbnQ+XG5cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vLy8vIDwvYnVuY2hlcyBvZiBwcml2YXRlIGZ1bmN0aW9uIGRlZmluaXRpb25zLCBjb25zdHJ1Y3RvcnMsIGFuZCBtZXRob2RzPlxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cblxuICAvLyAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWXICDilojilojilZfilojilojilojilojilojilojilZcgIOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilojilZfilojilojilojilojilojilojilojilZcgICAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKVlyAg4paI4paI4pWXXG4gIC8vICDilojilojilZTilZDilZDilZDilZDilZ3ilZrilojilojilZfilojilojilZTilZ3ilojilojilZTilZDilZDilojilojilZfilojilojilZTilZDilZDilZDilojilojilZfilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilZDilZDilZ0gICAg4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWRIOKWiOKWiOKVlOKVnVxuICAvLyAg4paI4paI4paI4paI4paI4pWXICAg4pWa4paI4paI4paI4pWU4pWdIOKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVneKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKVlyAgICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4paI4paI4paI4pWU4pWdXG4gIC8vICDilojilojilZTilZDilZDilZ0gICDilojilojilZTilojilojilZcg4paI4paI4pWU4pWQ4pWQ4pWQ4pWdIOKWiOKWiOKVkSAgIOKWiOKWiOKVkeKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKVnSAgICAgIOKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWU4pWQ4paI4paI4pWXXG4gIC8vICDilojilojilojilojilojilojilojilZfilojilojilZTilZ0g4paI4paI4pWX4paI4paI4pWRICAgICDilZrilojilojilojilojilojilojilZTilZ3ilojilojilojilojilojilojilojilZHilojilojilojilojilojilojilojilZcgICAg4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWRICDilojilojilZdcbiAgLy8gIOKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVnSAg4pWa4pWQ4pWd4pWa4pWQ4pWdICAgICAg4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVnSAgICDilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWdICDilZrilZDilZ1cbiAgLy9cblxuXG4gIC8vIEFkZCBDb21tb25KUyBzdXBwb3J0IHRvIGFsbG93IHRoaXMgY2xpZW50IFNESyB0byBiZSB1c2VkIGZyb20gTm9kZS5qcy5cbiAgaWYgKFNES19JTkZPLnBsYXRmb3JtID09PSAnbm9kZScpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFNhaWxzSU9DbGllbnQ7XG4gIH1cbiAgLy8gQWRkIEFNRCBzdXBwb3J0LCByZWdpc3RlcmluZyB0aGlzIGNsaWVudCBTREsgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBTYWlsc0lPQ2xpZW50O1xuICAgIH0pO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSwgdHJ5IHRvIGluc3RhbnRpYXRlIHRoZSBjbGllbnQgdXNpbmcgdGhlIGdsb2JhbCBgaW9gOlxuICAgIFNhaWxzSU9DbGllbnQoKTtcblxuICAgIC8vIE5vdGU6XG4gICAgLy8gSWYgeW91IGFyZSBtb2RpZnlpbmcgdGhpcyBmaWxlIG1hbnVhbGx5IHRvIHdyYXAgYW4gZXhpc3Rpbmcgc29ja2V0LmlvIGNsaWVudFxuICAgIC8vIChlLmcuIHRvIHByZXZlbnQgcG9sbHV0aW9uIG9mIHRoZSBnbG9iYWwgbmFtZXNwYWNlKSwgeW91IGNhbiByZXBsYWNlIHRoZSBnbG9iYWxcbiAgICAvLyBgaW9gIHdpdGggeW91ciBvd24gYGlvYCBpbnN0YW5jZSBhYm92ZS5cbiAgfVxuXG59KSgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sails.io.js/sails.io.js\n");

/***/ })

};
;